/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 01.04.2023 01:15:17

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 55952;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,40,40,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0037062668707221746, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 53,-1,35, -1,-20,19, -127,-120,-66, 
  /* [1][1][][] */ 7,-2,2, -18,7,-2, 6,-28,10, 
  /* [1][2][][] */ 1,22,2, 0,11,2, 46,-15,18, 
  /* [2][0][][] */ 26,-7,-9, 74,116,-2, 37,-40,4, 
  /* [2][1][][] */ 7,12,-3, 67,127,-29, 18,-5,-9, 
  /* [2][2][][] */ 47,-66,18, 73,-42,-21, 30,-55,12, 
  /* [3][0][][] */ 9,35,5, 33,94,20, 1,6,-4, 
  /* [3][1][][] */ 24,39,9, 68,127,25, -12,-17,5, 
  /* [3][2][][] */ 8,6,7, 30,29,11, 2,-1,5, 
  /* [4][0][][] */ 45,78,-4, 21,88,-6, -18,7,-6, 
  /* [4][1][][] */ 46,96,48, 38,127,33, 27,48,-19, 
  /* [4][2][][] */ 50,73,29, 39,112,5, -28,16,12, 
  /* [5][0][][] */ 8,3,-118, -1,4,-100, -2,31,-24, 
  /* [5][1][][] */ 4,-41,-127, 0,-42,-112, 1,16,-21, 
  /* [5][2][][] */ -2,9,-17, 3,-1,-10, 4,16,-8, 
  /* [6][0][][] */ 27,-62,37, 50,-86,42, 10,-20,9, 
  /* [6][1][][] */ 39,-95,64, 67,-127,74, 8,-28,18, 
  /* [6][2][][] */ 23,-33,16, 17,-42,29, -11,9,1, 
  /* [7][0][][] */ -35,14,2, -114,-45,-2, -23,26,4, 
  /* [7][1][][] */ -14,-9,1, -127,-93,-4, -3,-2,9, 
  /* [7][2][][] */ -24,31,-8, -12,12,1, -20,29,1, 
  /* [8][0][][] */ -33,-28,-42, -31,-25,-40, -124,-117,-127, 
  /* [8][1][][] */ -30,-24,-38, -33,-26,-39, -123,-114,-123, 
  /* [8][2][][] */ -25,-13,-40, -28,-16,-41, -48,-38,-67, 
  /* [9][0][][] */ -23,-5,8, -17,-10,-3, 1,1,-13, 
  /* [9][1][][] */ 97,115,-9, 72,127,14, -9,18,25, 
  /* [9][2][][] */ -29,-27,14, 0,-34,-3, 8,1,-23, 
  /* [10][0][][] */ -25,-84,-19, 33,94,20, -9,-13,-3, 
  /* [10][1][][] */ -60,-104,-14, 78,127,14, -17,-27,-1, 
  /* [10][2][][] */ -32,-20,2, 36,22,-11, -9,-1,7, 
  /* [11][0][][] */ -21,-34,-7, 5,-51,-1, 12,-104,-54, 
  /* [11][1][][] */ -57,-53,-27, -43,-73,-46, -15,-61,-55, 
  /* [11][2][][] */ -16,-49,-91, 117,127,60, -46,9,-55, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-98,-18, -62,-111,-25, -10,-18,-6, 
  /* [13][1][][] */ 61,114,15, 57,127,24, 7,15,10, 
  /* [13][2][][] */ -8,-19,3, 2,-18,-1, 0,4,-4, 
  /* [14][0][][] */ 46,-5,-37, 80,-25,-50, 30,-11,-22, 
  /* [14][1][][] */ 89,-17,-74, 127,-40,-89, 56,-21,-40, 
  /* [14][2][][] */ 55,-9,-46, 74,-21,-53, 24,-8,-20, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant2_scale = { 16, { 3.5351035876374226e-07, 0.058882825076580048, 0.082943931221961975, 0.014017505571246147, 0.0042949039489030838, 0.078744217753410339, 0.036613713949918747, 0.1049833819270134, 0.0021427441388368607, 0.021377632394433022, 0.032560043036937714, 0.002100314712151885, 3.1119930099521298e-07, 0.02747587114572525, 0.050795666873455048, 3.3547898681263177e-08, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -1073741824, 16887, -98317, -40501, 108502, 70155, 14026, 49746, 309071, -9201, 27105, 802079, -1073741824, 38288, 15138, -1073741824, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 1.3102037232926023e-09, 0.00021823546558152884, 0.00030741235241293907, 5.19526147400029e-05, 1.5918059943942353e-05, 0.00029184710001572967, 0.00013570018927566707, 0.00038909644354134798, 7.9415813161176629e-06, 7.9231213021557778e-05, 0.000120676209917292, 7.7843269536970183e-06, 1.1533876076441629e-09, 0.00010183291306020692, 0.0001882623037090525, 1.243374708748135e-10, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-126,39,-67,80,-76,-91,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,91,-2,-72,67,-95,78,-95,-27,4,-15,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,15,-29,14,-28,0,3,-110,-49,8,-30,-14, -78,-41,-57,-14,-8,-26,8,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,33,-26,34,-127,6,-2,2,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-6,38,-39,52,-77,0,0,4,40,2,-27,23, 23,-4,32,-2,-27,40,-34,21,-125,-13,0,85,-58,0,-29,-111, 21,-7,20,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.079427838325500488, 0.0042133037932217121, 0.0071416161954402924, 0.010096569545567036, 0.0043989350087940693, 0.0013057084288448095, 0.010564371012151241, 0.0017277463339269161, 0.0012413953663781285, 0.0092082023620605469, 0.0067201522178947926, 0.020866362378001213, 0.030907778069376945, 0.010089506395161152, 0.0049017234705388546, 0.16606816649436951, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { -161, 26927, 23864, 14377, 19117, 107997, 20796, 96056, -5470, 8966, 33231, 10116, -445, 27073, 18667, -107, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0018688903655856848, 9.9136559583712369e-05, 0.00016803803737275302, 0.0002375663461862132, 0.00010350435331929475, 3.0722552764927968e-05, 0.00024857342941686511, 4.0652856114320457e-05, 2.9209302738308907e-05, 0.00021666358225047588, 0.00015812122728675604, 0.00049097323790192604, 0.00072724185883998871, 0.00023740014876239002, 0.00011533467477420345, 0.003907486330717802, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ 0,-21,1,0,127,0,1,1,2,-127,-93,-6,0,123,-3,0, 
  /* [1][0][][] */ 0,-29,-1,83,70,14,21,7,-1,-4,127,-45,0,31,-13,0, 
  /* [2][0][][] */ 0,1,0,-11,-56,4,10,2,1,4,-16,1,0,127,-9,0, 
  /* [3][0][][] */ 0,-13,-21,-127,81,26,67,20,2,60,1,41,0,-2,19,0, 
  /* [4][0][][] */ 0,53,-24,38,-58,34,127,12,0,-60,19,-11,0,-5,14,0, 
  /* [5][0][][] */ 0,-17,-12,-1,-21,-23,-13,16,1,10,-4,-43,0,-5,127,0, 
  /* [6][0][][] */ 0,21,-2,3,49,-24,-27,-10,1,-112,118,61,0,127,61,0, 
  /* [7][0][][] */ 0,13,-17,127,6,-2,16,11,-1,67,-52,79,0,-9,49,0, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.085622124373912811, 0.068032205104827881, 0.098883435130119324, 0.041740238666534424, 0.06629953533411026, 0.10281451791524887, 0.064664185047149658, 0.037733748555183411, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -1411, -41867, -8672, -12467, -33671, -1481, -24551, -27115, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0020146381575614214, 0.0016007578233256936, 0.0023266691714525223, 0.0009821233106777072, 0.0015599890612065792, 0.0024191651027649641, 0.0015215103048831224, 0.00088785291882231832, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ 15,-127,51,-46,29,-17,-52,22, 
  /* [1][0][][] */ 78,67,-21,-96,12,-11,-88,127, 
  /* [2][0][][] */ 31,5,-44,127,48,123,50,94, 
  /* [3][0][][] */ 78,68,-76,127,-94,-7,-7,14, 
  /* [4][0][][] */ -36,-96,71,6,2,33,-46,-127, 
  /* [5][0][][] */ 16,7,-35,39,4,-31,35,127, 
  /* [6][0][][] */ 48,-18,-127,-91,104,15,55,-36, 
  /* [7][0][][] */ 127,19,22,-26,32,-4,84,-62, 
  /* [8][0][][] */ 19,-107,10,112,4,20,-7,-127, 
  /* [9][0][][] */ 106,-127,11,3,-8,16,-125,83, 
  /* [10][0][][] */ -127,-40,-113,23,-15,10,-109,55, 
  /* [11][0][][] */ -21,-47,-11,-108,-127,-32,49,-14, 
  /* [12][0][][] */ 15,3,-43,72,-80,-20,64,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -8,-32,-7,7,41,127,45,39, 
  /* [15][0][][] */ 38,5,19,-127,61,43,-58,69, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 13,26,127,19,-28,-8,30,31, 
  /* [18][0][][] */ 88,-127,21,36,-6,17,-110,7, 
  /* [19][0][][] */ -127,-7,33,78,-62,-56,-94,66, 
  /* [20][0][][] */ 38,29,-45,121,-22,-127,-3,63, 
  /* [21][0][][] */ 54,23,127,10,-15,-11,66,10, 
  /* [22][0][][] */ -76,-18,-127,0,8,10,-103,7, 
  /* [23][0][][] */ -97,124,-16,-24,5,-12,127,-72, 
  /* [24][0][][] */ 5,-58,-53,84,-8,-59,100,127, 
  /* [25][0][][] */ 12,40,30,28,125,127,-76,-49, 
  /* [26][0][][] */ -85,-32,-127,-1,9,18,-98,-3, 
  /* [27][0][][] */ 1,-24,-35,10,-43,127,62,52, 
  /* [28][0][][] */ 6,-22,-19,45,24,127,50,60, 
  /* [29][0][][] */ 88,25,127,7,-24,-20,94,-2, 
  /* [30][0][][] */ -82,127,-26,-26,15,-9,105,-49, 
  /* [31][0][][] */ -46,-95,-19,-1,38,-76,127,113, 
  /* [32][0][][] */ 0,2,-59,124,-10,110,91,127, 
  /* [33][0][][] */ 5,62,-9,-111,12,-10,-11,127, 
  /* [34][0][][] */ -26,84,-7,-94,28,-14,20,127, 
  /* [35][0][][] */ 127,5,-13,-37,26,36,92,-36, 
  /* [36][0][][] */ -127,-13,24,68,-43,8,-111,85, 
  /* [37][0][][] */ -9,-27,-14,26,34,127,48,52, 
  /* [38][0][][] */ 11,23,8,80,127,-7,-21,35, 
  /* [39][0][][] */ 4,26,38,-127,25,-1,-40,121, 
  /* [40][0][][] */ 99,24,127,5,-11,-9,93,-4, 
  /* [41][0][][] */ -2,-32,-33,90,51,127,79,110, 
  /* [42][0][][] */ -77,-6,127,19,-34,12,-26,63, 
  /* [43][0][][] */ -10,-52,9,101,-15,6,13,-127, 
  /* [44][0][][] */ 31,1,-67,-127,73,-21,-15,-112, 
  /* [45][0][][] */ -94,127,1,-49,11,5,75,-63, 
  /* [46][0][][] */ -127,-25,41,25,-32,31,-87,40, 
  /* [47][0][][] */ 106,25,127,-6,34,-17,120,-20, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0010839852038770914, 0.00095151993446052074, 0.00065655523212626576, 0.00060974637744948268, 0.00060841796221211553, 0.00062001153128221631, 0.00069274811539798975, 0.0035377673339098692, 0.00080147938570007682, 0.0041761822067201138, 0.0015517914434894919, 0.0032673836685717106, 0.00035434760502539575, 3.937008052901092e-09, 0.002090041060000658, 0.0004207702586427331, 3.937008052901092e-09, 0.013861802406609058, 0.00074012571712955832, 0.00073416496161371469, 0.00046615069732069969, 0.010718538425862789, 0.00080540089402347803, 0.0026989586185663939, 0.0020055561326444149, 0.001172600663267076, 0.0054464265704154968, 0.003880135715007782, 0.00058100838214159012, 0.0040184785611927509, 0.00212455028668046, 0.00030057172989472747, 0.00042375110206194222, 0.021454008296132088, 0.0010089866118505597, 0.0015784775605425239, 0.0095036933198571205, 0.0007729149074293673, 0.0046448716893792152, 0.00065503508085384965, 0.0030627832747995853, 0.00037225350388325751, 0.00095471023814752698, 0.020596848800778389, 0.00072239188011735678, 0.00087613728828728199, 0.00076511880615726113, 0.00049244455294683576, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 5286, 167, 13114, 8529, 8924, 9168, 15111, -47, 7, -491, 2618, 716, 16936, -112541384, 3438, 21371, -90849240, -146, -758, 14430, 6440, -27, 69, 634, 5173, -1314, 86, 868, 5274, 1984, 3780, 21407, 4864, 415, 323, -2046, 444, 4511, -212, 14511, 2530, 16139, -517, -109, 19055, 270, 9995, 4935, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00039678192115388811, 0.00034829435753636062, 0.00024032547662500292, 0.00022319155687000602, 0.00022270530462265015, 0.00022694902145303786, 0.00025357352569699287, 0.0012949643423780799, 0.00029337350861169398, 0.0015286497073248029, 0.00056801771279424429, 0.0011959930416196585, 0.00012970539683010429, 1.4411023485649821e-09, 0.00076503859600052238, 0.00015401873679365963, 1.4411023485649821e-09, 0.0050739739090204239, 0.00027091562515124679, 0.00026873374008573592, 0.00017062979168258607, 0.003923413809388876, 0.00029480893863365054, 0.00098792684730142355, 0.00073411373887211084, 0.00042921872227452695, 0.0019936098251491785, 0.0014202848542481661, 0.00021267229749355465, 0.0014709238894283772, 0.00077767035691067576, 0.00011002127575920895, 0.0001551098539493978, 0.0078530246391892433, 0.00036932944203726947, 0.00057778588961809874, 0.0034787317272275686, 0.0002829177537932992, 0.001700208755210042, 0.00023976904049050063, 0.0011211012024432421, 0.00013625966676045209, 0.0003494621196296066, 0.0075392704457044601, 0.0002644243068061769, 0.00032070127781480551, 0.000280064094113186, 0.00018025439931079745, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -42,-23,-7,-16,7,-39,-78,-68,-27,-51,9,64,34,-71,114,-43,-113,-84,37,-6,-2,-69,-112,-79,-35,-126,-63,-20,70,15,95,27,-127,-88,-7,54,18,48,-127,79,-77,-14,105,-108,-2,-35,-88,107, 76,12,-28,-28,58,-127,-127,-81,60,-77,-115,107,38,-82,-1,62,-52,-112,59,7,10,-110,-127,-69,-4,-127,-120,-40,-55,21,-56,54,29,-127,65,84,13,72,-92,127,-127,6,125,-127,2,-23,-127,94, -31,44,7,-5,-64,-109,-58,-17,86,-7,-127,37,8,-71,-101,-11,-127,-24,27,12,-16,-74,-35,-23,-11,-30,-57,-12,-10,18,-23,10,107,-85,70,31,14,36,-5,16,-78,3,7,-79,-16,5,-55,15, 
  /* [0][1][][] */ -86,-127,-44,-43,-10,55,99,-105,-26,-109,-20,112,89,-64,27,-96,-121,-94,89,-76,41,-88,-103,-127,41,-120,-78,-38,127,-60,127,85,-43,-85,-15,85,-35,-76,-107,90,41,59,104,-108,-90,-117,82,120, 127,-83,-127,-127,127,41,93,-127,101,-127,-111,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-119,-119,127,-100,-127,-127,-120,-127,-70,127,28,-111,127,127,-68,-127,-96,90,60,127,127,-117,-111,-127,126,127, -53,31,-61,-85,-119,-23,31,-38,127,-19,-76,35,55,-70,-25,-43,-37,-29,54,-71,57,-81,-38,-23,47,-5,-45,-61,15,-89,-35,21,29,-97,117,23,-36,-62,2,-15,37,53,10,-75,-57,-37,66,36, 
  /* [0][2][][] */ -61,-107,-33,-35,0,35,-4,-34,-38,-59,-15,60,76,-127,-127,-63,-43,-19,64,75,52,-33,-13,-60,33,-55,-11,-58,76,28,77,63,108,-27,-39,-9,-95,35,-18,31,9,37,15,-55,96,-77,4,31, 87,-74,-88,-86,81,19,7,-47,48,-70,-32,56,83,-26,16,93,-24,-31,78,116,82,-52,-18,-58,94,-67,-19,-98,-51,39,-44,111,-18,-49,67,6,-127,50,-14,-1,10,32,15,-66,127,-100,-12,40, -29,30,-41,-37,-79,-19,22,-11,59,-4,-13,32,30,-43,111,-28,-93,-4,30,60,74,-27,-1,-2,43,2,-4,-63,-13,29,-19,40,-90,-42,65,3,-20,21,27,-38,7,35,-6,-15,63,-34,-4,18, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.003697915468364954, 0.0028848645742982626, 0.0060212691314518452, 0.0067282984964549541, 0.0094841485843062401, 0.0073016430251300335, 0.0058711054734885693, 0.0027937034610658884, 0.0047418014146387577, 0.0014562129508703947, 0.0038604612927883863, 0.0011105185840278864, 0.0062714791856706142, 0.23551659286022186, 0.0022886928636580706, 0.011553553864359856, 0.1168077290058136, 0.00076629518298432231, 0.004561916459351778, 0.0076589812524616718, 0.0048081958666443825, 0.0059626703150570393, 0.0047571132890880108, 0.0018172337440773845, 0.0029134971555322409, 0.0039637838490307331, 0.0013952451990917325, 0.0021741189993917942, 0.0098294448107481003, 0.0029352486599236727, 0.0023190942592918873, 0.0063128666952252388, 0.0087291263043880463, 0.00032359815668314695, 0.0050089089199900627, 0.0089180143550038338, 0.00073129945667460561, 0.016146738082170486, 0.0013773174723610282, 0.0039086686447262764, 0.0026773940771818161, 0.010145457461476326, 0.0050682751461863518, 0.0002868813753593713, 0.0037769651971757412, 0.0055431374348700047, 0.0093314843252301216, 0.0051001822575926781, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 66584, 58885, 61453, 40896, -582, 12766, 2367, 25783, 18922, 24047, 25930, 9847, -43512, -127, 48055, 361, -204, 42359, 1364, 3667, -15471, 12728, 51515, 23338, -9293, 32147, 35636, 19089, -1788, 13746, -11258, -49307, 12009, 96744, 22741, 1267, 58340, 344, 145121, -27114, 17854, -27003, 2882, 136128, 1063, 45103, 1152, -22935, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 8.7009779235813767e-05, 6.7879169364459813e-05, 0.00014167692279443145, 0.00015831290511414409, 0.00022315644309855998, 0.0001718033745419234, 0.00013814365956932306, 6.573420250788331e-05, 0.00011157179687870666, 3.4263834095327184e-05, 9.0834386355709285e-05, 2.6129850084544159e-05, 0.00014756422024220228, 0.005541567225009203, 5.3851599659537897e-05, 0.00027184834470972419, 0.0027484172023832798, 1.8030475985142402e-05, 0.00010733921226346865, 0.00018021132564172149, 0.0001131340250140056, 0.00014029812882654369, 0.00011193208047188818, 4.2758441850310192e-05, 6.8552872107829899e-05, 9.3265502073336393e-05, 3.2829299016157165e-05, 5.115574094816111e-05, 0.00023128105385694653, 6.9064677518326789e-05, 5.4566924518439919e-05, 0.00014853804896119982, 0.00020539121760521084, 7.6140745477459859e-06, 0.00011785668175434694, 0.00020983563445042819, 1.7207046766998246e-05, 0.000379923265427351, 3.2407471735496074e-05, 9.1968679043930024e-05, 6.2997511122375727e-05, 0.00023871664598118514, 0.0001192535346490331, 6.7501500780053902e-06, 8.8869768660515547e-05, 0.00013042676437180489, 0.0002195643464801833, 0.00012000428978353739, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -11,1,8,-95,7,29,5,8,3,5,3,-4,100,0,1,5,0,-9,-6,-1,80,-4,2,3,32,38,14,11,3,3,5,-127,11,7,-3,-1,-30,0,-15,33,8,-25,-11,2,0,0,3,0, 
  /* [1][0][][] */ -35,-5,-4,-8,44,29,-30,76,22,5,-29,-23,13,0,18,34,0,38,18,-48,2,19,127,22,-26,-1,56,2,19,-3,16,-10,15,-6,-9,-21,5,-52,9,1,-8,-6,-80,-7,-32,9,-48,-95, 
  /* [2][0][][] */ -60,12,-4,10,44,-10,26,27,-8,55,11,-4,4,0,9,54,0,14,-127,23,0,15,9,-18,-29,3,41,7,11,27,27,2,4,-9,-11,-14,8,8,7,3,38,-5,-28,0,26,-60,26,15, 
  /* [3][0][][] */ 1,1,1,8,-3,27,2,-4,63,15,-4,-3,25,0,-28,-7,0,-1,-7,1,-3,-2,4,-18,-13,-8,-11,-4,-10,-2,0,-7,-50,42,-53,-1,6,0,1,-127,-1,3,1,-48,-3,-3,0,7, 
  /* [4][0][][] */ -1,-3,80,36,1,-21,-2,-1,2,-1,-1,-10,-81,0,-11,3,0,11,4,1,63,6,1,-3,-17,29,-3,48,-5,-2,-2,95,4,7,-2,-4,17,-13,-9,-16,-5,-127,3,4,-2,-2,-2,0, 
  /* [5][0][][] */ -6,42,4,-7,3,44,26,11,-21,28,7,54,25,0,-127,0,0,12,-36,20,-11,8,-14,38,-21,-3,26,-5,-11,23,24,-17,50,27,-38,-4,3,18,-47,17,24,-13,-10,28,21,59,22,23, 
  /* [6][0][][] */ -24,-55,2,9,39,-49,-18,8,26,-27,-14,86,-5,0,-127,40,0,-8,50,-18,-6,4,24,-33,29,-2,-5,-9,45,-12,-14,-4,93,-32,29,1,-2,-9,-72,-21,-13,-14,-3,-26,-21,-82,-18,-25, 
  /* [7][0][][] */ -115,-25,-10,10,127,21,63,29,14,5,27,-33,-30,0,87,106,0,15,0,63,-15,1,-28,44,15,3,46,8,50,61,56,-10,-13,-17,-20,-24,6,25,28,36,76,0,-30,-10,58,0,66,78, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.058873012661933899, 0.029820995405316353, 0.05642319843173027, 0.063989415764808655, 0.053340550512075424, 0.061470810323953629, 0.036695279181003571, 0.033996365964412689, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { -6227, -26661, 23860, 23201, 3466, 1479, 38589, 10755, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.0013852473348379135, 0.0007016704767011106, 0.0013276046374812722, 0.0015056333504617214, 0.0012550718383863568, 0.0014463720144703984, 0.00086341833230108023, 0.00079991453094407916, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 88,36,-7,-12,127,25,-45,-28, 
  /* [1][0][][] */ -6,-5,4,127,13,-7,9,18, 
  /* [2][0][][] */ 29,-127,-15,35,-5,-65,77,17, 
  /* [3][0][][] */ 127,-37,-8,16,-13,-40,28,11, 
  /* [4][0][][] */ 13,-43,127,-10,-11,-49,11,-98, 
  /* [5][0][][] */ 76,-1,1,-1,127,21,-16,-6, 
  /* [6][0][][] */ -21,95,-9,127,27,40,-79,-44, 
  /* [7][0][][] */ -3,127,-6,5,-3,-10,12,-5, 
  /* [8][0][][] */ 127,52,-2,4,-51,-23,2,-39, 
  /* [9][0][][] */ -127,13,3,16,54,12,-5,5, 
  /* [10][0][][] */ -71,2,20,127,46,24,-21,-4, 
  /* [11][0][][] */ -127,1,9,-70,33,3,-22,-41, 
  /* [12][0][][] */ 127,30,-2,22,-51,-14,9,-46, 
  /* [13][0][][] */ -20,73,-127,-12,2,95,-67,74, 
  /* [14][0][][] */ -52,-33,-16,127,23,3,0,-18, 
  /* [15][0][][] */ -2,127,0,-3,0,-14,12,-52, 
  /* [16][0][][] */ -6,-127,-20,1,-5,-112,115,-29, 
  /* [17][0][][] */ 16,127,-3,-11,5,78,-88,-23, 
  /* [18][0][][] */ -2,44,-127,-1,10,59,-28,68, 
  /* [19][0][][] */ -74,12,9,3,-127,6,19,31, 
  /* [20][0][][] */ -127,-31,5,6,89,-25,41,0, 
  /* [21][0][][] */ -64,-5,-6,3,-127,-8,22,9, 
  /* [22][0][][] */ -127,-24,1,4,92,-16,41,48, 
  /* [23][0][][] */ -18,-24,-6,-7,-2,83,-127,-92, 
  /* [24][0][][] */ -10,38,-127,2,7,44,-17,77, 
  /* [25][0][][] */ 90,-42,-7,127,-82,-11,13,-49, 
  /* [26][0][][] */ 1,-22,-5,-1,-10,117,127,-26, 
  /* [27][0][][] */ 69,-11,-1,14,127,30,38,-15, 
  /* [28][0][][] */ 0,127,-67,5,8,77,-30,117, 
  /* [29][0][][] */ -6,13,-8,-10,-3,89,-127,-89, 
  /* [30][0][][] */ 5,-6,2,-127,-4,0,-1,-12, 
  /* [31][0][][] */ -66,2,3,4,-127,9,11,1, 
  /* [32][0][][] */ -15,32,10,-127,-10,30,-85,-101, 
  /* [33][0][][] */ -62,-12,-3,1,-127,39,45,3, 
  /* [34][0][][] */ -127,77,1,29,31,-21,2,2, 
  /* [35][0][][] */ -17,127,-5,2,9,-85,68,-35, 
  /* [36][0][][] */ -2,49,10,-26,-2,105,-127,-34, 
  /* [37][0][][] */ 36,-56,-6,22,18,-127,116,-18, 
  /* [38][0][][] */ 16,-127,-2,8,9,50,-41,70, 
  /* [39][0][][] */ 6,-127,-11,-5,-5,-12,-47,-90, 
  /* [40][0][][] */ 116,42,5,-10,-46,73,-127,-93, 
  /* [41][0][][] */ 9,-123,22,0,-1,80,-53,127, 
  /* [42][0][][] */ 57,-4,-10,-127,-50,0,-1,-36, 
  /* [43][0][][] */ -78,-20,15,-127,62,5,-12,-10, 
  /* [44][0][][] */ -7,-31,-9,10,-28,96,127,-10, 
  /* [45][0][][] */ -127,-39,-3,2,20,6,28,-13, 
  /* [46][0][][] */ 17,80,127,6,-1,9,12,22, 
  /* [47][0][][] */ -4,3,11,127,14,5,-1,-4, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00015724942204542458, 0.00072475901106372476, 0.00066311715636402369, 0.0011350174900144339, 0.0033647126983851194, 0.001163073698990047, 0.0024461427237838507, 0.0027718977071344852, 0.0012595592997968197, 0.0015205811941996217, 0.0016132867895066738, 0.0012378033716231585, 0.0011234146077185869, 0.0013739201240241528, 0.001318880938924849, 0.0043257102370262146, 0.00085312628652900457, 0.0008609502692706883, 0.0045335274189710617, 0.00024086602206807584, 0.00061120354803279042, 0.00085497333202511072, 0.0010344395413994789, 0.0025120831560343504, 0.00083706964505836368, 0.00060638389550149441, 0.00032060997909866273, 0.00086089305114001036, 0.0020439161453396082, 0.0024773625191301107, 0.0013055272866040468, 0.00097912817727774382, 0.0023034664336591959, 0.00059031799901276827, 0.0012150305556133389, 0.00074786029290407896, 0.0012503019534051418, 0.00090829143300652504, 0.00030248577240854502, 0.0069702640175819397, 0.0015226984396576881, 0.0026619045529514551, 0.00097652937984094024, 0.00098871090449392796, 0.00057767372345551848, 0.0010308718774467707, 0.0022803503088653088, 0.002448483370244503, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 76342, 8733, 6325, 7875, 1868, 12002, -2198, -287, 1188, 2500, 3844, 321, 2381, -974, 876, -2337, 5327, 13678, -325, 31246, 5569, 3198, 10657, -562, 3966, 5381, 35200, 11852, -109, -2925, 114, 2328, -2381, 10271, 2452, 6969, 8158, 4077, 21337, 1805, -1060, 2870, 1411, 4161, 5641, 2927, -1383, 3032, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 5.6671742640901357e-05, 0.00026119878748431802, 0.00023898342624306679, 0.0004090534639544785, 0.0012126221554353833, 0.00041916474583558738, 0.00088157510617747903, 0.0009989752434194088, 0.00045393756590783596, 0.00054800830548629165, 0.00058141880435869098, 0.00044609687756747007, 0.00040487185469828546, 0.000495152547955513, 0.00047531674499623477, 0.0015589598333463073, 0.00030746156699024141, 0.00031028129160404205, 0.0016338559798896313, 8.6806663603056222e-05, 0.00022027407248970121, 0.00030812722980044782, 0.00037280577817000449, 0.00090533960610628128, 0.00030167485238052905, 0.00021853709768038243, 0.00011554590309970081, 0.00031026065698824823, 0.00073661503847688437, 0.00089282653061673045, 0.00047050416469573975, 0.00035287189530208707, 0.00083015538984909654, 0.00021274705068208277, 0.00043788968469016254, 0.00026952434564009309, 0.00045060127740725875, 0.00032734274282120168, 0.00010901405039476231, 0.002512041013687849, 0.00054877134971320629, 0.00095933437114581466, 0.00035193530493415892, 0.00035632544313557446, 0.00020819013298023492, 0.00037152000004425645, 0.00082182447658851743, 0.000882418651599437, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,108,4,81,-1,28,16,8,9,7,-8,-9,-44,9,-2,8,-23,-114,-6,-22,127,-10,-3,6,-6,8,-5,4,16,99,20,28,38,-28,1,35,-1,1,17,-68,-8,-8,16,2,-7,-10, 127,10,16,-127,27,86,11,11,124,127,7,43,-50,-24,5,8,127,-56,-60,-57,-101,25,-109,14,17,70,-32,-84,23,21,9,-124,5,-61,127,9,-40,-47,-6,116,-79,-99,-29,3,-34,-8,-127,23, -32,-3,8,15,-1,64,4,18,28,9,-14,31,-14,-3,16,4,-103,29,-4,78,-31,-12,-18,-6,-4,-59,-3,29,-16,5,4,-22,8,-24,16,-20,-1,47,41,-13,50,38,-15,11,-44,3,-2,-6, 
  /* [0][1][][] */ 125,7,1,-98,14,-27,35,-16,9,9,-12,53,-7,-1,18,-32,0,-50,-59,-86,10,-73,-123,-18,5,98,-15,-127,-8,33,12,-108,17,-53,-2,127,-3,59,-41,40,-62,-127,39,-88,-44,-14,-13,-5, 26,-127,-127,114,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-83,127,127,-107,127,127,111,127,127,-127,-127,29,-127,-127,93,127,-127,127,-30,-42,127,-127,127,127,127,-81,127,127,127,-122,101,106, 53,6,49,-14,6,-61,44,19,-23,15,-104,-8,0,-40,127,5,63,-66,-72,86,14,-45,11,-33,1,6,-38,69,20,40,0,3,32,-45,8,66,-6,64,68,-11,-82,9,-84,-32,26,-16,-11,6, 
  /* [0][2][][] */ -52,-7,26,-17,7,34,-37,23,9,-23,11,32,6,-6,-37,18,4,22,-13,106,6,-32,-16,-13,-3,22,0,51,-10,3,47,-32,-18,-44,-32,-40,-1,31,9,-23,9,-4,42,-37,-36,18,-12,17, 69,126,76,21,16,-20,124,36,18,-3,43,27,-5,-1,-89,25,-58,-56,-37,122,-38,49,11,19,32,-63,-40,29,77,1,127,21,85,-26,8,-36,-25,-17,-12,118,-28,-12,-40,45,21,-32,7,-127, -42,-3,7,-4,5,-5,-61,8,-17,-10,-40,-39,19,-9,-8,12,33,24,-9,-127,23,-10,4,-9,-6,10,-10,-55,-15,8,5,8,-21,86,-37,-23,-5,36,25,-61,4,9,-37,6,-44,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.0089925955981016159, 0.0094587225466966629, 0.0067332959733903408, 0.0098116472363471985, 0.005425402894616127, 0.0030618968885391951, 0.044562175869941711, 0.0057780807837843895, 0.0070339315570890903, 0.0060541238635778427, 0.0040503982454538345, 0.0073328078724443913, 0.012234891764819622, 0.0079986173659563065, 0.0029195020906627178, 0.0092518208548426628, 0.0081361159682273865, 0.0093787843361496925, 0.0033743255771696568, 0.0045788991264998913, 0.0063719102181494236, 0.007045346312224865, 0.0087566757574677467, 0.0079008089378476143, 0.0063189296051859856, 0.0064047034829854965, 0.0224478580057621, 0.0032695264089852571, 0.011226622387766838, 0.30370515584945679, 0.0039804112166166306, 0.0062825004570186138, 0.042281471192836761, 0.0052361013367772102, 0.0073339813388884068, 0.0062938840128481388, 0.016736108809709549, 0.0045344112440943718, 0.0086804842576384544, 0.00095019279979169369, 0.0099469432607293129, 0.0029074924532324076, 0.0066580101847648621, 0.0058550373651087284, 0.0056618875823915005, 0.0036656640004366636, 0.0083463201299309731, 0.0045366506092250347, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -51833, 549, 11895, 103, 6669, -1107, 1130, 25580, 716, 36143, -2449, 25380, -6124, -1130, 35977, 7161, 532, 17275, 28683, 11378, -1175, -798, -280, 11177, -7946, 25057, 44487, 41396, 2534, 107, -1063, 1122, 877, 22755, -6127, 17088, -11454, 26401, -22218, 112903, 13986, 22165, 10115, -1680, 17056, 4445, 1674, -816, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00021159049356356263, 0.00022255818475969136, 0.00015843049914110452, 0.00023086229339241982, 0.00012765654537361115, 7.2044633270706981e-05, 0.0010485218372195959, 0.00013595484779216349, 0.00016550427244510502, 0.00014244997873902321, 9.5303490525111556e-05, 0.00017253666010219604, 0.00028787981136702001, 0.00018820277182385325, 6.8694171204697341e-05, 0.00021768989972770214, 0.00019143802637699991, 0.0002206772769568488, 7.9395897046197206e-05, 0.00010773880785563961, 0.00014992730575613678, 0.00016577285714447498, 0.00020603943266905844, 0.00018590138643048704, 0.0001486807013861835, 0.0001506989065092057, 0.00052818492986261845, 7.6930031355004758e-05, 0.00026415582397021353, 0.0071460036560893059, 9.365673759020865e-05, 0.00014782354992348701, 0.00099485821556299925, 0.00012320239329710603, 0.00017256426508538425, 0.00014809139247518033, 0.00039379080408252776, 0.00010669203038560227, 0.00020424669492058456, 2.2357478883350268e-05, 0.00023404572857543826, 6.8411587562877685e-05, 0.00015665906539652497, 0.00013776558625977486, 0.00013322089216671884, 8.6250918684527278e-05, 0.00019638400408439338, 0.00010674472287064418, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -57,-17,-34,15,4,-31,6,-1,-122,127,-35,121,117,11,75,-23,-10,-30,1,6,-7,-3,-19,-38,27,-101,11,63,-16,11,16,-35,0,-75,111,22,-6,-1,-11,-24,122,3,43,-27,-31,29,-14,-20, 
  /* [1][0][][] */ 1,32,127,4,-4,-26,0,-82,30,-1,19,8,-17,8,-2,-114,11,-50,8,4,-27,29,24,-33,-16,-12,16,1,12,-4,10,-3,-7,12,12,10,-11,-33,66,-53,9,33,-7,21,-13,11,22,-3, 
  /* [2][0][][] */ 2,-49,19,-41,34,28,-6,-28,4,-1,-2,13,-8,58,5,0,-36,127,-24,-32,-15,24,-38,-12,122,0,-3,-4,-26,-10,5,-39,-9,-11,-1,10,-13,-1,-14,7,14,-23,-17,2,0,24,-24,-42, 
  /* [3][0][][] */ 3,-84,-2,9,3,-7,-8,-1,-5,-15,19,22,13,-7,50,0,-7,-19,1,23,-4,21,-21,2,7,50,3,6,-6,4,127,1,12,6,-4,0,-19,-13,-5,10,-9,7,-8,27,-6,4,0,35, 
  /* [4][0][][] */ -99,5,1,-1,-2,-42,-2,7,40,-40,18,-19,-35,-1,-10,-8,3,9,0,27,12,-32,11,6,-9,45,7,111,3,2,-10,-34,-4,-127,-31,12,6,-3,2,2,-53,-4,-10,13,-60,0,9,8, 
  /* [5][0][][] */ -27,28,26,10,-48,8,-4,52,22,8,14,12,-3,-50,7,39,1,-81,17,1,38,-40,8,37,9,2,-82,-40,-37,-34,23,1,-2,-69,1,-70,66,19,-46,16,26,-50,6,9,127,-9,-44,-4, 
  /* [6][0][][] */ -29,-23,-20,-6,40,-26,0,-24,-6,-10,35,-23,-14,38,-4,-58,-2,-2,1,-24,-32,50,-5,-78,2,-6,-53,-69,26,47,-14,4,7,-61,-15,62,-64,-55,11,-54,-12,11,14,43,127,-33,41,17, 
  /* [7][0][][] */ 10,32,-73,24,-23,9,5,54,-9,0,56,-28,10,-32,-4,-4,-16,-127,38,-39,54,35,16,-55,15,-24,19,5,-19,30,-13,4,3,36,-1,-27,-12,-55,-41,-69,-15,-24,41,56,-30,-19,-2,0, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.019020332023501396, 0.028892651200294495, 0.061198316514492035, 0.074788078665733337, 0.036067087203264236, 0.022719336673617363, 0.030265869572758675, 0.045428119599819183, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { -41685, 24471, -13236, -12604, 20026, -7147, 34749, 43129, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.00044753722613677382, 0.00067982712062075734, 0.00143996044062078, 0.0017597195692360401, 0.00084863736992701888, 0.00053457263857126236, 0.00071213813498616219, 0.0010688969632610679, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ -127,1,-2,77,-37,45,23,-30, 
  /* [1][0][][] */ 24,66,43,20,22,-45,106,127, 
  /* [2][0][][] */ -41,-3,1,0,-127,-12,16,5, 
  /* [3][0][][] */ 102,0,-10,-116,-127,22,37,-19, 
  /* [4][0][][] */ -127,49,-18,-12,74,-10,42,16, 
  /* [5][0][][] */ -95,-24,23,-9,-127,6,6,79, 
  /* [6][0][][] */ -15,-127,29,-20,22,4,-3,36, 
  /* [7][0][][] */ -61,-6,5,95,127,-29,-36,4, 
  /* [8][0][][] */ 80,6,0,-127,1,-19,-44,-40, 
  /* [9][0][][] */ -5,-127,-14,-9,-1,90,-50,97, 
  /* [10][0][][] */ -91,-5,0,24,-127,72,59,-18, 
  /* [11][0][][] */ 115,10,44,16,-62,-48,-30,-127, 
  /* [12][0][][] */ -3,11,39,-5,14,-74,127,64, 
  /* [13][0][][] */ 60,-30,-8,-14,120,127,112,-42, 
  /* [14][0][][] */ 127,57,-3,18,-93,-26,-18,-16, 
  /* [15][0][][] */ -16,-127,20,-12,0,3,3,33, 
  /* [16][0][][] */ -60,-21,0,-3,-127,2,16,8, 
  /* [17][0][][] */ -25,109,-113,2,6,-127,111,-94, 
  /* [18][0][][] */ 127,-23,-43,11,-60,29,8,96, 
  /* [19][0][][] */ 127,-43,-15,0,39,-2,33,4, 
  /* [20][0][][] */ 127,24,-18,127,-2,30,4,-57, 
  /* [21][0][][] */ 14,32,-58,2,-22,89,-127,-88, 
  /* [22][0][][] */ -127,15,30,-1,-35,-1,-43,-17, 
  /* [23][0][][] */ -44,-62,-2,24,-127,62,81,-14, 
  /* [24][0][][] */ 127,-11,-12,-1,-93,-3,-1,7, 
  /* [25][0][][] */ 20,-16,-2,-21,127,49,50,-31, 
  /* [26][0][][] */ 2,-95,6,-38,3,-127,84,-45, 
  /* [27][0][][] */ -21,-127,24,-13,-4,-56,34,-6, 
  /* [28][0][][] */ -103,38,-32,13,-29,-32,127,98, 
  /* [29][0][][] */ -9,40,16,5,-2,37,-96,-127, 
  /* [30][0][][] */ 127,-25,4,10,-88,-4,-42,-19, 
  /* [31][0][][] */ -8,-35,57,-18,24,-110,127,74, 
  /* [32][0][][] */ -66,28,4,2,-127,-90,-100,39, 
  /* [33][0][][] */ -24,13,1,22,-127,-56,-46,20, 
  /* [34][0][][] */ 10,-127,56,-8,-5,91,-80,62, 
  /* [35][0][][] */ -25,-51,-127,-9,0,-65,43,-53, 
  /* [36][0][][] */ 1,127,62,9,-7,11,-21,-35, 
  /* [37][0][][] */ -127,28,35,-19,60,-28,-12,-111, 
  /* [38][0][][] */ -127,-18,-50,-14,47,23,37,118, 
  /* [39][0][][] */ -4,-35,76,-2,22,-87,127,97, 
  /* [40][0][][] */ -28,-14,-7,-37,-127,111,107,-33, 
  /* [41][0][][] */ -127,46,8,-77,-100,-98,-98,55, 
  /* [42][0][][] */ -41,-125,-97,-4,-7,70,-127,-90, 
  /* [43][0][][] */ -70,3,-18,-127,98,61,65,2, 
  /* [44][0][][] */ 127,-8,20,-93,28,-27,-17,37, 
  /* [45][0][][] */ -15,-127,-4,-13,-8,-72,76,3, 
  /* [46][0][][] */ 113,-2,-1,-26,127,-34,-35,0, 
  /* [47][0][][] */ 127,1,-6,115,-14,20,20,-40, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.00063851673621684313, 0.001353447325527668, 0.0004503205418586731, 0.00050861394265666604, 0.00052388227777555585, 0.00040446603088639677, 0.00073930638609454036, 0.00042861391557380557, 0.00059883244102820754, 0.0013424898497760296, 0.0016339715803042054, 0.00049063051119446754, 0.00065552344312891364, 0.001301670097745955, 0.00022525168606080115, 0.00071417965227738023, 0.00045107665937393904, 0.00083213968900963664, 0.00055589783005416393, 0.00067838269751518965, 0.00068467197706922889, 0.00038042373489588499, 0.00084455235628411174, 0.00028667139122262597, 0.00054414226906374097, 0.00053036789176985621, 0.0037943182978779078, 0.00067507149651646614, 0.00033098945277743042, 0.00072348956018686295, 0.00056822743499651551, 0.00033631018595770001, 0.0013695860980078578, 0.0004526002740021795, 0.001596414134837687, 0.0011042695259675384, 0.0013107050908729434, 0.00073465681634843349, 0.00036217740853317082, 0.00055602274369448423, 0.00032005927641876042, 0.00047941997763700783, 0.00050956208724528551, 0.00059328798670321703, 0.0032431320287287235, 0.00067520223092287779, 0.00051261094631627202, 0.0024482409935444593, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 673, 991, 2365, 608, 7768, 18741, 2774, -7, -874, -603, 1138, 1079, 3601, 1073, 29931, 3266, 2053, -865, -157, 2567, -1635, 12560, 8135, 10070, 5525, 256, 3431, 5231, 9814, -615, 8526, 6794, 547, -187, 4340, 3082, -1971, 271, -933, 6293, 1113, -496, -1099, -16, 1118, 3786, 912, 880, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00034188103745691478, 0.00072467629797756672, 0.00024111513630487025, 0.00027232716092839837, 0.00028050228138454258, 0.00021656324679497629, 0.00039584681508131325, 0.0002294927544426173, 0.00032063285470940173, 0.0007188093732111156, 0.0008748774416744709, 0.00026269830414094031, 0.0003509869275148958, 0.00069695321144536138, 0.00012060651351930574, 0.00038239322020672262, 0.00024151998513843864, 0.00044555257773026824, 0.00029764437931589782, 0.00036322645610198379, 0.00036659391480498016, 0.00020369028788991272, 0.00045219867024570704, 0.00015349246677942574, 0.00029135009390302002, 0.00028397489222697914, 0.0020315919537097216, 0.00036145353806205094, 0.00017722169286571443, 0.0003873780369758606, 0.00030424603028222919, 0.00018007056496571749, 0.00073331751627847552, 0.00024233576550614089, 0.00085476803360506892, 0.0005912590422667563, 0.00070179085014387965, 0.00039335730252787471, 0.00019392065587453544, 0.0002977112599182874, 0.00017136934911832213, 0.00025669584283605218, 0.00027283484814688563, 0.00031766420579515398, 0.001736470265313983, 0.00036152353277429938, 0.00027446728199720383, 0.0013108616694808006, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ 69,-93,97,70,54,-34,106,-64,59,-88,-80,48,52,-42,-71,-90,100,78,49,78,66,-74,-83,50,-32,-40,-64,-64,-67,62,-63,-114,-13,41,68,64,-66,52,-50,-23,50,-74,57,61,-94,11,75,-33, 81,-97,127,86,-77,-68,-56,-84,95,-101,-63,74,79,-108,-95,92,-38,96,82,127,85,-116,52,71,-52,-77,-69,-79,56,79,-31,-127,-86,79,80,83,-82,82,-82,-17,75,-94,82,89,-74,-127,94,-103, 34,-46,69,37,19,-42,-47,-39,42,-30,6,33,29,-79,-55,-1,-53,37,35,69,34,-55,31,25,-27,-45,-45,-22,31,31,87,-89,-86,43,35,33,-29,38,-37,-11,40,-40,35,42,-7,-9,37,-74, 
  /* [0][1][][] */ 92,-112,-41,94,55,-82,127,-89,86,-114,-72,82,84,-111,-13,-127,127,107,74,-39,84,108,-127,73,74,-76,-93,-99,-127,87,-70,-9,-88,71,105,95,-86,79,-80,89,84,-101,87,90,-88,108,94,-92, 127,-127,-66,127,-127,-127,-90,-127,127,-127,-127,127,127,-127,-22,97,-65,127,127,-51,127,127,69,127,127,-127,-127,-127,54,127,-29,15,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-78,-34,66,38,-63,-48,-62,56,-41,-61,57,48,-53,-16,11,-62,50,58,-30,57,64,50,63,66,-64,-62,-43,37,54,127,14,-63,69,48,48,-48,60,-59,56,60,-57,54,62,-62,-67,58,-57, 
  /* [0][2][][] */ 45,-50,-47,50,27,-53,64,-42,41,-73,-4,40,55,-72,83,-79,73,50,34,-31,26,-11,-77,30,-24,-43,-50,-49,-74,31,-42,89,-74,36,47,42,-27,37,-42,-88,48,-49,40,44,-22,16,40,-75, 72,-75,-48,80,-56,-64,-71,-67,50,-77,-67,60,74,-48,127,33,-46,60,61,-44,55,-18,41,66,-49,-66,-78,-61,32,61,-24,116,-55,64,57,57,-49,62,-66,-106,69,-67,60,62,-86,50,63,-52, 40,-41,-28,46,28,-21,-17,-34,14,-25,-52,28,31,6,67,24,-35,22,28,-32,28,-1,38,40,-25,-28,-49,-23,34,34,61,66,0,33,15,21,-22,29,-28,-56,27,-33,26,29,-62,9,31,-4, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0029862297233194113, 0.0018710985314100981, 0.0067820162512362003, 0.0025658914819359779, 0.0074028545059263706, 0.002377235796302557, 0.0045908526517450809, 0.004981710109859705, 0.0042922799475491047, 0.0019795042462646961, 0.0026914863847196102, 0.0048238444142043591, 0.0023362794890999794, 0.0019672482740134001, 0.0051591796800494194, 0.0058296038769185543, 0.0069134281948208809, 0.0030741135124117136, 0.0050742425955832005, 0.007474144920706749, 0.0045822574757039547, 0.0063349800184369087, 0.00329610425978899, 0.0049156695604324341, 0.0055817072279751301, 0.0050893970765173435, 0.0013978315982967615, 0.0039446232840418816, 0.0059786508791148663, 0.0072055342607200146, 0.0038999698590487242, 0.0051407325081527233, 0.0024182826746255159, 0.0068406509235501289, 0.0014383010566234589, 0.0025667266454547644, 0.006542860995978117, 0.0041340482421219349, 0.0042279511690139771, 0.0032510107848793268, 0.0055852672085165977, 0.0041331658139824867, 0.0038918126374483109, 0.0038650063797831535, 0.0013323765015229583, 0.0056858370080590248, 0.0054301368072628975, 0.0013029960682615638, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 5936, 32456, -1299, 35290, 4781, 128656, -6885, 49300, 1594, 26831, 23087, -1013, -2676, 28166, 1519, -1205, -1060, -11, 2102, -4172, 434, -5133, 2389, -15640, -3026, 37465, 121032, 84457, 2606, -1081, 1803, 3578, 23507, -412, 20335, -1294, 37377, 1438, 56526, 1608, -539, 59709, -116, 3694, 55726, -289, 320, 46046, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 7.026422827038914e-05, 4.4025848183082417e-05, 0.00015957685536704957, 6.037391722202301e-05, 0.00017418481002096087, 5.5934960982995108e-05, 0.00010802006727317348, 0.00011721671035047621, 0.00010099482460645959, 4.6576569729950279e-05, 6.3329091062769294e-05, 0.00011350222484907135, 5.4971282224869356e-05, 4.6288194425869733e-05, 0.00012139246246078983, 0.00013716715329792351, 0.00016266890452243388, 7.2332084528170526e-05, 0.00011939394607907161, 0.00017586223839316517, 0.00010781782475532964, 0.00014905835269019008, 7.7555392635986209e-05, 0.00011566281318664551, 0.00013133429456502199, 0.0001197505189338699, 3.2890155125642195e-05, 9.2814669187646359e-05, 0.00014067413576412946, 0.00016954199236351997, 9.176399908028543e-05, 0.00012095841520931572, 5.6900771596701816e-05, 0.00016095649334602058, 3.3842377888504416e-05, 6.039356958353892e-05, 0.0001539496734039858, 9.7271724371239543e-05, 9.948120714398101e-05, 7.6494376116897911e-05, 0.00013141805538907647, 9.7250958788208663e-05, 9.1572066594380885e-05, 9.0941328380722553e-05, 3.1350034987553954e-05, 0.00013378440053202212, 0.00012776792573276907, 3.0658731702715158e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ -12,-6,-20,12,25,-5,5,99,-47,12,38,-9,20,-19,-12,17,17,-9,-4,-2,66,-10,23,127,-19,81,-7,-17,28,-18,27,-22,-20,54,22,-44,18,49,14,-9,-102,-28,24,46,33,29,-119,-52, 
  /* [1][0][][] */ -41,-10,23,11,-34,14,-2,60,-59,-32,8,-47,-25,-15,-3,-6,-27,118,-14,17,5,10,-31,-20,27,-40,21,28,-30,-88,-41,18,-18,-8,32,-6,-2,-42,5,14,-22,-28,127,9,13,-4,20,-9, 
  /* [2][0][][] */ -23,-5,-11,-37,-1,-62,4,-19,-1,15,18,27,13,14,-13,6,-5,-18,-26,-13,-5,0,-2,-127,-13,71,-12,6,-1,-17,-4,-8,-4,51,9,-4,20,10,28,-1,-41,5,-16,-7,0,-12,17,10, 
  /* [3][0][][] */ -8,31,2,-32,-1,1,1,-2,-21,-1,-1,38,-127,8,-8,-3,0,4,-19,-3,-32,7,6,16,-8,-10,4,26,-9,18,3,16,4,1,15,18,-9,26,43,4,11,6,22,-31,10,-6,3,20, 
  /* [4][0][][] */ 33,-33,7,9,19,28,23,-21,-30,4,-9,-18,2,12,3,15,20,-10,-76,4,-4,12,13,70,3,-24,3,47,10,-73,19,7,15,-34,33,-127,11,33,0,20,-21,18,5,-25,-10,-18,8,5, 
  /* [5][0][][] */ 34,-2,-19,56,-2,-10,7,22,-1,-4,38,4,7,52,4,3,-25,25,30,2,13,1,4,-23,-3,-53,1,-25,-4,-14,1,7,65,-127,0,36,-13,-8,11,7,-89,52,22,-1,-2,-4,-103,-6, 
  /* [6][0][][] */ 23,-4,5,7,-11,-3,2,-11,-5,7,-2,6,-19,9,2,3,0,-13,127,8,4,9,15,-36,5,5,25,-10,-9,-5,-6,6,0,-13,28,-39,0,-46,74,11,0,-5,-10,4,-11,1,5,-12, 
  /* [7][0][][] */ -41,-16,-13,36,-6,74,-2,42,1,28,-9,127,78,-5,-5,-1,-3,-21,-5,-20,-26,-9,-19,69,2,-33,-53,-32,-11,-16,-11,-8,1,2,-23,6,7,-60,92,-6,25,25,-64,-57,13,-6,4,0, 
  /* [8][0][][] */ -50,-49,2,2,-7,5,-3,35,-4,-66,3,44,49,8,5,4,-14,59,-32,3,-51,23,-6,-12,6,4,1,45,-5,116,-14,18,-6,5,-19,-127,-111,65,35,25,19,-3,106,-26,11,27,18,33, 
  /* [9][0][][] */ -26,2,-3,33,20,-30,-6,0,60,-37,6,59,-51,8,14,2,-7,21,-34,-23,51,6,-10,-15,0,10,45,-22,14,13,10,-4,-6,20,70,-100,-11,-127,-92,10,-26,25,52,7,2,7,-12,-43, 
  /* [10][0][][] */ -19,-9,-34,-127,45,87,11,-15,0,33,21,10,52,-46,-29,25,35,-40,57,-34,31,-27,42,54,-48,-114,6,-36,48,35,47,-44,-32,-81,26,-3,15,-40,4,-31,-33,-67,-9,14,17,14,19,-33, 
  /* [11][0][][] */ 5,49,-5,66,33,-63,-79,-21,3,55,-19,6,-7,53,1,-76,23,46,10,-7,-49,-102,15,5,11,-41,12,-24,55,-36,20,-84,48,-16,-39,-85,89,25,4,-127,2,61,101,-70,-8,-57,37,29, 
  /* [12][0][][] */ 127,-4,-14,15,6,19,4,100,22,-14,-57,-23,-1,12,-13,-3,-8,5,-2,-4,6,3,0,19,-1,15,-2,5,-1,15,-3,4,3,-63,-6,10,-18,-19,-30,1,-14,-80,6,-125,-55,-7,81,-6, 
  /* [13][0][][] */ 9,2,1,7,8,-8,2,0,2,5,4,24,-4,3,4,1,6,2,12,4,14,-11,8,-4,2,0,18,127,12,-2,6,-2,4,1,-39,21,8,-7,5,-13,-12,-3,2,6,-1,-3,-7,-12, 
  /* [14][0][][] */ 68,-27,45,-67,55,24,45,-102,-54,-61,-9,123,-67,-8,62,17,59,29,-50,70,24,10,73,-13,22,60,-37,-122,32,-39,65,52,-10,76,-127,-47,-43,41,86,13,-32,4,51,4,-3,7,14,-33, 
  /* [15][0][][] */ -3,-48,-74,-34,54,27,79,-54,-6,17,-11,-34,85,17,-97,67,57,54,82,-78,-97,-22,58,-16,-92,40,29,52,60,52,48,-43,28,60,99,127,-20,-105,-13,-29,94,57,119,-47,-8,-30,-12,66, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.032621040940284729, 0.031472098082304001, 0.046725992113351822, 0.040728949010372162, 0.037035666406154633, 0.041194621473550797, 0.049227222800254822, 0.022714342921972275, 0.026568133383989334, 0.03785628080368042, 0.034502305090427399, 0.022728661075234413, 0.042143471539020538, 0.05550646036863327, 0.022832095623016357, 0.023646175861358643, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -36144, 2183, 2250, -8943, 452, -3579, -12036, -40531, 1663, 22462, 34669, -9186, -2668, -22238, 41748, -41914, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00076755392365157604, 0.00074051995761692524, 0.0010994351468980312, 0.00095832825172692537, 0.00087142747361212969, 0.00096928520360961556, 0.001158287632279098, 0.00053445511730387807, 0.00062513258308172226, 0.00089073606068268418, 0.00081181898713111877, 0.00053479202324524522, 0.00099161115940660238, 0.0013060343917459249, 0.00053722580196335912, 0.00055638060439378023, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 36,-22,121,114,66,-23,26,-36,127,-7,-50,-81,33,79,-34,-86, 
  /* [1][0][][] */ 46,71,-27,-7,95,-17,-1,21,52,90,-27,124,6,-46,127,-110, 
  /* [2][0][][] */ 31,-64,-9,-10,-63,25,-36,79,-82,-72,12,62,-1,-127,84,-86, 
  /* [3][0][][] */ 113,127,-10,36,-126,-15,-72,-34,-1,-1,109,-65,-59,86,-47,-30, 
  /* [4][0][][] */ -3,2,15,2,-23,31,-12,35,-58,-38,1,-10,-5,-127,28,8, 
  /* [5][0][][] */ 117,-49,-23,5,-15,-114,-33,20,-5,10,-127,-2,23,-6,-1,29, 
  /* [6][0][][] */ -127,-68,-11,101,-60,6,-38,38,-113,-75,-80,-24,28,63,-14,101, 
  /* [7][0][][] */ -19,10,-76,45,35,-127,-22,46,15,-25,11,-5,4,21,-45,13, 
  /* [8][0][][] */ 28,-44,-14,-11,8,31,-55,-65,-11,16,-63,8,-127,-3,2,24, 
  /* [9][0][][] */ 31,-49,66,123,5,23,3,-66,127,-82,-1,-20,3,57,-75,10, 
  /* [10][0][][] */ -116,-91,-15,-59,107,39,42,74,109,-71,-100,26,113,-118,-127,93, 
  /* [11][0][][] */ 37,-13,-127,14,51,27,-19,41,-10,-38,-8,-8,-1,21,-38,5, 
  /* [12][0][][] */ 109,-54,0,-5,-14,-72,-64,-38,34,-7,-127,-31,-57,-26,9,73, 
  /* [13][0][][] */ 26,-78,30,-50,94,5,-101,-127,53,-53,20,1,10,-20,22,-7, 
  /* [14][0][][] */ -65,36,-90,-41,91,-123,63,-56,71,53,-7,-92,22,127,-17,20, 
  /* [15][0][][] */ 29,-8,63,43,51,-41,-35,-11,21,-60,-66,-4,-127,-50,-17,50, 
  /* [16][0][][] */ -127,58,4,5,0,87,52,80,-12,32,124,7,1,17,2,-41, 
  /* [17][0][][] */ -13,-7,-49,-38,-39,7,39,74,-28,127,-17,5,-4,77,69,3, 
  /* [18][0][][] */ -5,110,-63,-9,-8,-6,64,-74,23,127,-37,97,19,-58,45,-88, 
  /* [19][0][][] */ 10,-17,42,15,5,50,-5,21,9,1,-50,-2,-127,5,-18,30, 
  /* [20][0][][] */ 99,-60,2,-85,-19,30,38,-78,-60,33,-127,-43,23,12,47,3, 
  /* [21][0][][] */ 50,-7,127,54,-22,54,21,-2,4,24,-15,-12,-17,84,5,-14, 
  /* [22][0][][] */ 26,10,18,3,-14,-3,28,127,9,-2,17,32,5,35,25,20, 
  /* [23][0][][] */ -19,13,-80,8,14,-127,16,35,-6,-19,-14,-10,-54,3,-2,35, 
  /* [24][0][][] */ 45,-73,12,-53,57,4,-20,-3,41,40,63,101,-41,94,127,33, 
  /* [25][0][][] */ -127,-96,-52,3,7,5,17,-32,-54,9,-77,13,24,42,35,60, 
  /* [26][0][][] */ 8,10,52,3,-1,20,-36,64,-78,-75,-10,21,1,-127,44,-19, 
  /* [27][0][][] */ -91,34,-49,23,30,-27,8,28,31,-25,127,19,-19,4,-12,-20, 
  /* [28][0][][] */ -16,-7,20,30,-3,3,13,87,28,10,-28,-7,-127,-10,-15,36, 
  /* [29][0][][] */ -14,63,42,-33,39,-12,24,-24,-127,36,-32,6,0,36,-87,7, 
  /* [30][0][][] */ -3,-14,-127,-37,20,-67,1,16,-25,-9,-7,-28,-36,-28,7,23, 
  /* [31][0][][] */ 121,-30,-127,2,31,2,-58,55,-22,-17,-85,-46,14,-16,-80,39, 
  /* [32][0][][] */ -113,45,32,52,16,101,26,37,20,7,127,9,-38,25,-18,-26, 
  /* [33][0][][] */ 3,-10,127,-21,-54,27,-1,-37,1,-2,-4,23,-12,18,37,18, 
  /* [34][0][][] */ -23,-18,-50,-103,18,9,2,-34,-36,-47,-23,-127,-23,-7,45,6, 
  /* [35][0][][] */ 3,-31,39,48,49,-19,17,-12,-118,36,-14,29,-20,127,-46,-39, 
  /* [36][0][][] */ -123,49,-25,10,-4,63,53,113,4,46,127,0,-5,30,6,-42, 
  /* [37][0][][] */ -32,6,127,-31,-79,-68,30,-32,19,25,-1,2,4,-59,63,15, 
  /* [38][0][][] */ 7,-15,-17,22,28,-52,-50,7,-14,-9,74,-16,127,23,-7,12, 
  /* [39][0][][] */ -35,-18,-9,-41,-61,-99,55,127,-32,-20,-4,-42,1,56,73,63, 
  /* [40][0][][] */ 60,0,-20,-17,-9,81,-11,3,11,-8,21,-5,127,6,-23,-16, 
  /* [41][0][][] */ 1,-13,-28,-127,32,-8,-27,-68,-13,-49,12,-36,-5,-20,-21,25, 
  /* [42][0][][] */ 37,62,-7,92,-127,-14,-103,-8,-82,-63,84,-92,-51,113,-33,22, 
  /* [43][0][][] */ 14,111,-28,127,21,21,45,-72,-43,86,-5,24,6,-43,43,34, 
  /* [44][0][][] */ 0,-25,-127,14,44,68,-39,52,-22,-27,39,-29,15,-28,-45,5, 
  /* [45][0][][] */ 0,11,-11,-127,-23,-3,59,-1,-7,25,-29,14,9,-87,36,-36, 
  /* [46][0][][] */ 8,35,62,-14,18,18,-57,48,28,-47,-24,22,2,127,55,-16, 
  /* [47][0][][] */ 20,-17,18,-43,-35,19,-61,48,-16,-36,18,28,4,-127,39,11, 
  /* [48][0][][] */ 6,-12,11,-127,-4,-16,-5,9,14,-35,11,-13,9,48,-12,54, 
  /* [49][0][][] */ 37,-35,-6,106,90,10,-3,47,-56,13,38,33,-15,37,127,-9, 
  /* [50][0][][] */ -19,-10,80,-28,13,127,-38,-68,43,-40,109,35,89,-3,4,-62, 
  /* [51][0][][] */ 25,54,9,12,22,7,-51,16,44,-2,0,127,8,26,33,-61, 
  /* [52][0][][] */ -19,63,127,0,23,-44,5,-58,-36,1,10,37,-9,84,-123,-12, 
  /* [53][0][][] */ -13,-14,-53,-127,-46,6,17,-41,-14,43,12,1,18,-32,56,5, 
  /* [54][0][][] */ 3,9,-33,-50,18,3,-8,6,61,-19,11,-36,-5,127,25,37, 
  /* [55][0][][] */ -14,-35,-48,-16,3,-51,-13,-127,14,-82,-3,-14,-33,-79,-32,-14, 
  /* [56][0][][] */ 42,42,34,65,5,-20,11,127,22,-25,9,-34,77,-14,-55,31, 
  /* [57][0][][] */ 80,-36,127,-25,-63,-50,4,-29,15,15,-95,20,55,-37,53,21, 
  /* [58][0][][] */ 108,98,28,127,-121,-10,-14,52,-18,19,85,-16,-70,-47,-32,-79, 
  /* [59][0][][] */ 127,-36,-11,-5,-28,-22,-1,3,-31,19,-114,-19,20,-8,5,31, 
  /* [60][0][][] */ -127,40,-9,-9,19,14,14,25,2,0,110,-7,-45,-7,25,-16, 
  /* [61][0][][] */ -88,59,33,30,39,11,-69,-48,127,-93,71,7,43,-30,-102,-64, 
  /* [62][0][][] */ -19,-46,-127,67,73,121,-8,109,21,-67,52,-11,-85,-10,-105,-18, 
  /* [63][0][][] */ -39,9,127,-38,-57,-62,38,-32,5,15,-2,11,-7,-49,76,14, 
  /* [64][0][][] */ 19,57,-15,30,55,-2,93,-127,-14,122,7,-30,-16,-104,3,50, 
  /* [65][0][][] */ 1,21,8,-23,63,11,-5,-127,-27,-61,-33,-42,-8,-34,38,23, 
  /* [66][0][][] */ -127,2,-23,4,-48,18,18,-45,-83,-32,-75,46,61,19,54,86, 
  /* [67][0][][] */ 3,-51,10,127,3,-15,-18,47,56,35,11,-11,2,-29,-103,-13, 
  /* [68][0][][] */ 8,9,-4,127,-45,-17,-7,-32,-40,22,8,-17,-26,-60,-32,-44, 
  /* [69][0][][] */ 96,86,27,127,59,-10,63,-120,24,104,10,68,-4,-29,25,-22, 
  /* [70][0][][] */ 4,-25,15,-79,127,-28,51,22,91,-36,52,-44,-1,113,60,106, 
  /* [71][0][][] */ 7,48,5,83,46,-127,-45,92,37,-98,24,12,9,-63,-56,37, 
  /* [72][0][][] */ -127,-74,-12,55,23,37,-28,20,-41,-27,-90,40,49,22,-1,91, 
  /* [73][0][][] */ -14,-27,-13,64,15,-23,-4,-18,75,16,2,2,24,127,-55,-45, 
  /* [74][0][][] */ 71,-58,20,-32,-37,-19,37,-18,-40,2,-113,24,-127,-14,32,50, 
  /* [75][0][][] */ -10,-21,-17,127,-28,13,1,-16,-65,16,-18,-21,0,-44,-19,-36, 
  /* [76][0][][] */ 4,-6,1,49,37,17,-18,-117,20,-127,0,27,-23,-16,25,-44, 
  /* [77][0][][] */ 127,-37,37,55,-41,-4,-38,-4,46,-2,-38,55,41,12,-53,36, 
  /* [78][0][][] */ -21,1,39,-9,4,-12,-61,36,48,-22,-32,-34,20,127,27,-21, 
  /* [79][0][][] */ 1,14,38,11,34,51,-52,-54,7,-49,74,-22,127,-28,-22,-34, 
  /* [80][0][][] */ -119,-103,-87,127,5,30,48,-15,-95,32,-118,12,70,-94,-20,62, 
  /* [81][0][][] */ 61,8,-70,39,127,94,-39,-38,-5,-112,-23,-79,-33,-7,-92,24, 
  /* [82][0][][] */ 127,122,-1,42,-127,-16,-78,-23,-73,4,115,-66,-60,105,-1,-44, 
  /* [83][0][][] */ 127,45,9,-22,7,-12,-7,23,33,18,83,-34,-46,-29,-20,-75, 
  /* [84][0][][] */ 10,-52,-61,-34,37,17,1,-127,-30,-57,25,9,-18,-9,0,-8, 
  /* [85][0][][] */ -20,0,-34,-50,2,0,72,94,-6,127,-13,-42,26,69,58,-22, 
  /* [86][0][][] */ 101,-19,10,2,5,-27,-3,-22,4,-3,-127,7,12,19,-14,20, 
  /* [87][0][][] */ -24,34,16,-37,-12,71,-23,46,-10,-26,37,4,6,-127,13,3, 
  /* [88][0][][] */ -10,-11,-88,-32,63,-1,-27,-127,11,-20,-6,-21,-42,3,14,-26, 
  /* [89][0][][] */ 30,-18,37,-127,39,10,-55,109,74,-86,34,12,-10,39,30,37, 
  /* [90][0][][] */ 0,14,-34,65,82,3,108,-87,79,127,-46,51,17,8,-19,-22, 
  /* [91][0][][] */ 39,-9,-45,-14,-3,-127,-13,-11,-9,-8,-53,-6,32,-16,8,30, 
  /* [92][0][][] */ 26,-2,127,76,38,19,2,46,-30,36,-74,31,31,104,4,-10, 
  /* [93][0][][] */ 127,-35,-29,-6,-21,-50,18,47,-18,43,-124,3,5,24,-8,38, 
  /* [94][0][][] */ 19,-19,40,73,107,-34,-11,54,10,-14,-2,51,-3,127,-19,-73, 
  /* [95][0][][] */ -110,44,34,33,16,35,26,-1,7,2,127,-10,-21,26,-10,-27, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.00046775085502304137, 0.00099499139469116926, 0.00053330889204517007, 0.0039382823742926121, 0.00092787586618214846, 0.00052220531506463885, 0.00086555950110778213, 0.0025443756021559238, 0.0011491344776004553, 0.00032950102468021214, 0.00082644005306065083, 0.0026410713326185942, 0.0015871487557888031, 0.00051917752716690302, 0.00081609934568405151, 0.00095516565488651395, 0.00096070376457646489, 0.00048548390623182058, 0.0014020357048138976, 0.0015920191071927547, 0.0013359884032979608, 0.00049004593165591359, 0.00096908950945362449, 0.0010072933509945869, 0.00080575328320264816, 0.0018596177687868476, 0.00086409493815153837, 0.00085498508997261524, 0.0018958327127620578, 0.001565251499414444, 0.0006312757614068687, 0.00063753407448530197, 0.00039332732558250427, 0.0029532348271459341, 0.00065444508800283074, 0.0014156567631289363, 0.00045024673454463482, 0.0016283919103443623, 0.0018704825779423118, 0.00052930339006707072, 0.0028333840891718864, 0.00051288644317537546, 0.00063656113343313336, 0.00067294132895767689, 0.0011472341138869524, 0.0010241771815344691, 0.00058983778581023216, 0.00071150687290355563, 0.0010985321132466197, 0.0011264253407716751, 0.0016218632226809859, 0.0023870086297392845, 0.00038703938480466604, 0.00061700085643678904, 0.00097473314963281155, 0.0003363425494171679, 0.001358932233415544, 0.00081382837379351258, 0.0010636156657710671, 0.0012876273831352592, 0.00041504119872115552, 0.00055311608593910933, 0.0013724425807595253, 0.0022395006380975246, 0.00075698585715144873, 0.00069627276388928294, 0.0011261787731200457, 0.0013051937567070127, 0.00045590687659569085, 0.00056759262224659324, 0.00068670260952785611, 0.0015700572403147817, 0.0010216962546110153, 0.0012760793324559927, 0.0011193993268534541, 0.0011942217824980617, 0.00026193112717010081, 0.0010359936859458685, 0.00046672218013554811, 0.0016695669619366527, 0.00068470992846414447, 0.00088628096273168921, 0.00074325891910120845, 0.0017371425637975335, 0.00064806995214894414, 0.00068873778218403459, 0.00087937980424612761, 0.00096390140242874622, 0.00048621182213537395, 0.0014061908004805446, 0.00059194315690547228, 0.0012916297418996692, 0.00033424320281483233, 0.00036680386983789504, 0.00087762065231800079, 0.00081597582902759314, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 27711, 1589, 12712, -691, 8513, 8949, 17894, 6910, -2010, 27501, 8669, 1543, 8634, 46252, -580, -3603, 11468, 23936, 1588, -315, -1014, 25266, 7793, 3879, 10992, 5619, 8231, 5238, 110, -34, 11216, 14770, 24909, 1802, 12749, -932, 25005, 8079, 1198, 9101, 848, 18350, 16574, 5575, 4804, 15790, 23776, 10142, 7267, 3948, 394, -1350, 34642, 12964, 11930, 27605, -361, 10660, 3703, 6286, 20531, 12625, 3834, 6141, 6883, 7916, 8700, -1360, 29457, 10270, 14386, -1489, -1849, 5105, 1891, 5403, 44636, 21630, 17613, -3676, 7865, -11647, -2582, 744, 12171, 11502, 9184, 7210, 17355, 5621, 11764, 6511, 31513, 37209, -16590, 20038, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 9.3957387434784323e-05, 0.00019986450206488371, 0.00010712607036111876, 0.0007910850690677762, 0.00018638296751305461, 0.00010489569103810936, 0.0001738654391374439, 0.00051109021296724677, 0.00023082732514012605, 6.6187065385747701e-05, 0.0001660075067775324, 0.00053051352733746171, 0.00031881150789558887, 0.00010428749374113977, 0.00016393035184592009, 0.00019186468853149563, 0.00019297712424304336, 9.7519434348214418e-05, 0.00028162772650830448, 0.00031978980405256152, 0.00026836077449843287, 9.8435812105890363e-05, 0.00019466158119030297, 0.00020233560644555837, 0.0001618521346244961, 0.00037354251253418624, 0.00017357125761918724, 0.0001717413542792201, 0.00038081704406067729, 0.0003144129877910018, 0.00012680473446380347, 0.00012806184531655163, 7.9007892054505646e-05, 0.00059321802109479904, 0.00013145877164788544, 0.00028436380671337247, 9.0441324573475868e-05, 0.00032709602965041995, 0.00037572495057247579, 0.00010632148041622713, 0.00056914350716397166, 0.00010302379814675078, 0.00012786641309503466, 0.00013517412298824638, 0.0002304455847479403, 0.00020572707580868155, 0.00011848106078105047, 0.00014292080595623702, 0.00022066279780119658, 0.00022626572172157466, 0.00032578461105003953, 0.00047947981511242688, 7.7744829468429089e-05, 0.00012393732322379947, 0.00019579521904233843, 6.7561326432041824e-05, 0.00027296951157040894, 0.00016347417840734124, 0.00021364910935517401, 0.00025864646886475384, 8.3369566709734499e-05, 0.00011110475315945223, 0.00027568335644900799, 0.00044984981650486588, 0.00015205619274638593, 0.00013986071280669421, 0.0002262161870021373, 0.00026217504637315869, 9.1578280262183398e-05, 0.00011401266237953678, 0.00013793836114928126, 0.0003153783327434212, 0.0002052287309197709, 0.0002563268062658608, 0.0002248544042231515, 0.00023988402972463518, 5.2614261221606284e-05, 0.00020810066780541092, 9.3750757514499128e-05, 0.00033536690170876682, 0.00013753808161709458, 0.00017802778165787458, 0.0001492988521931693, 0.00034894084092229605, 0.00013017818855587393, 0.00013834716810379177, 0.0001766415371093899, 0.00019361944578122348, 9.7665651992429048e-05, 0.00028246236615814269, 0.00011890396854141727, 0.00025945043307729065, 6.7139626480638981e-05, 7.3680108471307904e-05, 0.00017628817295189947, 0.00016390554083045572, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -18,5,-20,104,-17,23,-62,-54,17,-7,100,-10,3,-7,-4,53,5,16,-35,4,73,3,32,-33,2,17,43,50,21,12,23,48,-6,27,10,-15,5,49,-62,-26,20,9,27,17,-84,-55,25,-5,-11,-20,-8,-6,50,5,-8,2,-3,-36,28,-31,27,-1,127,27,-13,-10,10,-52,67,36,3,-8,78,-33,70,4,17,-127,30,65,1,15,127,-14,38,28,-28,-19,35,-6,-13,81,0,20,-2,12, -49,11,-8,10,52,-8,-10,-127,37,13,-127,-5,-16,-11,4,91,19,-31,-16,-15,75,-95,127,26,-61,-31,-104,-15,27,35,-49,17,121,13,-13,-1,-23,127,-65,-127,8,-18,-30,14,46,-127,127,-44,-77,51,49,7,39,-64,32,56,36,41,-100,84,127,35,4,-20,42,-37,-97,-1,37,-30,-18,45,-49,-49,107,-3,-30,-59,-32,64,-66,62,-15,9,-10,48,53,-41,-27,54,-12,72,-127,-30,23,-127, 0,-5,-23,-73,7,19,38,21,-4,-2,5,62,0,-12,-10,6,-12,17,-18,18,5,25,23,-31,1,-31,10,13,-8,6,46,-79,44,17,8,-23,12,4,-32,-21,7,3,-15,8,22,-31,21,1,6,-9,5,-5,5,5,-5,8,-8,44,8,-2,11,-18,3,-17,-26,-17,30,-50,-106,-6,42,-18,-127,-23,-12,17,11,-11,6,11,-13,23,-36,-3,-40,21,26,36,-24,-17,25,-12,20,7,-2,-46, 
  /* [0][1][][] */ -41,59,-18,38,-84,-16,-10,-44,26,95,-44,-22,-30,-24,-7,63,127,-24,-91,-13,57,-127,-28,15,-36,-48,-127,-5,37,35,-50,27,-127,-76,-57,3,66,-3,-52,46,-20,86,1,-3,34,-52,-12,-32,127,42,-4,20,45,9,-36,-18,32,9,-125,127,-37,-89,21,127,-59,-35,-84,127,-36,127,-18,52,-36,-55,37,8,-35,-70,127,47,127,35,7,-1,127,28,-96,47,-37,-35,-101,40,96,102,29,-59, 127,127,127,127,-45,-127,127,23,127,-127,16,-127,-105,127,127,127,-16,-127,-61,-127,127,23,-67,127,127,127,-55,-127,127,127,-127,127,-10,-127,-124,127,-127,-45,96,108,-127,-127,127,127,127,-119,-106,127,-14,127,-127,-127,-127,127,127,-127,127,-127,-43,41,-107,-28,-69,-67,127,127,-73,127,127,-107,-127,127,-42,127,-127,-127,-127,125,-76,127,-43,127,80,127,-37,-127,-26,-108,-127,-126,-23,-127,-22,-127,-127,118, -24,66,-38,3,127,70,-21,48,5,24,-12,-5,-26,-31,-13,-6,-104,-22,-127,39,29,78,-13,-115,-34,-41,123,74,9,35,72,9,125,-47,127,-4,55,5,-94,13,36,23,-23,0,-24,-53,-12,-43,81,14,-11,39,-5,-4,-76,-14,25,20,127,-89,1,127,0,-36,-110,-27,-74,100,15,-16,114,25,-17,-57,12,47,-28,-6,-43,-4,-46,8,47,24,-89,35,127,-48,32,-23,127,-10,-110,35,34,18, 
  /* [0][2][][] */ -5,-38,-21,-60,-4,14,40,31,-2,9,-20,51,23,-34,-7,7,41,2,12,21,-11,30,-17,-26,1,-24,10,2,-10,-6,49,-75,-38,67,-28,-25,31,-35,-65,17,9,9,-33,20,13,-78,-12,-1,-10,6,17,-7,8,1,-23,6,0,43,-49,34,-5,-12,4,17,-5,-9,21,-53,-56,11,-21,-13,-119,-33,1,18,15,-12,57,16,22,22,-40,16,11,25,-20,9,5,25,23,-6,20,40,-7,-29, -28,-10,-27,24,-44,73,-24,65,5,-6,54,-12,127,-7,-19,-18,-1,-40,-58,23,-23,78,-44,-110,-47,-48,102,69,13,43,53,-2,-123,64,-14,-23,-28,-27,-127,-4,45,-13,-15,37,-26,-46,-17,-48,-61,28,69,24,-11,-81,29,52,18,26,75,-54,20,-58,-8,1,20,-26,-127,-55,-12,-26,-63,22,36,-47,-29,-7,-44,24,-56,1,50,35,19,10,5,62,-93,127,16,127,-30,-19,112,-21,46,85, -9,-32,-25,28,13,65,-43,12,3,-6,1,13,12,-50,-10,-13,-43,-6,19,20,-25,6,-21,4,-3,19,-3,51,-2,-6,33,29,17,43,20,-23,-6,-26,-29,7,11,-11,21,10,-73,-33,-12,4,-2,-16,0,-4,-9,8,-18,-5,-1,-50,14,-29,-21,49,9,-28,-10,-2,36,-55,45,7,54,-22,30,-56,-18,22,12,11,-5,22,-30,32,89,-14,-17,54,39,-9,110,11,2,-19,11,-22,-7,-51, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0073162657208740711, 0.0072761652991175652, 0.0078236367553472519, 0.0019354147370904684, 0.0053528905846178532, 0.0076277907937765121, 0.010925978422164917, 0.0022779484279453754, 0.0062106153927743435, 0.014332643710076809, 0.0058443928137421608, 0.011603730730712414, 0.0035651864018291235, 0.012889375910162926, 0.0059715015813708305, 0.0072145974263548851, 0.0036603556945919991, 0.011039901524782181, 0.0039630783721804619, 0.011142872273921967, 0.0021573426201939583, 0.0055344365537166595, 0.0040340535342693329, 0.014413325116038322, 0.0073626791127026081, 0.007569566834717989, 0.0048106340691447258, 0.0072055156342685223, 0.0065555330365896225, 0.0048546567559242249, 0.0042958566918969154, 0.0068302652798593044, 0.0040534692816436291, 0.005445786751806736, 0.0069969617761671543, 0.0060537960380315781, 0.01452033594250679, 0.0034479424357414246, 0.0024659698829054832, 0.0048372545279562473, 0.00678262859582901, 0.010717648081481457, 0.01341007836163044, 0.0079458197578787804, 0.0057025821879506111, 0.0028501332271844149, 0.0074913813732564449, 0.005917740985751152, 0.0030170944519340992, 0.0091784680262207985, 0.0047217416577041149, 0.0090945493429899216, 0.0073147015646100044, 0.0083816070109605789, 0.0059891287237405777, 0.012522121891379356, 0.013913686387240887, 0.0083338534459471703, 0.0042181420139968395, 0.0033488452900201082, 0.0091770365834236145, 0.0058150738477706909, 0.012263005599379539, 0.0047138100489974022, 0.0068477271124720573, 0.006224864162504673, 0.0040443642064929008, 0.0027576303109526634, 0.012147789821028709, 0.0079535720869898796, 0.0054407650604844093, 0.0056292959488928318, 0.0080779911950230598, 0.0075390529818832874, 0.0056007159873843193, 0.010154268704354763, 0.02594413235783577, 0.0017512738704681396, 0.011303930543363094, 0.013214978389441967, 0.0049505592323839664, 0.013486864045262337, 0.0068059242330491543, 0.005061393603682518, 0.0045657102018594742, 0.0048558786511421204, 0.0045733684673905373, 0.00508522754535079, 0.005631190724670887, 0.0048230504617094994, 0.007001965306699276, 0.0040098167955875397, 0.0044959806837141514, 0.014980646781623363, 1.0717446804046631, 0.0027923979796469212, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 8360, -7759, 1753, 45673, -135, -3117, -13977, 4084, -2541, 2472, 3416, -1356, 1506, -17012, 7236, -4731, 517, 15840, 19675, 2523, 3090, -3016, -2163, -1561, 18151, -4340, 1187, -1741, -5016, -6929, 11459, -9994, 167, 82, -1483, 16712, 2823, -4324, 18337, 1999, -419, 2088, -10869, -7014, -10127, 57891, 1426, 22230, 38920, -11896, 778, 6071, 11035, -857, -9498, 3311, -12778, 2278, 3480, -7596, -137, -369, -10056, 450, 404, 17084, 27360, 27808, -13459, 279, -16541, -1443, 30875, 8373, 383, 1643, 18017, 29997, 2144, -6240, -3475, -7080, 247, -3158, -950, 555, 1315, 320, 2610, -1150, -250, -560, 1038, 1585, 48, 51461, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00017214742547366768, 0.0001712038938421756, 0.00018408556934446096, 4.553917096927762e-05, 0.0001259503624169156, 0.00017947742890100926, 0.00025708184693939984, 5.3598789236275479e-05, 0.00014613212260883301, 0.00033723868546076119, 0.00013751513324677944, 0.00027302897069603205, 8.3886741776950657e-05, 0.00030327943386510015, 0.00014050591562408954, 0.00016975523612927645, 8.6126019596122205e-05, 0.00025976239703595638, 9.324890561401844e-05, 0.00026218523271381855, 5.0761002057697624e-05, 0.000130222033476457, 9.4918905233498663e-05, 0.00033913707011379302, 0.00017323951760772616, 0.00017810745339374989, 0.00011319138866383582, 0.00016954154125414789, 0.00015424784214701504, 0.00011422722309362143, 0.00010107898560818285, 0.00016071212303359061, 9.5375748060178012e-05, 0.0001281361619476229, 0.00016463440260849893, 0.00014244226622395217, 0.00034165495890192688, 8.1128062447533011e-05, 5.8022822486236691e-05, 0.00011381775402696803, 0.00015959126176312566, 0.00025217994698323309, 0.00031553127337247133, 0.00018696047482080758, 0.00013417840818874538, 6.7061962909065187e-05, 0.00017626780027057976, 0.00013924096128903329, 7.0990456151776016e-05, 0.00021596395527012646, 0.00011109980550827459, 0.00021398940589278936, 0.00017211062368005514, 0.00019721429271157831, 0.00014092067431192845, 0.00029463815735653043, 0.0003273808688391, 0.00019609066657721996, 9.9250399216543883e-05, 7.8796358138788491e-05, 0.00021593028213828802, 0.00013682527060154825, 0.00028854131232947111, 0.00011091317719547078, 0.00016112299636006355, 0.00014646739873569459, 9.5161514764185995e-05, 6.4885418396443129e-05, 0.00028583034873008728, 0.00018714288307819515, 0.00012801800039596856, 0.00013245402078609914, 0.00019007037917617708, 0.00017738949100021273, 0.00013178156223148108, 0.00023892396711744368, 0.00061045016627758741, 4.1206443711416796e-05, 0.00026597484247758985, 0.00031094066798686981, 0.00011648375220829621, 0.00031733798095956445, 0.00016013940330594778, 0.00011909161548828706, 0.00010742848098743707, 0.00011425597040215507, 0.00010760867007775232, 0.00011965241719735786, 0.00013249860785435885, 0.00011348354018991813, 0.00016475212760269642, 9.4348630227614194e-05, 0.00010578778164926916, 0.00035248580388724804, 0.02521752193570137, 6.5703483414836228e-05, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ -6,15,-9,15,53,76,-36,-34,50,7,18,12,-6,10,29,64,6,-10,-6,-3,106,-63,13,-13,-28,-33,-42,-102,-10,-2,43,46,124,-1,12,-7,10,-21,-21,12,-29,9,21,-32,7,-36,-10,31,-8,16,5,-5,-31,-9,12,-9,35,29,-24,-30,-56,26,-6,-10,18,14,54,-4,7,-2,-4,-33,-60,-3,-7,8,-2,-96,11,-24,39,-22,-58,-43,33,-9,10,22,-12,1,18,-35,27,24,-15,127, 
  /* [1][0][][] */ 87,-95,41,83,-12,-74,-5,-43,-29,-101,-14,21,4,-53,-42,-47,-87,2,24,19,-44,-111,-35,23,127,-66,-73,13,-21,102,-10,53,11,10,-42,31,-27,-16,60,-36,-7,-76,72,-37,-64,22,60,-11,30,29,4,-75,58,-89,34,-19,26,23,-12,-106,30,-61,16,-56,-3,-90,39,51,49,46,-41,7,-98,38,-20,61,31,105,11,-24,38,6,-85,31,-86,58,4,58,-40,18,24,10,-1,-53,38,7, 
  /* [2][0][][] */ 33,23,17,-25,12,0,-11,36,64,-17,16,65,0,14,44,1,-6,-10,7,-12,-24,-65,0,-50,3,-17,-21,20,-3,14,126,-55,14,-74,-18,61,15,127,-40,-23,2,-16,-1,40,-36,-43,-66,22,28,27,-37,-37,24,-5,2,-24,-21,6,-7,21,0,7,72,94,3,-82,23,-68,-4,-11,-10,12,-16,16,-16,20,20,56,10,22,14,88,23,-9,-9,11,5,9,19,1,-6,-47,-37,8,-4,70, 
  /* [3][0][][] */ -8,-15,-31,40,32,-25,-2,-22,-11,10,-2,1,2,-12,38,-3,43,-34,14,7,-19,-4,-10,-1,-14,7,6,-8,17,-50,55,-14,11,-14,-15,44,-9,-6,-8,4,6,-56,20,-30,-10,8,-1,-3,-127,41,-17,19,-119,-61,-23,-37,24,4,-12,52,-13,17,6,18,-22,-92,-32,23,58,21,0,29,-43,10,-3,-43,-49,-49,23,-32,17,-15,16,68,42,50,31,9,27,-5,-5,10,-26,-4,-13,-22, 
  /* [4][0][][] */ 4,-33,16,-72,-6,-19,-47,11,-26,-49,-30,-10,5,79,13,7,56,-13,11,6,-9,35,59,9,-4,-8,13,13,0,-5,-10,-5,-40,12,-3,13,31,-28,7,-9,9,6,-105,-34,27,-2,-5,-9,1,80,-9,-17,-25,-13,10,-10,-7,-34,31,34,6,4,4,-8,41,-115,29,-26,-41,18,-21,-1,-7,16,-23,35,-17,70,50,7,10,2,127,-34,42,-25,-8,-8,69,6,-3,17,-39,20,-6,-39, 
  /* [5][0][][] */ -11,4,3,-6,-1,1,-5,101,60,-14,-11,-32,-11,27,29,35,-12,-4,1,-44,-41,-14,-8,-53,8,13,26,72,66,3,66,43,-49,13,4,-6,-43,-47,-26,-18,-32,-17,-2,-3,67,14,2,12,16,-1,-20,5,-23,-17,6,-9,-24,-14,-13,27,-43,18,-18,-41,8,17,-24,3,0,18,8,-4,36,7,6,-9,-13,21,16,127,-6,-35,19,24,6,4,13,-34,-8,-23,19,-127,-25,-17,-13,-115, 
  /* [6][0][][] */ -27,-5,-11,-49,-2,-24,-12,11,1,17,-20,-4,30,-64,3,-8,-3,-60,34,13,3,0,-12,17,76,-7,3,-1,17,-5,13,-5,-23,-1,-20,1,22,-1,25,29,-7,-26,-51,-24,-8,-22,27,-127,19,32,22,10,7,0,-7,-45,33,-11,-5,10,13,15,1,8,32,62,25,-20,-26,-9,11,-21,12,4,44,-6,-34,28,0,4,-19,-2,50,-34,0,36,27,-24,22,10,-39,-9,-23,5,-8,15, 
  /* [7][0][][] */ 11,10,37,-26,-5,5,-9,-28,-1,-8,-17,-11,-10,-91,29,5,-8,-33,-9,-5,14,-20,-31,-5,-23,-8,5,-16,6,10,3,0,-16,7,-7,-22,4,-13,-29,26,9,-17,-21,31,-4,11,-11,79,2,22,-12,-22,-21,9,-6,-53,37,-3,-4,-1,-6,3,-8,-11,-18,43,11,-30,-16,-11,0,36,-5,-14,-18,6,47,3,1,-20,1,-32,38,-2,-37,127,1,-3,-37,-19,-6,16,-26,1,-7,0, 
  /* [8][0][][] */ -58,45,-56,4,51,-13,-10,28,15,65,-47,7,13,40,67,-14,0,36,-80,16,10,25,-34,2,-34,-25,27,10,51,-95,3,-3,21,4,19,-3,-21,27,-36,41,4,24,7,-127,-40,-4,39,-31,-57,18,3,64,-108,68,25,5,7,-23,-18,-18,-5,-43,4,20,-36,25,34,-14,-3,8,28,82,-28,37,42,40,-9,-86,-3,-33,-12,-12,25,5,-58,-1,9,-43,8,41,-26,7,36,-21,-20,-7, 
  /* [9][0][][] */ 22,-65,-33,-36,20,26,-17,17,25,-13,2,12,-44,-31,7,13,-3,-2,38,-19,-21,7,-33,-39,35,14,35,-7,-28,-40,-17,4,-14,12,27,40,11,47,-38,22,15,18,-19,-89,13,-17,22,-127,-30,2,-2,27,-11,9,-10,10,-37,19,-16,19,18,7,13,32,22,112,31,44,5,-2,18,-23,-17,0,-36,16,76,-7,18,9,-8,1,17,-47,6,31,-9,2,-44,33,-41,2,13,15,9,-23, 
  /* [10][0][][] */ 24,54,-18,26,71,-105,-14,-29,9,54,34,-2,-10,31,16,-72,11,42,-30,32,-80,-8,-14,-23,-66,-21,-51,48,9,3,0,30,-6,-11,27,-14,81,-15,-18,-1,-10,57,49,-16,-50,-12,-39,17,-15,-24,-46,-1,-8,-7,1,-16,7,35,-26,-23,5,11,-12,17,13,47,52,22,32,3,31,49,-45,-24,-54,-8,7,22,-12,17,24,-1,-64,-33,59,-44,88,-16,-24,6,27,-16,83,41,-14,-127, 
  /* [11][0][][] */ 41,43,-29,23,0,19,56,1,-1,-16,-21,-11,-2,1,34,-2,1,-10,-104,-7,6,12,1,-5,-44,-17,-11,4,0,15,-2,-5,-3,6,9,21,12,17,-9,17,7,32,65,-95,34,-42,-2,-4,-127,7,10,-48,27,18,-7,9,-17,-10,4,5,18,-22,-7,10,-54,55,-22,11,14,2,28,8,-53,-25,14,31,-8,-39,-47,7,14,-2,94,42,10,-5,-16,-12,0,26,-18,0,2,10,-21,9, 
  /* [12][0][][] */ -37,-1,3,2,-30,30,14,-3,127,7,-17,8,-5,-2,-34,-46,28,24,8,83,60,29,-4,-21,3,7,16,-32,-112,10,29,-42,0,-3,-5,-25,13,-4,42,-6,-48,-13,-10,12,-2,24,12,-5,18,11,-40,17,10,2,4,-9,72,-25,10,19,13,-17,13,-6,-4,30,-45,4,-4,8,-20,-39,11,13,-69,7,32,-9,10,-68,-13,3,47,43,-13,-18,-24,-27,6,22,-5,54,-22,-26,13,11, 
  /* [13][0][][] */ 27,-7,-28,31,34,0,7,-3,-5,6,10,-1,12,-7,16,-16,14,-69,-38,14,-7,-19,12,9,8,12,3,-4,-13,-35,-9,14,2,9,10,40,18,1,4,19,2,11,24,39,20,15,-8,-127,23,-6,3,9,-12,-1,15,6,-15,18,20,9,8,17,-6,2,-8,-17,-21,-55,8,17,-9,-35,-13,35,-6,23,-20,-2,19,0,27,-11,-11,15,14,28,11,22,-5,-1,22,-4,2,15,-11,-11, 
  /* [14][0][][] */ -126,-59,31,50,28,-28,-36,9,-13,15,-7,15,60,4,-127,0,79,-17,-10,37,-6,-13,42,28,-116,10,31,-8,-48,-75,-40,5,1,10,22,-71,37,36,-1,22,24,35,-4,-37,23,120,79,66,-113,45,17,38,-47,1,32,-8,2,10,61,65,42,46,17,53,6,-9,-51,44,2,76,-60,-92,-78,-5,-5,51,-12,37,97,2,54,19,32,24,46,18,52,37,22,42,71,-10,-3,34,23,-34, 
  /* [15][0][][] */ 91,-28,35,2,4,86,32,-29,-17,62,15,11,-87,-13,-5,31,8,41,49,-10,18,18,-85,79,20,15,55,0,21,53,-74,-88,17,-49,46,-7,43,-31,-65,-110,-1,29,6,45,6,50,-19,-33,118,-51,-52,34,54,-124,66,-120,-2,-58,13,21,-127,-7,26,21,92,-15,-65,41,-38,73,-32,15,54,24,24,7,33,-66,80,-22,-19,-5,49,83,-18,5,4,-53,-5,-9,68,5,-66,70,24,-19, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.019952120259404182, 0.011073385365307331, 0.011146674863994122, 0.0094903223216533661, 0.011588476598262787, 0.017065219581127167, 0.016176344826817513, 0.015200989320874214, 0.011121954768896103, 0.013292413204908371, 0.018928369507193565, 0.026916231960058212, 0.018603591248393059, 0.019898531958460808, 0.019094809889793396, 0.014334136620163918, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -5192, -2097, -14260, 32566, 24579, 4488, -3569, -4366, 24635, 1385, 24641, 23933, -8556, 11295, 34028, -32186, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 0.00046946166548877954, 0.00026055023772642016, 0.00026227469788864255, 0.00022330170031636953, 0.00027267003315500915, 0.00040153457666747272, 0.00038061989471316338, 0.00035767033114098012, 0.00026169305783696473, 0.00031276268418878317, 0.00044537341454997659, 0.00063332309946417809, 0.00043773156357929111, 0.00046820077113807201, 0.00044928965508006513, 0.00033727381378412247, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ 8,70,-16,69,32,36,4,-6,29,26,-52,106,-3,-115,38,-127, 
  /* [1][0][][] */ 19,54,-15,-35,30,-32,127,-114,-3,80,-7,-24,6,-59,36,9, 
  /* [2][0][][] */ -127,25,-28,-13,9,-1,69,99,-27,66,94,-10,-56,25,23,-61, 
  /* [3][0][][] */ -50,53,43,47,-55,42,74,127,-2,51,-99,-6,43,-77,-92,-48, 
  /* [4][0][][] */ 18,-6,34,61,-19,68,3,43,1,-14,-1,-4,28,-7,-127,-26, 
  /* [5][0][][] */ -6,-29,48,-28,3,-27,-1,20,-62,104,-24,-127,-18,21,-45,-15, 
  /* [6][0][][] */ 14,0,32,-13,40,60,-70,-76,-10,-4,49,-14,127,-25,-10,-29, 
  /* [7][0][][] */ 12,10,127,-7,-18,-31,5,-17,-74,27,-84,-38,5,-5,32,-18, 
  /* [8][0][][] */ 21,33,77,64,-50,101,24,40,32,-10,11,-115,-48,-6,-127,-95, 
  /* [9][0][][] */ 36,-112,62,39,18,-27,2,20,127,-4,70,13,-30,3,-112,-34, 
  /* [10][0][][] */ -36,-105,5,-19,-105,3,-16,63,96,127,50,-26,-14,60,84,-3, 
  /* [11][0][][] */ 33,-16,0,-98,11,-34,-101,-127,-53,33,-4,-32,31,-31,48,-59, 
  /* [12][0][][] */ -8,15,6,-54,-44,-46,-95,-29,-59,-90,-16,6,17,127,103,58, 
  /* [13][0][][] */ -26,-125,-66,38,-15,-76,-2,-14,62,22,-19,-19,29,23,127,25, 
  /* [14][0][][] */ 11,-57,52,21,21,23,18,127,10,42,6,-43,20,37,-55,116, 
  /* [15][0][][] */ 22,-37,3,62,17,-4,95,-2,5,-127,12,-37,1,-23,-8,-39, 
  /* [16][0][][] */ 38,-76,-40,37,14,11,34,-61,127,62,84,11,13,106,60,107, 
  /* [17][0][][] */ -101,-97,45,114,114,46,25,-30,123,-58,11,-45,28,50,-127,54, 
  /* [18][0][][] */ -11,8,-1,17,-99,-6,-13,32,-56,-13,-19,-50,10,-127,62,-12, 
  /* [19][0][][] */ 58,-78,57,-75,104,41,-127,108,95,-97,70,46,-22,58,38,126, 
  /* [20][0][][] */ 34,-24,58,-67,-14,5,-27,42,-20,-47,94,-18,17,8,-31,127, 
  /* [21][0][][] */ -65,-17,2,-27,12,8,-71,-44,-16,64,-2,15,-127,-7,36,-11, 
  /* [22][0][][] */ 25,-22,19,-35,10,-70,12,-20,-127,28,-11,-38,-18,-19,86,-18, 
  /* [23][0][][] */ 9,6,20,-4,5,11,-14,7,-2,-2,48,-10,127,-4,1,-39, 
  /* [24][0][][] */ -6,-6,9,-60,-24,-24,47,14,-54,-8,-15,-127,0,-87,32,6, 
  /* [25][0][][] */ -116,17,-31,13,53,-43,-57,-127,-26,51,-44,-52,-61,-65,7,-32, 
  /* [26][0][][] */ 35,-11,59,-93,127,-24,8,8,125,-36,28,-27,-6,113,-7,64, 
  /* [27][0][][] */ 103,-32,18,-35,-37,-60,3,-22,-30,23,-127,12,21,-16,5,42, 
  /* [28][0][][] */ -113,-22,-127,-83,42,-16,74,-50,-11,53,-55,9,45,-13,-32,49, 
  /* [29][0][][] */ -70,-38,-6,127,-10,7,13,-37,0,11,-78,49,24,-71,32,-43, 
  /* [30][0][][] */ 59,-7,127,-8,63,49,-18,78,-24,-63,47,-24,-9,34,-69,54, 
  /* [31][0][][] */ 14,-84,1,-45,-1,-57,19,-47,-12,47,112,22,-27,90,70,127, 
  /* [32][0][][] */ -11,69,-35,36,-127,20,-66,-39,-58,-29,4,47,14,52,35,63, 
  /* [33][0][][] */ 24,-17,19,127,10,-4,25,-53,-105,62,77,-27,5,-5,17,118, 
  /* [34][0][][] */ 47,7,14,6,85,-51,-127,-32,-52,94,-36,5,-42,15,17,1, 
  /* [35][0][][] */ 65,11,-20,-8,12,-127,-15,-12,-31,5,-70,-11,81,12,3,24, 
  /* [36][0][][] */ 25,-8,-127,2,38,7,-25,18,-35,-17,4,-17,7,8,-11,5, 
  /* [37][0][][] */ 6,5,127,-1,-50,27,21,-51,-5,31,-41,23,15,-3,10,-7, 
  /* [38][0][][] */ -123,32,-7,18,20,68,17,-26,7,-18,127,-33,-31,5,-8,-14, 
  /* [39][0][][] */ -20,-7,10,30,30,-14,-127,33,14,33,-1,-37,2,-24,2,-3, 
  /* [40][0][][] */ -8,89,-25,127,19,55,72,46,-68,-38,-27,69,29,55,-59,-31, 
  /* [41][0][][] */ 23,21,-42,-24,-57,-1,127,101,-53,89,-35,7,3,68,37,-6, 
  /* [42][0][][] */ 41,-55,-23,-19,33,36,-69,58,74,-101,127,36,-18,35,-57,34, 
  /* [43][0][][] */ -71,10,32,-37,38,22,-78,-85,-29,37,-4,-8,-127,-12,33,-8, 
  /* [44][0][][] */ 12,7,-16,-11,0,-23,1,-54,127,-7,16,46,22,82,5,44, 
  /* [45][0][][] */ -62,-97,17,-90,29,1,-14,59,10,-67,-22,-34,22,111,-40,127, 
  /* [46][0][][] */ -38,18,-21,86,-74,-22,-1,-66,-127,34,-52,-17,-4,31,-3,-33, 
  /* [47][0][][] */ -20,-12,-87,127,10,48,2,-14,18,47,45,62,-8,-7,16,-26, 
  /* [48][0][][] */ -4,14,19,-127,23,-31,-26,-16,-45,8,32,-22,-26,50,92,48, 
  /* [49][0][][] */ -15,29,53,106,-2,51,-56,-6,31,-56,-97,-33,-21,-38,-92,-127, 
  /* [50][0][][] */ 3,68,31,-100,63,21,-19,60,127,-12,-38,13,-3,-32,5,-24, 
  /* [51][0][][] */ 16,-29,27,0,53,-11,-58,-127,20,-69,-11,4,-13,-7,-18,-18, 
  /* [52][0][][] */ 17,20,-14,33,30,-17,-66,104,-80,127,-40,-40,82,94,13,-35, 
  /* [53][0][][] */ 4,100,5,-97,-42,-1,40,-16,-79,-47,-49,59,21,-127,-98,-14, 
  /* [54][0][][] */ -1,5,20,36,46,-29,8,-32,-8,31,-9,-22,-10,127,-43,-12, 
  /* [55][0][][] */ -127,126,95,-13,52,10,-23,3,-41,34,97,-7,-19,-21,108,-19, 
  /* [56][0][][] */ 51,-6,13,-127,82,-9,-5,37,51,-56,58,117,-17,8,96,64, 
  /* [57][0][][] */ -15,5,14,76,-19,17,53,127,1,7,16,-23,0,65,18,11, 
  /* [58][0][][] */ 23,122,-6,-127,4,30,-7,15,100,-6,-7,74,10,-92,45,67, 
  /* [59][0][][] */ 17,40,39,-105,-42,-9,36,-15,13,31,35,-74,-3,-127,-62,14, 
  /* [60][0][][] */ 54,-14,120,-53,-51,127,43,-46,-4,50,-44,-10,30,20,43,1, 
  /* [61][0][][] */ -22,24,-40,-36,-53,12,93,127,-17,75,-9,14,2,80,11,-32, 
  /* [62][0][][] */ -10,7,-7,-4,-78,32,-61,21,-31,-34,-10,-46,23,-127,100,2, 
  /* [63][0][][] */ 17,-25,-6,-87,34,-8,-111,-127,-52,88,-9,6,57,6,31,-43, 
  /* [64][0][][] */ -19,-9,29,39,66,-6,-41,-127,22,-111,0,-46,-7,-27,-9,12, 
  /* [65][0][][] */ -127,21,31,-64,17,79,39,-54,-79,27,44,-8,-4,11,-20,-28, 
  /* [66][0][][] */ 66,19,79,8,-58,10,-24,30,-55,-15,72,-93,-21,40,-127,-13, 
  /* [67][0][][] */ 37,-31,-53,78,57,-59,-77,-107,57,-127,-85,-39,-112,29,-102,18, 
  /* [68][0][][] */ 16,-31,-89,35,-58,-84,-5,-60,-57,-28,47,-78,-26,34,127,-12, 
  /* [69][0][][] */ -32,31,-70,59,-15,-127,31,84,31,13,55,-3,116,39,-6,3, 
  /* [70][0][][] */ 3,8,-34,-37,-45,12,127,108,-15,60,-24,20,11,50,10,-4, 
  /* [71][0][][] */ 12,-14,-21,-43,27,6,5,58,-26,-40,-17,4,12,-127,63,4, 
  /* [72][0][][] */ 26,24,-19,23,21,-45,-52,-127,9,49,-41,9,49,47,45,56, 
  /* [73][0][][] */ -49,-127,-31,-63,-91,-12,40,-36,-17,15,-28,-33,13,-51,70,-11, 
  /* [74][0][][] */ -30,30,52,91,-2,4,-127,94,26,-38,-40,-44,-4,-9,-8,-6, 
  /* [75][0][][] */ -58,29,-39,17,-30,92,84,126,0,67,-1,-35,-127,78,15,26, 
  /* [76][0][][] */ 6,-12,-34,-13,44,-60,-127,-124,-14,-14,11,-6,33,1,77,-38, 
  /* [77][0][][] */ -40,2,-40,-24,-52,-10,-10,-50,127,14,-59,4,-1,41,33,-81, 
  /* [78][0][][] */ -98,-127,-2,106,78,79,-39,32,-11,-82,-110,89,44,-35,96,69, 
  /* [79][0][][] */ 31,-9,30,-58,127,9,51,20,90,25,8,36,-2,-26,23,-47, 
  /* [80][0][][] */ 6,-49,60,-119,-24,-51,3,8,-97,-54,-12,-65,3,127,-33,14, 
  /* [81][0][][] */ 23,-15,33,37,2,38,-16,-17,6,-6,-9,-43,0,27,-127,17, 
  /* [82][0][][] */ -82,-21,29,-127,-5,-51,-1,-49,-23,-35,-52,-117,-19,-105,-99,23, 
  /* [83][0][][] */ -2,11,-30,-66,-38,-1,1,46,-67,-3,9,-66,24,-127,0,43, 
  /* [84][0][][] */ 127,41,31,63,-50,14,-71,25,-6,-32,103,13,-89,19,77,-83, 
  /* [85][0][][] */ -12,-18,20,-27,46,-3,-46,117,-79,-111,-62,-35,-25,77,76,-127, 
  /* [86][0][][] */ 25,-7,9,3,-62,69,-45,54,-84,-40,30,-19,-14,-127,-17,24, 
  /* [87][0][][] */ 127,-36,27,7,-32,-25,-8,3,13,11,-109,20,29,-1,-9,32, 
  /* [88][0][][] */ 15,46,-36,-7,-40,-49,-4,1,76,17,19,21,12,-31,127,-89, 
  /* [89][0][][] */ 42,71,-91,-25,-37,-28,22,-74,42,44,33,-38,-45,-8,-15,-127, 
  /* [90][0][][] */ 1,-34,-5,-84,-74,7,127,-60,78,-76,21,-76,45,-26,-36,-17, 
  /* [91][0][][] */ 16,12,-15,-103,-35,5,21,-34,-55,15,65,54,5,-20,29,127, 
  /* [92][0][][] */ 18,0,10,17,53,-12,-68,-127,42,-63,-8,-29,-33,-15,-11,-21, 
  /* [93][0][][] */ 62,11,45,-126,-35,3,-36,57,53,-78,86,-16,-47,127,-31,21, 
  /* [94][0][][] */ -90,34,-98,2,55,-127,-11,12,-12,-36,99,-33,5,-12,-22,5, 
  /* [95][0][][] */ -19,60,26,-127,-5,7,-38,4,23,-23,-53,-75,2,32,-70,-8, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.00065118575002998114, 0.00084615207742899656, 0.00050293718231841922, 0.00024532029055990279, 0.00050950306467711926, 0.00085879041580483317, 0.0013348289066925645, 0.0012684229295700788, 0.00018092822574544698, 0.00086433382239192724, 0.0005845070700161159, 0.00052683555986732244, 0.00042289844714105129, 0.00042925300658680499, 0.00022653763880953193, 0.0010975743643939495, 0.00054551556240767241, 0.00038503046380355954, 0.00039062168798409402, 0.00095592148136347532, 0.00096974987536668777, 0.0021590425167232752, 0.00037614913890138268, 0.0022500187624245882, 0.001405700109899044, 0.00080405024345964193, 0.00058129982789978385, 0.00064614845905452967, 0.00079576537245884538, 0.00028387093334458768, 0.00021118904987815768, 0.00033034631633199751, 0.00051639758748933673, 0.00070715619949623942, 0.00079752079909667373, 0.00078755401773378253, 0.00085440510883927345, 0.0012525839265435934, 0.00045049123582430184, 0.0021031787618994713, 0.00031625005067326128, 0.00042774432222358882, 0.0003783655702136457, 0.00087507523130625486, 0.0003229161084163934, 0.00067391927586868405, 0.00095733709167689085, 0.00072266394272446632, 0.0001846212544478476, 0.00040646857814863324, 0.00051521172281354666, 0.00062179524684324861, 0.00098403729498386383, 0.000923012790735811, 0.00096255907556042075, 0.00057698402088135481, 0.00058158923638984561, 0.00038311592652462423, 0.00094251090195029974, 0.0005362705560401082, 0.001191690331324935, 0.00023362717183772475, 0.00040948388050310314, 0.00056566216517239809, 0.00059687922475859523, 0.00079246313543990254, 0.00086413003737106919, 0.00061263598036020994, 0.0004504361713770777, 0.00066005118424072862, 0.00049846956972032785, 0.00037813003291375935, 0.00032097319490276277, 0.00038351237890310585, 0.0010857945308089256, 0.00089851516531780362, 0.00064738182118162513, 0.00088992837117984891, 0.0010550719453021884, 0.00079488597111776471, 0.00046579449553973973, 0.00039966418989934027, 0.0005433466867543757, 0.00028027434018440545, 0.0010768029605969787, 0.0008989109774120152, 0.00050404900684952736, 0.00018043826275970787, 0.00053291145013645291, 0.00098986388184130192, 0.00063169311033561826, 0.00084990839241072536, 0.00062155572231858969, 0.00067741156090050936, 0.00074322137515991926, 0.00051218632142990828, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 2371, 6448, 14180, 35599, 21999, -4430, -2224, 4835, 49034, -5968, 17093, 6253, 11307, 20402, 39785, 1941, 3124, 11985, 21410, 4692, -316, 418, 20157, -1067, 6985, -14, 14328, 8065, 7644, 46421, 50247, 28100, 12186, -1205, 9385, 2736, 2217, 4455, 22522, -1024, 22520, 13870, 26887, -4537, 37849, 8656, 6795, 13883, 84342, 19531, -1023, 10412, -4068, -260, -3978, 7166, -705, 18191, 8174, 10422, 5027, 22584, 13437, 6663, 15494, 9173, 5608, -8080, 13919, -3983, 8473, 15976, 24453, 10003, -5354, -5628, 9684, 398, 2741, -1929, 16491, 15445, 6116, 26165, 4033, 286, 17525, 80516, 10056, 8605, 7473, -397, 8928, 8879, 5632, 12493, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00017343701620120555, 0.00022536440519616008, 0.0001339524460490793, 6.5338681451976299e-05, 0.00013570120790973306, 0.00022873051057104021, 0.00035551874316297472, 0.0003378321707714349, 4.8188481741817668e-05, 0.00023020694789011031, 0.00015567780064884573, 0.00014031755563337356, 0.00011263490887358785, 0.00011432738392613828, 6.0336107708280906e-05, 0.0002923283027485013, 0.00014529278269037604, 0.00010254913649987429, 0.00010403830674476922, 0.00025460042525082827, 0.00025828348589129746, 0.00057504005962982774, 0.00010018367902375758, 0.00059927068650722504, 0.00037439461448229849, 0.00021415099035948515, 0.00015482357412111014, 0.00017209538782481104, 0.00021194439614191651, 7.5606272730510682e-05, 5.624815821647644e-05, 8.798453927738592e-05, 0.00013753749954048544, 0.00018834420188795775, 0.00021241193462628871, 0.00020975738880224526, 0.0002275625301990658, 0.00033361359965056181, 0.00011998397530987859, 0.00056016130838543177, 8.4230137872509658e-05, 0.00011392555461497977, 0.00010077400656882674, 0.00023306781076826155, 8.6005580669734627e-05, 0.00017949187895283103, 0.00025497746537439525, 0.00019247454474680126, 4.9172082071891055e-05, 0.00010825896606547758, 0.00013722165022045374, 0.00016560914809815586, 0.00026208881172351539, 0.00024583551567047834, 0.00025636827922426164, 0.00015367410378530622, 0.0001549006556160748, 0.00010203921556239948, 0.00025102865765802562, 0.00014283046766649932, 0.00031739516998641193, 6.2224331486504525e-05, 0.0001090620644390583, 0.00015065864135976881, 0.00015897299454081804, 0.00021106487838551402, 0.00023015266924630851, 0.00016316966502927244, 0.00011996931425528601, 0.00017579823906999081, 0.00013276253594085574, 0.00010071127326227725, 8.5488100012298673e-05, 0.00010214481153525412, 0.00028919085161760449, 0.00023931081523187459, 0.00017242388275917619, 0.00023702380713075399, 0.00028100819326937199, 0.00021171018306631595, 0.00012405985035002232, 0.000106446685094852, 0.00014471512986347079, 7.4648356530815363e-05, 0.00028679604292847216, 0.00023941622930578887, 0.00013424857752397656, 4.8057983804028481e-05, 0.00014193580136634409, 0.00026364065706729889, 0.00016824534395709634, 0.00022636486392002553, 0.0001655453525017947, 0.00018042200827039778, 0.00019794981926679611, 0.00013641586701851338, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ -46,-71,-11,127,22,70,75,-58,-15,-17,-14,-5,-29,-1,37,1,-9,-45,26,21,18,-127,127,6,-84,6,49,-28,-126,-127,39,24,12,26,61,-17,-30,-10,30,-7,-13,27,-109,70,25,-69,38,46,-18,51,-24,19,2,-6,15,47,-90,-49,-58,-20,-10,0,11,38,69,-25,74,14,-7,17,19,127,23,23,25,-1,-10,18,127,-7,-14,16,-28,21,127,19,-77,-16,-2,-32,-16,-38,1,-25,-15,25, 127,-127,74,106,-42,127,38,-117,70,4,-16,127,127,-100,-13,14,10,127,127,-112,127,-77,81,68,-127,-117,-67,-34,-54,46,-60,-21,-89,53,-127,-84,-43,-14,-53,61,-1,127,127,81,-52,-113,-112,-49,-15,-127,44,85,67,-32,45,83,-47,42,-79,-114,-45,-41,-61,66,74,-61,27,31,-79,33,-17,89,116,127,13,19,2,58,-34,52,65,127,127,-23,-8,73,-113,127,-119,-99,4,-127,-91,-127,-38,105, -75,-13,29,-83,15,-25,64,-9,81,-34,-27,19,-19,-6,-9,-12,-8,-16,6,-4,-23,-103,29,-1,-123,95,9,-54,115,49,-14,9,1,13,15,-29,-9,34,19,11,24,12,-119,64,18,-19,38,14,-14,10,-16,4,-9,2,-3,20,-64,7,-31,51,3,41,33,-1,-7,-39,-32,24,10,3,-3,35,9,-25,-5,4,-12,-6,-85,2,-20,-22,-17,3,-109,8,-34,-22,-50,24,-25,-32,29,-27,-14,1, 
  /* [0][1][][] */ -64,-74,73,-35,-48,94,19,127,-52,-21,0,-118,26,-117,79,30,-3,-61,-17,89,53,-67,48,50,-97,-12,127,-22,-25,65,121,-103,-127,90,-87,-55,-36,31,-29,96,-49,-26,-5,46,-47,127,-23,64,15,94,19,-2,15,-55,26,31,127,121,-69,-86,127,-33,-35,127,73,-38,-15,-2,127,39,127,96,-41,102,-5,11,13,13,-32,9,-43,123,-81,110,2,34,-55,30,77,-127,-32,-6,127,-70,-23,0, 67,126,56,-113,127,85,92,37,-127,127,127,-38,-64,-127,-127,127,127,-63,-124,-51,104,95,-121,127,-106,-89,-44,127,-127,109,-127,-127,-88,127,108,127,127,-127,-106,127,-65,-96,110,-127,-127,-36,-127,-127,127,-111,86,43,127,127,127,-127,99,-127,-127,127,19,-80,-127,-99,-127,127,-127,127,-124,-127,-107,-83,-127,-79,127,127,-127,127,-79,127,127,30,-42,-127,61,127,92,45,127,13,127,3,-68,34,127,-127, -53,-13,-50,37,-56,-97,37,-28,19,-33,-28,93,2,94,14,10,-4,65,-7,127,4,-83,-41,8,-75,103,-70,-20,-69,-17,17,-63,-70,37,6,-18,-30,45,-68,41,127,-5,-38,28,-39,-60,17,45,9,116,-11,6,-37,-73,3,19,96,3,2,21,-34,127,91,-52,-43,12,37,-11,-75,122,-19,-86,-1,-54,-16,-20,27,16,77,-36,-69,-40,56,14,-48,-16,74,23,16,62,-43,21,-44,96,-26,-5, 
  /* [0][2][][] */ -66,1,-4,-21,13,-45,65,23,55,-28,-36,-1,19,17,-26,1,-7,65,7,0,-53,-82,2,-9,-29,-54,34,-69,87,39,25,27,16,-9,-12,-45,-6,36,-4,-2,-15,-7,-69,106,4,32,11,36,-16,-31,11,-20,22,0,8,16,-69,24,-14,13,15,0,-22,-5,0,-47,-47,15,-32,14,25,30,13,-19,27,3,16,5,-79,-12,-9,-8,17,15,-127,7,12,-44,-55,-51,-27,-50,9,57,-19,-8, 122,34,-127,-36,-72,-24,39,29,-65,-29,-19,-108,-76,112,-13,36,2,-50,-9,-127,91,-52,-38,0,-111,127,-52,20,-36,-21,-10,-4,-63,14,28,6,-23,-28,127,51,12,-15,68,-34,-39,77,-67,-43,-34,-6,-127,-127,-52,-26,1,40,-66,-6,12,39,-8,-19,8,-47,-54,32,65,-23,114,109,-24,-70,11,-57,3,3,98,4,51,22,12,-95,-51,3,2,8,127,39,-57,39,-18,-111,41,81,-10,26, -53,13,-18,25,15,-67,-127,1,-11,-8,-15,4,15,-26,19,-1,-7,-16,4,16,-48,-73,14,2,15,-95,21,3,-48,-39,-6,17,42,-21,-6,-26,-36,4,41,-42,23,-3,-48,-34,4,65,23,16,-10,-5,10,-9,17,6,-4,-5,-60,-12,4,-38,-11,10,84,-10,34,-3,-1,28,1,6,-5,19,-18,16,-1,15,36,1,74,-11,3,-7,-8,-18,74,1,42,-39,60,38,-16,-56,-8,2,-14,-15, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.0047852653078734875, 0.0033968845382332802, 0.0043065720237791538, 0.0056949034333229065, 0.0087316138669848442, 0.0084254005923867226, 0.0030885180458426476, 0.002716495655477047, 0.0069257020950317383, 0.0098598096519708633, 0.011942077428102493, 0.0041961227543652058, 0.0098889870569109917, 0.006970343180000782, 0.013576893135905266, 0.007784740999341011, 0.0084148682653903961, 0.0075134332291781902, 0.0060773678123950958, 0.0024580254685133696, 0.0029366654343903065, 0.0032284376211464405, 0.0043217390775680542, 0.003069637343287468, 0.0056720194406807423, 0.0062027354724705219, 0.0078971544280648232, 0.0068734902888536453, 0.0026706301141530275, 0.012737357057631016, 0.010894616134464741, 0.0090153822675347328, 0.0050069289281964302, 0.0071208332665264606, 0.0088318586349487305, 0.020619720220565796, 0.011917152442038059, 0.0087668709456920624, 0.0058609927073121071, 0.0052161933854222298, 0.0071953758597373962, 0.0068699726834893227, 0.011769038625061512, 0.0062277596443891525, 0.016701595857739449, 0.002996775321662426, 0.0047731678932905197, 0.011196593753993511, 0.022103114053606987, 0.0047114929184317589, 0.024473581463098526, 0.0046803434379398823, 0.0083064716309309006, 0.0051012840121984482, 0.01491124089807272, 0.0046662040986120701, 0.0031292180065065622, 0.014909211546182632, 0.0026053730398416519, 0.0046721706166863441, 0.013255415484309196, 0.0087148919701576233, 0.0040386421605944633, 0.0057476651854813099, 0.004756685346364975, 0.0044905315153300762, 0.010560969822108746, 0.020919131115078926, 0.0068205832503736019, 0.005231077317148447, 0.011797563172876835, 0.0032996227964758873, 0.014408177696168423, 0.0050113396719098091, 0.02697005495429039, 0.011762103997170925, 0.0035996653605252504, 0.0042556906118988991, 0.0023794847074896097, 0.0073210354894399643, 0.0097035849466919899, 0.007652689702808857, 0.0053421393968164921, 0.0079633854329586029, 0.0026380952913314104, 0.005492103286087513, 0.0028121252544224262, 0.013732473365962505, 0.010080195032060146, 0.0044140936806797981, 0.012675963342189789, 0.0015632904833182693, 0.0056649805046617985, 0.0035953337792307138, 0.010674898512661457, 0.0092313699424266815, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 19026, 67862, -2247, -19, 14371, -4204, 492, 889, 6833, 10209, -6324, 1319, 1617, 2736, 6254, -8465, -4274, -52, 1796, 19400, -9328, 9605, 1195, 10691, 31299, 109, -1052, 17116, 12245, -22447, 3009, 20840, 21774, -9742, 859, -5, -2098, 701, 5054, -6836, -5155, -1498, -17819, 1225, 28718, 219, 12382, 965, -18704, 3956, -236, 1027, -2733, 21980, -2391, 19465, 36067, 971, 27863, 364, -7056, -806, 3099, 967, 1490, 13774, -978, -4335, -6117, 3362, 2356, -366, 3699, 450, -1060, -6759, 1999, -1833, 46458, -7399, -7170, -12687, -558, 306, 56672, -11792, -10320, -29400, -9073, 6717, -4782, 26276, -691, -1702, -5330, 2055, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00011259448365308344, 7.9926699982024729e-05, 0.00010133110481547192, 0.00013399773160926998, 0.00020544974540825933, 0.00019824472838081419, 7.2671013185754418e-05, 6.3917548686731607e-05, 0.00016295770183205605, 0.00023199552379082888, 0.00028099006158299744, 9.8732300102710724e-05, 0.00023268205404747277, 0.00016400807362515479, 0.00031945630325935781, 0.00018317038484383374, 0.00019799690926447511, 0.0001767866633599624, 0.00014299689792096615, 5.7835895859170705e-05, 6.9098008680157363e-05, 7.5963238487020135e-05, 0.00010168798326049, 7.2226765041705221e-05, 0.00013345928164198995, 0.00014594671665690839, 0.00018581539916340262, 0.00016172918549273163, 6.2838356825523078e-05, 0.00029970251489430666, 0.00025634391931816936, 0.00021212664432823658, 0.00011781009379774332, 0.00016754902026150376, 0.00020780843624379486, 0.00048516990500502288, 0.0002804035902954638, 0.00020627932099159807, 0.00013790570665150881, 0.0001227339671459049, 0.00016930296260397881, 0.00016164641419891268, 0.00027691855211742222, 0.0001465355308027938, 0.00039297871990129352, 7.0512360252905637e-05, 0.00011230983363930136, 0.00026344927027821541, 0.00052007328486070037, 0.0001108586584450677, 0.00057584897149354219, 0.00011012572940671816, 0.00019544639508239925, 0.00012003021402051672, 0.0003508527297526598, 0.00010979303624480963, 7.3628660175018013e-05, 0.0003508049703668803, 6.1302896938286722e-05, 0.0001099334258469753, 0.00031189213041216135, 0.00020505629072431475, 9.5026873168535531e-05, 0.00013523918460123241, 0.00011192201054655015, 0.00010565956472419202, 0.00024849342298693955, 0.00049221486551687121, 0.00016048431280069053, 0.00012308417353779078, 0.00027758971555158496, 7.7638185757678002e-05, 0.00033901593997143209, 0.00011791387805715203, 0.0006345895235426724, 0.00027675539604388177, 8.4698011050932109e-05, 0.00010013389692176133, 5.5987875384744257e-05, 0.00017225966439582407, 0.0002283196517964825, 0.00018006328900810331, 0.00012569740647450089, 0.00018737377831712365, 6.2072831497061998e-05, 0.00012922596943099052, 6.616765313083306e-05, 0.00032311701215803623, 0.00023718106967862695, 0.00010386102803749964, 0.00029825797537341714, 3.6783305404242128e-05, 0.0001332936662947759, 8.4596089436672628e-05, 0.00025117408949881792, 0.00021720871154684573, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -12,-16,7,-27,14,-4,-37,-2,19,1,-13,5,-9,-12,-22,3,-2,6,-6,1,13,-29,1,8,2,8,7,127,29,-37,42,-13,-2,3,6,4,-6,15,-40,-7,-8,7,-3,36,8,17,11,8,20,0,-9,6,13,-15,-14,81,8,11,-31,-31,-6,24,-4,-28,-37,-60,-23,34,3,14,20,-17,-3,-31,-8,-25,-28,19,6,4,-10,-29,24,18,-6,-13,-6,-93,0,-17,9,-7,42,-30,-31,-15, 
  /* [1][0][][] */ 29,-60,-74,-61,127,-14,63,40,-26,-82,-52,-13,9,-3,-62,41,-65,12,50,34,11,34,-12,-57,15,-1,-17,-65,39,-13,-63,39,-17,35,0,-3,2,-14,8,26,-33,29,-38,-18,-36,79,12,1,31,-67,16,-33,-13,33,52,7,-59,-27,-27,-38,19,-22,2,-36,-78,96,-19,-14,1,-31,-25,14,45,-103,-23,2,35,-48,36,5,10,-20,25,3,-42,36,-16,33,34,-32,-6,15,33,4,25,99, 
  /* [2][0][][] */ -1,48,-78,-20,96,75,26,81,-10,-102,2,-14,6,3,26,18,8,-25,-41,69,36,2,80,15,48,30,5,-41,38,-2,59,-47,30,42,-16,33,-127,-78,18,34,-4,-43,17,-22,15,-21,7,65,-21,19,-22,-4,97,-10,-14,57,38,10,26,1,33,27,34,-24,18,-6,-41,-4,-40,11,-6,-32,-48,-70,12,63,70,50,34,-6,23,-39,16,-8,-50,30,15,27,-12,35,1,-33,0,-24,-58,-5, 
  /* [3][0][][] */ 50,15,93,-17,54,-25,21,-13,-25,-70,25,-28,7,22,33,89,32,-7,39,1,123,-15,49,12,54,-11,-19,9,34,47,-4,75,-113,34,26,-1,-29,-20,2,39,-81,-26,73,19,16,36,-45,-92,-52,-25,-51,46,8,-127,-5,18,-113,64,45,28,22,88,-2,-37,34,55,2,-43,22,-35,-4,-55,39,-25,38,-23,19,-7,41,43,-32,-61,30,-2,-22,10,20,44,37,19,12,40,41,93,42,-24, 
  /* [4][0][][] */ 27,0,20,-10,127,42,-7,-25,-36,-51,-32,-38,-50,27,-12,55,27,-77,-44,79,-22,8,24,-15,2,-3,6,-35,5,-10,51,-30,92,8,-27,15,41,19,13,14,-24,-11,-33,-29,-1,-46,-11,7,44,9,-15,6,-10,-31,7,-29,23,-15,-31,34,-7,50,61,17,45,51,-19,-2,-49,-2,37,56,21,-74,-44,-30,34,33,77,-37,-3,-34,-3,-12,-62,5,43,49,-57,37,6,-36,14,13,27,-28, 
  /* [5][0][][] */ 14,-16,-11,17,24,-24,47,-26,-18,-46,-23,11,4,22,5,17,-13,-5,12,1,35,17,-43,75,13,-10,20,-97,-11,25,16,26,-10,11,8,-55,31,22,-16,4,-12,-10,22,-24,-4,-4,2,-18,-15,-25,9,-13,-9,-26,-14,-49,2,20,-30,16,71,20,-3,35,-6,58,7,74,2,100,16,32,4,14,-12,69,-34,-12,24,12,-5,-6,4,15,-19,11,-11,127,-2,24,-3,-21,-2,17,-61,15, 
  /* [6][0][][] */ 22,-73,14,-34,-34,7,40,18,5,4,-23,-75,-45,-6,-35,35,16,0,-5,-11,-51,35,6,5,-25,-8,-23,-12,-20,16,35,-6,55,6,63,-2,-9,-15,27,-96,-17,97,5,-36,18,-28,-20,11,-9,45,-27,67,-26,-68,-14,-15,-1,-68,-6,-4,-19,62,36,-78,24,-29,12,-19,-14,-7,127,-3,-49,5,-34,19,-89,-16,13,6,34,45,17,-4,-17,2,41,26,13,11,45,-30,-10,-9,-38,-12, 
  /* [7][0][][] */ 2,127,44,19,108,44,46,-39,-20,-30,32,-20,-32,29,25,29,10,-30,-1,34,35,-26,29,17,-10,6,16,13,16,-20,8,15,39,-11,-43,13,27,12,-1,84,-38,31,14,16,-6,-24,21,-14,-24,-25,30,11,16,-33,-37,40,51,8,-22,4,-19,-39,-11,-11,-57,74,-26,-82,-15,-37,-4,56,-12,-32,12,7,48,53,44,-18,-50,-33,-16,-12,-20,47,-3,-6,-32,22,-30,-37,-50,-18,27,-8, 
  /* [8][0][][] */ -5,8,52,16,-127,-33,48,-10,24,83,79,10,-10,16,19,7,-42,5,7,-9,-39,4,-120,65,27,-28,57,-3,10,20,6,61,85,-25,1,-9,-30,-21,-1,43,9,-36,50,4,-41,4,57,-4,-104,21,36,25,-67,-48,-43,39,11,-61,-90,-23,21,-37,-27,-6,4,81,4,-56,32,-23,-54,-31,35,50,59,-3,-24,-32,-24,36,-85,16,-20,2,31,25,76,49,39,-32,44,56,15,5,42,18, 
  /* [9][0][][] */ 13,-116,-18,25,93,81,-41,-20,33,-30,103,89,-26,13,96,-112,22,-41,-7,22,-48,-45,34,-10,-19,11,4,31,-33,0,15,-17,14,10,-102,32,4,21,-21,54,30,-77,-17,65,-4,-12,-69,-26,29,19,-7,-93,69,33,-11,-44,3,95,-21,5,28,-48,-22,127,-82,-18,-12,-29,5,39,-52,-76,51,1,-10,38,64,-60,32,10,-9,-28,8,31,-11,-66,22,-14,-5,-43,-59,28,-69,-3,0,-49, 
  /* [10][0][][] */ -43,-25,-27,-40,-28,-3,66,-25,38,15,26,36,26,-14,-2,-8,-6,20,-30,-15,2,35,14,24,-12,-13,14,-127,23,-45,59,-37,-2,18,0,-7,-1,35,-5,-8,11,-30,21,-54,10,0,26,19,-7,37,-29,-13,-40,-20,-11,-55,23,18,-9,-37,26,14,-6,5,-32,91,-20,-32,10,-24,4,-16,-25,-5,17,52,-11,42,-16,14,-25,-3,10,21,4,-22,-6,112,-2,-6,17,9,17,-37,47,-40, 
  /* [11][0][][] */ -93,15,3,3,22,-70,-14,6,-47,-6,2,27,38,18,-22,-11,58,-3,-57,-48,30,-3,-2,5,73,15,71,-4,-25,36,-34,16,-14,23,-4,-13,-6,10,18,4,-21,-5,7,2,80,19,76,18,53,47,-6,40,10,-69,18,-1,-66,-14,-40,-48,0,-7,6,27,1,-32,36,-5,20,13,-1,35,-31,18,23,9,-24,87,-127,73,-44,-2,-62,-65,121,15,40,-14,20,45,-38,-65,-29,52,-22,4, 
  /* [12][0][][] */ -13,0,-32,4,53,24,-3,-21,-10,22,26,-9,2,-19,28,-10,-25,-4,9,-19,-16,-19,-33,40,-31,37,-26,85,-20,27,-38,-4,-11,26,2,27,-18,-13,24,3,1,-12,-6,5,-11,-8,12,19,-3,-1,-10,-29,-13,10,-7,-17,-14,-11,14,21,-19,-25,1,45,40,-70,17,46,-28,-127,-12,44,6,6,9,75,8,-15,-10,-7,-5,24,-43,6,16,-17,-1,-44,-6,7,12,7,-32,26,-13,28, 
  /* [13][0][][] */ -86,62,2,0,-71,11,-12,10,-31,-34,53,28,89,6,-18,-8,-11,36,-48,-3,25,-8,54,-50,58,37,2,8,4,-24,-22,-106,-102,-36,9,18,4,36,33,-18,-27,88,-6,12,47,3,-18,14,73,-4,27,80,63,-60,76,-17,-17,60,37,11,9,33,-19,17,-3,-23,13,5,8,21,27,-127,16,-21,-86,3,45,38,-43,-52,79,-19,5,-31,33,-41,95,3,-14,-7,-11,20,38,-44,-8,-1, 
  /* [14][0][][] */ -31,12,-11,-42,24,3,-7,23,-77,4,16,17,-31,-68,-68,-27,-86,-7,64,15,37,-10,13,-95,-48,11,-44,-14,8,-24,-9,-39,-74,-37,18,21,-8,5,17,-5,11,89,-68,-8,-48,15,3,19,127,-28,23,-16,22,61,-103,26,-19,37,-110,18,6,31,35,29,4,27,0,0,-58,27,67,34,40,-1,-32,21,45,-78,-24,-101,20,-40,9,37,27,-72,-42,8,-45,15,40,42,11,30,26,-15, 
  /* [15][0][][] */ -39,-81,-3,-34,-1,14,-4,-72,-19,14,0,-28,39,-18,53,-18,-90,1,-23,18,-13,9,-75,-39,-15,-4,0,17,-26,-11,64,-98,-10,24,25,10,-1,26,-105,0,34,-69,-5,24,-22,-48,51,38,47,20,-15,-127,-10,53,-7,36,42,-5,-24,49,2,1,37,-10,2,-2,-9,-9,-30,28,10,38,-38,7,-5,-39,-38,-14,11,5,-10,37,-5,66,-20,-49,-34,-40,-42,57,36,78,-46,-5,6,-18, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.034226793795824051, 0.018532037734985352, 0.011305767111480236, 0.01286689005792141, 0.01998608186841011, 0.015977935865521431, 0.018856337293982506, 0.014083633199334145, 0.012719067744910717, 0.011501836590468884, 0.029193198308348656, 0.023067677393555641, 0.01955103687942028, 0.010406172834336758, 0.027237512171268463, 0.021317578852176666, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { -9425, 15524, -19107, 2396, -12046, 10743, 29669, -52949, -3472, 15103, 25030, 16563, -8296, 12817, -5361, 12749, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 0.000805336341727525, 0.00043604796519502997, 0.0002660180616658181, 0.00030275035533122718, 0.00047026076936163008, 0.00037595143658109009, 0.00044367852387949824, 0.00033137961872853339, 0.0002992721856571734, 0.00027063145535066724, 0.0006868987693451345, 0.00054276891751214862, 0.00046002439921721816, 0.00024485113681294024, 0.00064088264480233192, 0.00050159008242189884, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -25,82,-8,-127,-47,-34,-25,-71,-25,9,-2,68,24,-61,-5,54, 
  /* [1][0][][] */ -31,26,-57,1,-24,-24,23,-78,63,48,-64,22,0,7,37,-127, 
  /* [2][0][][] */ 7,25,-26,52,51,25,-59,-49,127,-45,-18,22,-10,82,-70,13, 
  /* [3][0][][] */ 49,-66,5,-110,10,-24,-10,-7,110,-10,75,43,-12,48,29,127, 
  /* [4][0][][] */ -85,42,9,34,3,-26,0,30,4,10,30,-28,-127,-15,-10,34, 
  /* [5][0][][] */ 15,62,126,7,20,80,-93,88,-66,85,-21,-36,47,-48,-127,26, 
  /* [6][0][][] */ 28,-62,104,-127,30,-6,-34,84,-80,-105,59,-41,11,76,-12,85, 
  /* [7][0][][] */ 28,120,-32,-67,93,9,12,-58,127,102,-29,15,33,-30,65,51, 
  /* [8][0][][] */ 6,-85,7,-93,20,-62,20,-75,24,69,78,-12,14,127,77,65, 
  /* [9][0][][] */ 3,-36,-9,127,39,-12,46,-67,-69,115,35,-26,-3,-70,-5,-4, 
  /* [10][0][][] */ -6,19,-48,-127,7,-2,-6,27,24,-37,9,-32,-12,-45,-7,19, 
  /* [11][0][][] */ 5,18,24,-16,72,-26,78,-49,-73,37,-4,33,1,127,-56,-30, 
  /* [12][0][][] */ 57,-4,-127,-17,37,-88,41,18,20,57,-84,-51,-37,127,-9,34, 
  /* [13][0][][] */ -18,8,-23,12,4,-127,-2,20,7,-9,6,1,10,-13,10,9, 
  /* [14][0][][] */ 31,-18,97,-23,65,13,-127,-81,-12,-35,21,25,1,-51,-23,-37, 
  /* [15][0][][] */ -90,18,-18,-56,-1,0,127,77,-39,64,109,-28,11,99,74,6, 
  /* [16][0][][] */ 34,53,127,91,-5,12,107,70,-117,1,-92,-24,27,0,18,-84, 
  /* [17][0][][] */ -37,-115,-13,33,-70,-21,-61,17,-127,-34,11,-45,0,44,60,-42, 
  /* [18][0][][] */ 11,41,-5,55,33,-1,35,12,92,37,-16,-33,27,127,72,33, 
  /* [19][0][][] */ 17,-17,52,21,122,28,-114,-66,-100,-92,-49,-127,-52,-40,-9,-50, 
  /* [20][0][][] */ 115,-31,-54,-26,20,-127,0,36,-46,47,-125,-5,28,16,18,-8, 
  /* [21][0][][] */ 56,-9,76,-20,-12,6,-15,127,1,-79,85,33,-17,116,52,96, 
  /* [22][0][][] */ -32,36,-46,127,-61,1,104,58,-16,36,-14,34,1,10,34,-3, 
  /* [23][0][][] */ 78,-14,103,-107,51,-24,-9,44,4,6,-1,-32,12,-23,-127,30, 
  /* [24][0][][] */ -127,45,11,-14,6,114,24,-26,-9,14,96,-7,-74,17,63,-31, 
  /* [25][0][][] */ 28,27,17,24,15,12,61,-45,0,-127,-17,-15,-14,-25,8,16, 
  /* [26][0][][] */ -43,-7,-5,3,-55,-12,-37,-38,-115,-33,6,-41,10,127,-35,59, 
  /* [27][0][][] */ -4,29,6,67,34,-30,-17,-33,59,9,-26,2,11,127,-6,12, 
  /* [28][0][][] */ 16,64,54,58,127,-12,35,34,-98,-26,-56,-40,23,90,53,-32, 
  /* [29][0][][] */ 4,-5,12,21,34,3,8,42,-20,-16,-19,-127,-2,-11,-22,1, 
  /* [30][0][][] */ -16,84,-46,78,-38,-16,45,-127,-40,61,-17,1,55,41,78,83, 
  /* [31][0][][] */ -29,-11,-14,-70,0,8,-45,-94,12,66,-18,-127,-27,-49,9,26, 
  /* [32][0][][] */ -127,-77,-6,66,58,41,-13,12,0,-41,-110,51,76,6,59,68, 
  /* [33][0][][] */ -13,-36,-36,-3,-85,-5,-83,6,65,18,17,-42,25,-110,127,30, 
  /* [34][0][][] */ 41,-9,59,20,40,14,-43,76,-84,-43,69,17,14,-11,-14,127, 
  /* [35][0][][] */ -37,50,-81,12,-16,-26,36,-127,82,86,-93,-4,12,-13,87,-123, 
  /* [36][0][][] */ -27,41,20,127,36,27,102,31,-2,43,-15,-1,-17,30,-54,-48, 
  /* [37][0][][] */ 12,-14,4,-83,-4,-4,-30,-51,-93,-28,-8,-18,9,-127,60,-29, 
  /* [38][0][][] */ 41,92,-5,-43,127,3,25,-34,113,68,-16,2,5,-23,41,9, 
  /* [39][0][][] */ -31,58,-12,-127,-18,3,-37,29,40,-66,-22,-22,17,66,37,32, 
  /* [40][0][][] */ -5,-32,13,-107,-8,-20,1,-32,-126,6,-4,-38,-9,-127,82,-60, 
  /* [41][0][][] */ -4,-20,-51,-24,-1,-35,23,-13,-37,9,-51,-14,-127,5,32,31, 
  /* [42][0][][] */ 127,88,-39,-28,-87,-61,-17,-63,-3,30,98,-63,-61,44,112,-112, 
  /* [43][0][][] */ -11,127,-62,11,78,-7,102,-23,69,103,-56,11,14,-113,-92,-69, 
  /* [44][0][][] */ -19,-8,13,-34,63,8,-99,-127,-14,-2,18,11,-8,-32,67,-70, 
  /* [45][0][][] */ -7,47,-127,-29,28,-68,34,-84,12,21,-4,-70,33,-11,52,-30, 
  /* [46][0][][] */ 6,-1,-21,-91,-14,6,17,-25,-113,-18,14,10,-13,-127,70,-28, 
  /* [47][0][][] */ 18,47,22,-19,127,-17,-24,13,-57,38,2,18,5,-2,116,-24, 
  /* [48][0][][] */ -127,-74,-25,28,58,11,15,-18,-1,-11,-97,35,57,4,75,53, 
  /* [49][0][][] */ 28,-4,67,50,100,-18,46,40,-127,-64,-16,-88,31,88,32,-40, 
  /* [50][0][][] */ 32,-24,-86,-12,21,-127,-35,-7,-14,-18,-1,-35,40,-17,-12,5, 
  /* [51][0][][] */ 12,39,46,17,31,8,-4,29,-127,64,1,-105,7,-104,-29,80, 
  /* [52][0][][] */ 18,38,-9,54,36,-15,19,25,60,104,-18,-63,47,127,75,34, 
  /* [53][0][][] */ -9,-46,-25,-22,-88,-9,-81,-6,44,18,12,-63,24,-127,122,22, 
  /* [54][0][][] */ 60,-24,-57,1,127,82,-117,-60,-96,-8,-33,-90,9,-53,-12,-41, 
  /* [55][0][][] */ 41,-10,1,-1,33,-41,-59,-127,-38,-71,-52,5,-4,-27,22,-2, 
  /* [56][0][][] */ -16,17,27,-18,-3,-22,-96,70,-8,127,-6,-12,25,8,-7,5, 
  /* [57][0][][] */ 7,13,-50,-20,-51,-52,127,81,-35,20,-18,-3,36,27,127,-14, 
  /* [58][0][][] */ 41,32,-127,41,103,114,-37,50,-105,-44,0,10,-46,28,-7,-27, 
  /* [59][0][][] */ -94,71,112,25,-71,-61,120,127,26,7,26,-12,11,16,67,-4, 
  /* [60][0][][] */ 6,-6,-44,3,23,-127,-20,3,-4,-11,-1,-18,28,-10,-3,2, 
  /* [61][0][][] */ 35,0,20,127,92,38,13,-12,-117,-18,29,34,-22,8,45,-60, 
  /* [62][0][][] */ -42,127,22,-40,-23,-4,-68,58,-15,-63,-84,-47,-12,-84,-58,-41, 
  /* [63][0][][] */ -39,31,-22,127,-72,15,-67,-28,-53,-23,-26,-31,23,67,34,31, 
  /* [64][0][][] */ 12,-2,-2,35,0,6,-10,55,20,3,-16,-47,-6,-127,49,2, 
  /* [65][0][][] */ -35,-29,32,-127,57,-37,85,-24,9,65,7,-104,-26,23,5,-72, 
  /* [66][0][][] */ 29,-16,67,-16,8,8,-17,97,13,-62,49,39,-3,127,15,66, 
  /* [67][0][][] */ 2,60,-12,-127,-10,2,-57,42,90,-100,-36,0,31,88,71,31, 
  /* [68][0][][] */ -31,38,127,15,13,10,-9,1,-35,-16,-13,-30,8,-15,79,-35, 
  /* [69][0][][] */ 127,79,-11,2,-79,-30,-32,-29,6,17,82,-47,-63,59,65,-93, 
  /* [70][0][][] */ 48,6,-54,-9,-24,27,51,127,-35,86,-38,8,18,66,-25,17, 
  /* [71][0][][] */ 7,0,-7,10,6,-75,0,21,-34,13,-78,5,-127,-3,43,49, 
  /* [72][0][][] */ 10,14,-127,7,5,8,27,84,-44,-30,8,-13,25,10,3,10, 
  /* [73][0][][] */ -49,22,39,0,49,-40,-83,-127,18,-75,41,-21,17,-52,46,-12, 
  /* [74][0][][] */ 4,35,37,127,17,-7,-78,85,-69,18,-46,46,21,-118,39,-84, 
  /* [75][0][][] */ -2,29,-46,18,17,-3,14,-13,109,18,-19,3,11,127,-40,-5, 
  /* [76][0][][] */ -4,-12,-4,16,2,-16,-7,56,14,-34,-19,-127,-2,-8,8,12, 
  /* [77][0][][] */ -7,30,-11,127,-44,19,74,98,15,36,-13,41,-9,-15,-16,-20, 
  /* [78][0][][] */ 12,11,36,-101,54,-24,-41,51,33,-34,4,-26,17,127,11,35, 
  /* [79][0][][] */ -23,-83,-68,-51,-78,-1,20,-72,127,24,29,59,12,44,38,-53, 
  /* [80][0][][] */ -20,-18,127,-106,20,-42,4,-97,-82,44,-46,-122,33,119,123,-46, 
  /* [81][0][][] */ -45,41,-127,23,66,-126,-10,56,-5,-40,67,-6,28,-1,5,-1, 
  /* [82][0][][] */ 127,-8,-6,15,12,-121,-14,22,-15,-5,-106,-5,114,4,-20,27, 
  /* [83][0][][] */ -47,89,-124,-85,-35,-24,47,-127,81,65,-40,-124,11,61,53,118, 
  /* [84][0][][] */ -20,30,59,-35,9,-30,63,-127,-51,32,-18,-61,40,47,66,-4, 
  /* [85][0][][] */ -79,127,31,-113,-68,-25,-30,0,-50,-7,-72,28,2,-5,-96,-33, 
  /* [86][0][][] */ 0,3,-35,2,-29,-29,127,18,-6,-35,-5,9,14,33,94,-23, 
  /* [87][0][][] */ -30,-39,5,-127,9,-41,52,-9,2,26,-5,-127,-24,1,5,-38, 
  /* [88][0][][] */ 91,-39,32,-21,15,-127,9,21,-66,48,-108,-65,49,21,79,11, 
  /* [89][0][][] */ 22,-31,-41,-61,33,-18,-25,-8,-45,12,44,-69,127,-1,25,-49, 
  /* [90][0][][] */ 0,-53,39,-60,68,-3,-72,80,54,-86,-38,-25,-10,115,23,-127, 
  /* [91][0][][] */ -41,-6,-24,-46,15,-20,-25,-89,9,66,-4,-127,-28,-18,-4,15, 
  /* [92][0][][] */ -21,24,44,20,3,-127,12,5,4,-23,-2,-11,2,-22,19,3, 
  /* [93][0][][] */ 40,-18,127,-8,-47,55,24,-25,-20,21,-74,-16,-24,0,28,1, 
  /* [94][0][][] */ 25,2,-18,-27,24,-8,-12,-9,-37,-17,19,-65,127,-21,27,-30, 
  /* [95][0][][] */ 127,98,2,37,-94,-14,-69,4,-23,-10,94,-40,-47,28,74,-72, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.00088318617781624198, 0.001139241736382246, 0.00059457781026139855, 0.00069004012038931251, 0.00085065333405509591, 0.00095366098685190082, 0.00053091364679858088, 0.00086680904496461153, 0.00038420781493186951, 0.00095855147810652852, 0.00038423860678449273, 0.00054884294513612986, 0.00056383019546046853, 0.0033118352293968201, 0.0006187230465002358, 0.00043260102393105626, 0.00024013710208237171, 0.0005102297873236239, 0.0010825360659509897, 0.00053329177899286151, 0.00025357247795909643, 0.00033415068173781037, 0.00043423962779343128, 0.00020098588720429689, 0.00037395826075226068, 0.0010018139146268368, 0.0017941391561180353, 0.00069433083990588784, 0.00050458736950531602, 0.00094598991563543677, 0.0004616150981746614, 0.00061337783699855208, 0.00057168916100636125, 0.00041213652002625167, 0.00097784132231026888, 0.00079062464646995068, 0.00034377275733277202, 0.00041009558481164277, 0.00090545351849868894, 0.00097370456205680966, 0.00029811618151143193, 0.0013059121556580067, 0.00073579698801040649, 0.00044512763270176947, 0.0010806543286889791, 0.0005285019869916141, 0.00054696848383173347, 0.00082521873991936445, 0.0008829848375171423, 0.00078617967665195465, 0.00047637845273129642, 0.00041221530409529805, 0.0012919817818328738, 0.00035489833680912852, 0.00066558079561218619, 0.0010869379620999098, 0.0011517677921801805, 0.00064171385020017624, 0.00075101578840985894, 0.00044147932203486562, 0.0020159955602139235, 0.00079952972009778023, 0.00048906973097473383, 0.00096325791673734784, 0.001283658086322248, 0.00058244058163836598, 0.00037318182876333594, 0.00050453940639272332, 0.0010888727847486734, 0.0013477053726091981, 0.0005442612455226481, 0.00088911730563268065, 0.0020593749359250069, 0.00070470641367137432, 0.0006744277779944241, 0.00039208389353007078, 0.00067826791200786829, 0.00026236241683363914, 0.00034351483918726444, 0.00052566285012289882, 0.0004500795912463218, 0.00050252763321623206, 0.00038355067954398692, 0.00034769353806041181, 0.00043853634269908071, 0.00069752329727634788, 0.0014801777433604002, 0.00039270147681236267, 0.00024459886481054127, 0.00077112845610827208, 0.00060865137493237853, 0.00056929280981421471, 0.00086338695837184787, 0.0015160053735598922, 0.00065852468833327293, 0.00052606523968279362, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { -2031, 4043, 11740, 3736, -3589, -4416, 18496, 2442, 4696, -1970, 15314, -265, -13319, 2525, 14657, 7798, 23190, 8323, -5220, -9461, 7048, 23714, 20872, 24656, 1443, 1377, 4898, 4662, 3134, -6185, 9286, -3585, -367, 8156, 73, 942, 16312, 7811, -2041, 5415, 12772, 5845, 6073, 15283, 5191, 5585, 2672, 7765, 4524, -4743, -9755, 634, -249, -2451, 3512, 47, 221, -1116, -6057, 12246, -1112, 2447, -1722, -2425, -4249, 9671, 17041, 2223, -3175, 699, 2137, 1722, 1950, -1749, 877, 16200, -507, 21000, 15506, -1138, 9546, 1985, -623, 1989, 12332, 10022, 4687, 2179, 8667, 7787, -458, -10163, 716, -1982, -2741, -2351, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00030005795997567475, 0.0003870515211019665, 0.00020200475410092622, 0.00023443758254870772, 0.00028900511097162962, 0.00032400141935795546, 0.0001803751802071929, 0.00029449391877278686, 0.00013053262955509126, 0.00032566295703873038, 0.00013054309238214046, 0.00018646656826604158, 0.00019155841437168419, 0.0011251789983361959, 0.00021020797430537641, 0.00014697398000862449, 8.1585349107626826e-05, 0.00017334794392809272, 0.00036778606590814888, 0.00018118314619641751, 8.6149950220715255e-05, 0.00011352598085068166, 0.0001475306780776009, 6.8283923610579222e-05, 0.00012705039989668876, 0.00034036114811897278, 0.00060954957734793425, 0.0002358953352086246, 0.00017143096192739904, 0.00032139522954821587, 0.00015683136007282883, 0.00020839196804445237, 0.00019422845798544586, 0.00014002126408740878, 0.00033221655758097768, 0.00026861065998673439, 0.0001167950322269462, 0.0001393278653267771, 0.00030762318056076765, 0.00033081113360822201, 0.0001012834400171414, 0.00044367695227265358, 0.00024998324806801975, 0.00015122983313631266, 0.00036714677116833627, 0.0001795558346202597, 0.00018582973279990256, 0.0002803638344630599, 0.00029998956597410142, 0.00026710052043199539, 0.00016184712876565754, 0.00014004803961142898, 0.00043894417467527092, 0.00012057488493155688, 0.00022612765314988792, 0.0003692815953399986, 0.00039130719960667193, 0.00021801899129059166, 0.00025515374727547169, 0.00014999033010099083, 0.00068492413265630603, 0.00027163611957803369, 0.00016615893400739878, 0.00032726192148402333, 0.00043611624278128147, 0.00019788119243457913, 0.00012678661732934415, 0.0001714146783342585, 0.00036993893445469439, 0.00045787598355673254, 0.0001849099644459784, 0.00030207305098883808, 0.00069966207956895232, 0.00023942039115354419, 0.00022913338034413755, 0.00013320849393494427, 0.00023043804685585201, 8.9136286987923086e-05, 0.00011670740059344098, 0.00017859126091934741, 0.00015291222371160984, 0.00017073118942789733, 0.00013030937407165766, 0.00011812709271907806, 0.00014899046800564975, 0.00023697996221017092, 0.00050288281636312604, 0.00013341830344870687, 8.3101207565050572e-05, 0.00026198694831691682, 0.00020678617875091732, 0.00019341430743224919, 0.00029333127895370126, 0.0005150550277903676, 0.00022373038518708199, 0.00017872796161100268, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 11,52,24,-87,-81,7,-10,63,-23,-43,-124,-96,-103,106,-63,58,32,83,17,-3,-47,-108,-46,18,91,-111,-6,101,51,-81,64,-6,-84,82,23,-71,-34,4,-99,-27,-109,-52,101,-79,61,-26,-91,97,-112,90,-94,17,-30,75,-5,47,-78,-93,-6,28,-25,83,28,-127,62,-124,-109,45,44,-90,-15,111,-66,28,-54,105,-54,-65,-38,-23,-117,44,60,25,-52,-78,-61,-56,21,32,24,61,-102,-96,-59,44, 
  /* [1][0][][] */ 66,14,89,38,23,-57,0,126,26,60,-82,92,-124,-112,33,-81,-38,-42,29,-15,100,92,-75,-72,49,1,-39,-48,119,62,-27,-74,-86,-94,-94,-65,57,-73,-29,15,1,109,-11,36,40,-3,-46,56,18,-92,-8,-52,12,-120,-45,-107,39,41,125,12,59,-73,-42,-24,127,-18,3,93,96,92,74,114,-7,28,64,41,65,-55,124,-19,-86,108,-77,78,32,21,-113,27,-60,-70,91,-37,-45,38,38,17, 
  /* [2][0][][] */ 10,-62,-84,-114,-33,18,82,9,34,-42,-59,-58,54,87,-64,-109,-99,44,-59,42,-87,-49,35,35,-71,79,-38,-60,-34,-25,-78,41,55,-62,52,5,-86,30,-70,77,68,-26,120,89,-57,-11,61,27,-12,-76,12,103,-96,-71,8,-82,-39,32,72,125,109,84,-58,106,122,103,-70,-75,5,18,74,-17,43,17,-23,-67,106,124,-97,-71,-81,123,89,42,-67,47,51,42,81,90,79,127,-45,-27,92,73, 
  /* [3][0][][] */ -72,110,74,-86,97,106,76,77,92,18,41,-31,100,39,117,103,-85,70,-16,107,-57,79,-61,7,100,89,-98,43,84,41,-32,100,-76,29,29,-66,-63,-33,-64,-47,-81,-42,-61,35,-61,-97,-21,-15,-40,127,-26,-91,26,47,106,-51,-85,-95,70,-85,-77,58,-76,-12,16,82,-43,-20,-5,-41,98,7,89,96,-23,-65,-112,-32,81,-64,54,97,-59,-87,75,-93,99,-89,-24,-102,122,90,-78,-19,37,-24, 
  /* [4][0][][] */ -102,21,86,-16,57,14,-34,-42,13,65,-113,-57,-71,91,22,-108,86,36,-12,-83,-100,73,-118,-37,-35,-127,86,63,39,-119,114,24,-104,40,-53,-54,103,-26,-121,-108,100,89,-108,-114,-23,84,-50,-39,117,-3,108,106,107,-122,-10,32,-114,-29,101,-61,77,-2,-26,94,-55,22,-120,-87,24,99,44,-13,-69,-12,43,-75,-35,87,-47,36,25,-117,45,-2,46,111,7,-74,-36,-20,125,56,92,4,-116,-105, 
  /* [5][0][][] */ -105,105,-55,-62,21,-26,-57,60,-25,-99,48,33,-82,24,101,101,-127,114,103,-19,104,1,-63,103,-126,40,-47,-62,-30,26,57,-9,-81,62,66,51,103,-71,-67,-51,73,-14,-23,-69,96,110,-1,-17,16,116,95,43,-84,-54,39,-49,121,-52,-78,64,50,69,-17,60,72,-69,39,43,95,-74,48,-2,-116,79,17,-100,-66,56,24,-4,69,107,-103,-56,42,-42,-104,-23,75,102,-35,110,-29,96,-8,100, 
  /* [6][0][][] */ 104,-29,24,-107,-95,-9,50,-107,17,74,22,119,45,-82,-30,111,-76,88,68,107,-125,108,87,25,-53,35,-123,-83,-38,-107,-6,41,-104,7,61,75,-108,-63,36,52,-104,34,73,-8,-119,76,-111,-32,55,127,-15,-30,-57,-120,-76,-98,-80,-18,2,81,46,-33,84,3,121,83,-29,44,11,-74,-52,-29,57,-56,116,110,-54,48,-60,-90,17,-30,-46,-110,71,-13,-17,115,-22,-113,-71,-46,-91,31,96,-91, 
  /* [7][0][][] */ 77,42,-32,-98,101,-9,-20,-46,27,-65,-2,-17,-44,105,98,61,79,4,-30,58,73,-80,-4,-45,105,-58,57,118,-57,-19,-6,18,-102,-31,67,-33,117,4,7,-83,-90,39,-57,81,18,-50,-74,-45,61,-18,-24,102,-43,43,62,34,57,-104,4,-92,24,-41,-34,-36,2,-45,-90,-85,42,-97,-104,12,-90,71,-5,69,-58,-32,-60,-3,-90,42,9,68,-50,-65,-21,-66,48,110,127,-68,34,-68,87,-94, 
  /* [8][0][][] */ -44,-59,-104,9,60,-23,-9,-82,99,-114,127,-117,-15,-83,-105,3,4,84,52,-72,102,70,89,-41,-63,-104,20,-106,-95,-83,-99,7,-52,4,-76,102,-124,-88,-48,-55,-11,34,56,-26,-1,-46,-16,100,61,66,-25,-18,97,27,-3,-81,9,2,-18,15,-82,-35,-93,81,-10,-27,14,-53,-94,38,-102,61,44,88,90,87,97,-15,-2,-16,44,110,4,69,74,-56,-16,82,65,63,-79,80,-104,89,120,-52, 
  /* [9][0][][] */ -26,-31,28,89,41,69,99,44,23,58,82,60,115,68,-23,-16,-8,-56,-75,-74,-87,95,30,-16,-75,-56,-39,47,61,-113,-24,64,-91,-60,125,-25,-35,7,-67,-60,122,106,9,17,53,71,40,-17,-20,-63,-98,-57,-121,40,35,87,3,-72,15,16,8,-81,46,92,-123,92,84,78,107,-64,-111,25,62,33,61,-109,127,-67,24,-43,-111,-34,96,-76,72,-65,-87,31,-68,107,30,21,-79,32,41,61, 
  /* [10][0][][] */ -88,37,-47,-90,-41,102,-110,-91,62,-91,67,78,-12,21,57,-10,100,5,-40,26,-14,-58,-39,67,26,87,-33,4,-70,-72,-17,-100,51,24,85,-100,118,-78,41,92,66,18,20,46,-19,17,-10,-8,-79,127,73,88,114,-92,75,43,15,-17,63,-12,57,82,79,47,-41,84,-4,41,15,-18,66,18,-92,-98,49,54,55,87,62,-2,-7,26,0,16,7,59,-79,17,-17,24,-21,70,38,63,12,-22, 
  /* [11][0][][] */ 81,67,-38,-92,93,13,-44,-85,-98,51,42,25,25,-81,60,-85,-102,73,-3,-59,-51,-34,82,-78,-88,99,72,122,39,40,1,35,57,82,-107,-74,40,118,-49,-79,50,-115,112,-110,91,24,-110,-15,52,125,-73,89,96,-85,-47,-99,-15,76,-72,80,-44,38,117,-44,58,-36,108,-7,92,109,-32,18,-97,-43,51,-68,-18,101,-80,-14,-100,-24,-127,95,1,-79,-51,-35,-90,43,-8,-64,82,60,113,22, 
  /* [12][0][][] */ -85,-44,-92,120,7,-48,-67,-90,-24,3,-58,41,-83,-102,-59,70,33,-49,29,119,-107,-41,65,47,-18,94,-94,-3,105,-95,82,78,31,-42,-8,-87,2,-102,75,65,86,89,47,-94,27,-18,-75,86,-98,107,-61,59,-66,-119,90,42,-1,-93,-97,-111,53,-35,117,-22,-86,-10,-2,-73,-127,-121,39,-28,-124,-80,-21,-26,-123,-26,86,-65,21,83,102,-17,67,-80,-21,-80,-84,-100,-3,2,-116,-99,-125,90, 
  /* [13][0][][] */ 44,40,83,-65,85,46,30,-50,12,-99,30,32,-10,73,34,63,81,43,29,69,96,-11,-2,-66,78,-71,-3,-46,51,-94,-48,-18,-9,-99,35,-4,74,-99,71,34,-18,-62,60,79,46,-15,52,64,-81,100,-55,-6,-13,-92,-3,78,28,-54,73,-57,-102,17,67,-32,-85,27,-30,-99,-77,-55,-76,78,-41,-21,113,-18,-35,92,-13,-53,65,35,-10,95,85,-39,-99,61,-49,-54,55,-38,52,127,-31,-48, 
  /* [14][0][][] */ -38,-81,75,65,62,-90,20,-5,-1,74,-28,-77,7,115,-30,43,-113,-26,-38,-95,-5,39,-62,-38,-35,-28,71,5,63,-77,81,-37,-39,103,125,10,11,80,-91,-90,113,123,118,26,82,-68,1,-58,-114,-3,-23,-60,-26,-111,92,-119,37,-86,-43,-97,-90,-123,27,13,2,68,3,-8,-127,-11,35,-57,-104,-73,34,-29,-85,-28,72,9,123,-27,112,45,-76,-59,-65,82,55,-7,-87,-22,-12,-101,-69,-56, 
  /* [15][0][][] */ 31,60,-13,-67,-108,89,16,60,-117,-41,115,-52,-29,-51,-41,-36,-30,103,-118,26,-22,-87,-56,-25,-5,0,111,103,-21,-77,-115,31,69,114,-41,-19,-44,115,-35,-91,-58,127,117,-57,95,63,-75,-92,38,-50,-32,-90,-88,0,42,23,36,-12,107,-54,-109,-112,-98,-57,-45,37,-15,-75,-27,-77,-104,18,78,58,-6,78,-28,103,-104,-30,-20,-66,-47,-50,-46,-33,114,-33,68,-98,-105,108,1,-44,125,-72, 
  /* [16][0][][] */ 3,32,-101,127,93,-78,110,113,-29,49,95,-69,-50,96,-107,-20,40,91,-83,-18,-105,-13,-94,24,114,-55,-66,-4,-61,108,120,46,-75,-35,25,19,-16,102,-111,74,57,43,89,-45,-84,-2,-88,-51,-15,18,104,79,-63,-107,68,18,44,102,-36,-56,50,-51,8,70,-3,43,78,-33,4,-47,77,26,88,7,31,-75,92,-49,-84,-43,-18,36,0,-93,103,-54,10,-99,119,-83,67,-96,56,21,84,-89, 
  /* [17][0][][] */ -18,88,-110,-29,-33,32,-39,95,31,-34,99,-22,-43,102,32,-56,26,77,-54,54,22,-12,-53,-11,-109,-3,-35,-96,-55,33,62,-95,50,-36,-41,42,30,-51,-26,40,-37,115,-20,-75,100,25,-75,-97,22,-127,-11,-107,-85,12,37,18,-57,82,-64,-59,101,70,61,69,-60,38,-88,62,-70,-60,14,-32,-32,-42,-25,47,-109,-54,109,-92,-54,0,93,-44,76,38,-40,101,17,120,-60,57,-91,-70,75,-37, 
  /* [18][0][][] */ 71,-117,-104,-18,58,45,-119,-101,-59,42,-89,-74,-6,93,20,33,20,87,-69,-46,-90,50,23,34,23,-28,35,-80,-2,-127,28,-122,-31,81,115,-63,38,-45,-64,-87,-108,22,113,-68,-29,38,92,-61,86,42,-56,-100,-21,-6,-42,28,90,21,-112,61,-105,7,62,108,-20,20,-98,-114,102,-38,-68,87,-108,107,30,122,21,92,-15,-23,-66,-51,-104,94,3,-70,97,10,69,23,-17,112,-101,-8,-5,-118, 
  /* [19][0][][] */ 58,69,-106,74,101,65,-69,-7,88,-50,-4,-50,57,77,122,-58,41,-103,-54,107,-96,-82,35,115,59,-10,26,-41,71,31,106,-127,62,-33,-103,91,-110,-32,-78,10,60,33,58,44,-36,40,-117,107,123,17,75,-37,48,-95,81,115,46,2,-103,-59,-47,56,101,-52,88,-19,-72,82,114,-5,-104,-2,10,79,8,102,-2,93,-91,125,-112,-65,112,-107,38,4,91,-91,-81,-10,-40,2,-35,-56,78,-114, 
  /* [20][0][][] */ -11,-81,-2,50,83,52,70,38,-52,-62,14,20,-27,-78,-2,-84,2,-53,127,32,48,-101,91,-24,-92,94,-75,45,34,-70,-46,2,35,85,70,-56,120,11,-94,15,83,-101,-80,-24,37,12,-41,-41,68,22,97,-72,33,77,20,-82,-52,-108,65,17,-34,111,59,68,24,84,28,-72,36,71,-58,18,-88,-87,-7,113,-11,-60,34,-67,10,85,74,-49,45,12,-68,-102,98,9,-71,-77,53,-25,21,60, 
  /* [21][0][][] */ 80,108,102,-68,-21,-59,-72,-36,-17,102,32,-93,-47,-61,-82,-83,-28,-12,-84,-89,-25,58,109,-41,101,39,81,-26,-68,-85,104,14,-83,35,92,105,-108,-67,-95,30,13,56,-32,23,-61,98,-105,67,69,-127,1,-56,52,-37,-100,-52,-24,-54,74,92,22,-53,6,62,-35,54,-58,6,-14,-47,-6,14,-26,-83,-67,11,-73,106,113,92,-31,104,4,-8,-103,-52,27,39,-35,53,-80,90,-20,-82,108,-25, 
  /* [22][0][][] */ -38,-72,66,-44,-94,-120,106,65,44,-31,-38,17,-85,30,-39,-125,-121,-15,-93,86,45,119,-28,81,-109,46,-84,80,-45,-91,-79,-93,-102,119,40,42,20,-116,-81,-77,-37,-13,-90,-10,67,-56,118,-82,-87,-8,-111,80,-95,117,-17,53,109,102,-99,89,-82,-12,-12,21,92,-125,-108,-30,65,110,-112,-43,2,97,-86,-35,-118,-116,56,-50,105,-96,-113,-62,43,82,-43,114,26,100,127,17,-124,96,99,89, 
  /* [23][0][][] */ -35,-13,-16,-35,-89,-12,61,12,20,-105,59,-127,-122,85,65,-46,8,43,46,27,48,97,51,-7,54,-51,-72,-93,-121,83,-6,119,78,-63,107,-36,-29,112,71,-80,119,45,99,-103,-97,-2,-94,101,23,66,-48,-11,-108,116,71,9,34,-4,52,-29,-49,27,85,-119,111,-97,7,-12,67,109,-93,112,102,44,-4,-67,-113,0,-96,-20,-110,13,-104,-80,-54,-117,112,-115,-43,-76,-59,-72,8,-73,-74,119, 
  /* [24][0][][] */ -13,89,113,98,62,-27,-117,101,-11,-107,-92,92,16,-7,-15,-72,-24,34,-53,80,114,-32,-30,27,-34,59,-78,-51,89,111,95,-34,115,-55,-21,-26,20,-52,-93,-98,-2,105,-90,40,-55,70,45,-76,-102,-55,22,-29,-57,74,110,-53,58,-53,-18,-33,104,48,48,-25,-127,-15,-73,108,71,-87,-22,26,-11,-114,-8,-42,18,-61,-39,67,62,-57,50,-57,-90,-77,-24,-71,-95,75,-48,-34,-77,-78,67,113, 
  /* [25][0][][] */ -29,-8,-18,69,1,32,-104,40,-30,64,56,52,-102,71,84,-110,-56,-24,-73,11,61,99,-41,89,37,-78,-76,-57,86,68,-108,60,-94,-81,93,116,-122,52,-109,112,-112,103,64,-2,-13,-97,-118,-123,-54,27,-100,-58,-16,-16,-127,-98,33,-43,114,12,-85,120,-105,33,-92,-101,-106,94,22,4,20,58,2,70,-13,-14,14,-20,23,-110,-99,-14,-70,36,85,5,-40,39,-117,97,-45,-21,-27,106,99,64, 
  /* [26][0][][] */ 85,-75,-14,3,91,-118,111,-33,56,-25,-79,-6,-36,-58,45,-14,103,20,-107,-67,57,-45,75,100,1,-24,56,18,4,4,-41,-30,-22,59,52,120,-11,102,-115,117,106,17,-20,-91,3,63,127,18,27,26,99,-11,76,110,74,42,92,12,-56,-10,27,88,-77,-111,62,-19,-102,-22,-5,-45,32,50,-101,-57,-110,-75,-9,23,-14,66,117,26,-41,-12,-3,-34,-2,-80,35,26,62,119,-40,58,57,-37, 
  /* [27][0][][] */ 46,35,-81,100,-28,-13,-2,-8,-91,80,-34,6,-110,61,68,-51,40,-112,19,-107,-30,45,74,-88,-109,59,-45,75,102,-64,51,-116,95,-87,25,92,114,45,-63,-46,23,43,-31,51,54,-92,89,-70,-24,-33,48,78,127,46,-115,-90,95,-36,-31,7,25,-47,-109,-91,21,94,20,-95,37,-12,40,-104,13,-78,27,-73,-86,-2,60,14,-63,-82,75,-5,-105,-91,46,-38,95,9,73,92,76,30,53,-98, 
  /* [28][0][][] */ -120,110,-46,70,6,96,-112,-12,47,-71,-106,84,58,-81,14,-107,-72,67,56,85,90,68,6,-92,62,-73,70,127,-41,13,-28,30,-25,10,-42,-60,41,90,-41,110,-101,-34,-14,58,98,99,-23,-2,106,19,-120,-2,72,-50,15,54,91,37,44,80,36,-14,-3,-117,-84,-14,84,-53,-87,52,69,104,-116,48,127,27,53,-43,-18,71,-77,57,51,-34,47,9,-81,-71,-101,10,102,-93,42,58,-23,96, 
  /* [29][0][][] */ 23,-23,39,24,-33,7,26,-120,-62,-31,-54,-91,62,-20,-84,-25,98,100,-77,111,32,-75,-96,-95,94,-68,-112,-52,-50,97,-70,30,-109,127,117,-2,-28,-100,28,-34,121,-55,-26,41,-87,67,-122,1,-44,76,25,50,-88,-14,95,87,48,-29,-75,9,127,111,-76,42,85,-90,-125,33,76,-18,-38,-65,-28,-127,-27,-100,-64,37,3,66,-6,-46,22,-31,27,-121,-85,97,-18,39,-77,-62,-116,-11,-71,-80, 
  /* [30][0][][] */ -89,-87,-87,-57,51,77,56,-8,-79,23,27,55,73,60,-96,-111,96,113,56,0,-8,-70,122,-70,4,60,-22,-6,69,-54,9,34,1,-35,11,31,-87,-33,72,-23,-8,-90,-64,-81,85,114,-36,-29,-59,90,-106,-51,-127,-30,95,-92,78,52,-1,-6,-47,-121,38,71,95,94,32,63,82,79,102,-89,36,-110,-101,27,50,-23,-2,-37,53,50,100,36,82,-55,68,36,108,42,31,-127,8,65,-70,-73, 
  /* [31][0][][] */ 30,104,47,-35,-59,-9,81,-73,-67,-47,49,-58,-68,-71,77,15,0,42,-45,22,-19,-34,79,3,48,81,-33,-68,-30,64,47,54,54,27,48,93,34,91,-20,-70,-5,85,-72,26,24,83,38,5,-87,-40,-50,50,10,-73,-8,13,2,27,33,90,-3,-127,93,-92,16,-77,63,-55,-91,32,88,-28,62,-59,-49,44,-6,64,45,-70,-4,-15,-87,-71,-26,61,99,-87,-55,72,9,-24,-46,-38,-92,61, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0018187122186645865, 0.0017789656994864345, 0.0017404633108526468, 0.0019208152079954743, 0.0017679400043562055, 0.0017896400531753898, 0.0017421604134142399, 0.0019973388407379389, 0.0018776438664644957, 0.0016576312482357025, 0.0020673107355833054, 0.0017292969860136509, 0.0017297652084380388, 0.002115653594955802, 0.0017643475439399481, 0.0017685550265014172, 0.00182097137439996, 0.0018898367416113615, 0.0017847022973001003, 0.001709411502815783, 0.0020799939520657063, 0.0019384442130103707, 0.0017649000510573387, 0.0017954190261662006, 0.0017752696294337511, 0.0017473072512075305, 0.0018118956359103322, 0.0019778513815253973, 0.0018528826767578721, 0.0016836435534060001, 0.0018588330131024122, 0.002123567508533597, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -372, 241, 229, 136, -139, -320, -79, 200, 295, 283, -276, 184, -128, 63, 108, 228, 328, 272, -155, -105, -165, 142, -91, -24, -339, -394, 283, -262, -248, 63, 313, -183, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.2793228203663602e-05, 4.1858016629703343e-05, 4.095207987120375e-05, 4.5195651182439178e-05, 4.1598588722990826e-05, 4.2109179048566148e-05, 4.0992010326590389e-05, 4.6996210585348308e-05, 4.417985473992303e-05, 3.9003087294986472e-05, 4.864260699832812e-05, 4.068934140377678e-05, 4.0700357203604653e-05, 4.9780086555983871e-05, 4.151406028540805e-05, 4.1613060602685437e-05, 4.2846386349992827e-05, 4.446674938662909e-05, 4.1992996557382867e-05, 4.0221446397481486e-05, 4.894103403785266e-05, 4.5610453526023775e-05, 4.1527062421664596e-05, 4.2245155782438815e-05, 4.1771050746319816e-05, 4.1113111365120858e-05, 4.263284063199535e-05, 4.6537679736502469e-05, 4.3597239709924906e-05, 3.9615144487470388e-05, 4.3737247324315831e-05, 4.9966296501224861e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[4*1*1*32] = { 
  /* [0][0][][] */ -45,-38,86,114,56,-111,81,127,-108,70,89,109,-41,20,-87,18,-19,4,4,77,4,33,-3,-62,95,-11,-51,57,-70,18,59,-41, 
  /* [1][0][][] */ 91,-114,20,20,74,-90,-64,36,-94,109,-69,-15,106,-97,65,116,34,-59,-76,-50,-31,69,91,122,-108,82,127,-75,-15,-81,-42,-43, 
  /* [2][0][][] */ -18,-88,10,2,-104,-60,-33,-21,17,21,-41,-67,97,-127,-92,19,112,58,-124,95,-35,23,-54,-35,53,-107,118,-43,-120,111,110,115, 
  /* [3][0][][] */ 125,-83,110,-54,-107,64,2,91,101,82,3,32,-7,-97,98,-127,12,57,53,-21,-17,73,-68,45,-60,-82,39,37,-72,110,-27,-118, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant42_scale = { 4, { 0.003470792667940259, 0.0032141194678843021, 0.0030135598499327898, 0.0031147522386163473, } };
const TfArray<4, int> quant42_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int32_t tensor_data43[4] = { 23240, -34454, -37570, -34148, };
const TfArray<1, int> tensor_dimension43 = { 1, { 4 } };
const TfArray<4, float> quant43_scale = { 4, { 0.00013370976375881582, 0.00012382162094581872, 0.00011609520151978359, 0.00011999356502201408, } };
const TfArray<4, int> quant43_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,20,20,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.36603999137878418, } };
const TfArray<1, int> quant46_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,20,20,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,21,21,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,10,10,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.36039397120475769, } };
const TfArray<1, int> quant50_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,10,10,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.40359678864479065, } };
const TfArray<1, int> quant53_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,10,10,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.53543001413345337, } };
const TfArray<1, int> quant54_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,11,11,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,5,5,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,5,5,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.20087058842182159, } };
const TfArray<1, int> quant58_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,5,5,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,5,5,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,5,5,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.14735670387744904, } };
const TfArray<1, int> quant61_zero = { 1, { -32 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,5,5,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.26634031534194946, } };
const TfArray<1, int> quant62_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,5,5,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,5,5,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,5,5,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.14352653920650482, } };
const TfArray<1, int> quant65_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,5,5,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.33974486589431763, } };
const TfArray<1, int> quant66_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,5,5,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,5,5,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.038524273782968521, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,5,5,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.057960793375968933, } };
const TfArray<1, int> quant69_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,5,5,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6400, (TfLiteIntArray*)&tensor_dimension44, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6400, (TfLiteIntArray*)&tensor_dimension46, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21168, (TfLiteIntArray*)&tensor_dimension47, 19200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 21168, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21168, (TfLiteIntArray*)&tensor_dimension49, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 10464, (TfLiteIntArray*)&tensor_dimension50, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4800, (TfLiteIntArray*)&tensor_dimension51, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4800, (TfLiteIntArray*)&tensor_dimension53, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5808, (TfLiteIntArray*)&tensor_dimension55, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 5808, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5808, (TfLiteIntArray*)&tensor_dimension57, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 7008, (TfLiteIntArray*)&tensor_dimension58, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension59, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension61, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6528, (TfLiteIntArray*)&tensor_dimension62, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension63, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2800, (TfLiteIntArray*)&tensor_dimension65, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension66, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension68, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension69, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
