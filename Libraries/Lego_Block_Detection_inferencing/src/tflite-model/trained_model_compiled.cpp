/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 11.04.2023 17:47:01

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 55888;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,40,40,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -86, -111, -30, 
  /* [0][1][][] */ 66, -38, 17, 
  /* [0][2][][] */ 31, 127, 19, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 104, 23, 
  /* [1][2][][] */ 14, -1, -12, 
  /* [2][0][][] */ -23, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 121, 127, 58, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 21, -56, 3, 
  /* [4][1][][] */ 18, -127, 5, 
  /* [4][2][][] */ 14, -78, -7, 
  /* [5][0][][] */ -68, 22, -3, 
  /* [5][1][][] */ -127, 28, 2, 
  /* [5][2][][] */ -87, 21, -1, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -51, 55, -16, 
  /* [6][2][][] */ -36, -52, -88, 
  /* [7][0][][] */ 37, 21, -26, 
  /* [7][1][][] */ 127, 70, -12, 
  /* [7][2][][] */ 33, 5, -25, 
  /* [8][0][][] */ -21, -31, 52, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -27, -62, 96, 
  /* [9][0][][] */ -19, 54, -11, 
  /* [9][1][][] */ -13, 127, -13, 
  /* [9][2][][] */ -5, 91, -7, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 10, 
  /* [11][1][][] */ 64, -93, 35, 
  /* [11][2][][] */ -84, 127, -46, 
  /* [12][0][][] */ -41, 50, -10, 
  /* [12][1][][] */ -127, 115, 6, 
  /* [12][2][][] */ -78, 80, 5, 
  /* [13][0][][] */ 85, 33, 7, 
  /* [13][1][][] */ 127, 114, 14, 
  /* [13][2][][] */ 50, 81, 39, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 99, -127, 
  /* [14][2][][] */ -15, -69, 82, 
  /* [15][0][][] */ -90, -32, 26, 
  /* [15][1][][] */ -127, -112, 27, 
  /* [15][2][][] */ -13, -57, 5, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.040796644985675812, 0.41460108757019043, 0.033592097461223602, 0.031269103288650513, 0.0055103595368564129, 0.0072322720661759377, 0.024755217134952545, 0.0055484725162386894, 0.023875519633293152, 0.007235012948513031, 0.093030944466590881, 0.28935801982879639, 0.16967958211898804, 0.0035538976080715656, 0.21092382073402405, 0.0088427634909749031, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 3283, -109, -629, -649, 78500, 67323, 6578, 7452, 10928, 929, 1219, -194, 2630, -27249, -556, 52443, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00015998685557860881, 0.0016258867690339684, 0.00013173373008612543, 0.00012262394011486322, 2.1609253963106312e-05, 2.8361853765090927e-05, 9.707928984425962e-05, 2.1758716684416868e-05, 9.3629496404901147e-05, 2.837260217347648e-05, 0.00036482725408859551, 0.0011347373947501183, 0.00066541018895804882, 1.3936853974882979e-05, 0.00082715228199958801, 3.4677505027502775e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 3,-3,12,8,-18,12,5,16,-4,-12,-2,-10,-2,-9,4,3, 6,-7,9,12,14,-1,14,-26,-12,8,-7,102,-9,20,7,3, 3,-3,-1,4,4,-12,-5,12,3,1,-6,-10,0,-3,-3,1, 
  /* [0][1][][] */ 12,-16,3,2,127,-22,-127,-20,127,127,-1,-11,101,-27,-5,-16, -127,127,127,-4,-86,-89,-10,-101,14,-107,127,127,127,127,127,127, 21,-5,-7,-2,-9,127,6,-9,-2,-13,-6,-10,7,-5,-17,-8, 
  /* [0][2][][] */ 2,-1,0,-10,-15,16,55,7,-12,-9,-5,-4,-7,-2,-10,-10, 21,-18,-4,-127,9,-15,-9,127,-11,0,-1,-20,-10,-61,-11,-36, 4,-5,-2,2,4,-4,1,-1,-2,1,-7,-4,-3,-7,-12,-11, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0097828991711139679, 0.012927250005304813, 0.0055232304148375988, 0.0065390444360673428, 0.036910496652126312, 0.034136541187763214, 0.0067829233594238758, 0.033602088689804077, 0.028061583638191223, 0.048799749463796616, 0.025255823507905006, 0.011339524760842323, 0.0050816456787288189, 0.01316683366894722, 0.011242605745792389, 0.022553972899913788, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { 10738, -423, 114, 2236, -1418, 88, 9758, 1383, -2112, 669, -2233, 2505, -146, -590, -244, -1413, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.00023018586216494441, 0.00030417059315368533, 0.00012995836732443422, 0.00015385987353511155, 0.00086848228238523006, 0.00080321275163441896, 0.00015959820302668959, 0.00079063739394769073, 0.00066027254797518253, 0.0011482294648885727, 0.0005942546995356679, 0.00026681236340664327, 0.00011956813250435516, 0.00030980785959400237, 0.00026453190366737545, 0.00053068174747750163, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ -9,-11,-15,-68,-23,-31,14,-23,43,9,-31,-1,114,127,-15,-105, 
  /* [1][0][][] */ 127,-57,-41,11,-43,72,-71,-47,-36,79,-38,-53,-4,1,-59,-17, 
  /* [2][0][][] */ -34,-104,46,34,46,-59,-83,-27,37,-94,26,-127,48,-22,-77,21, 
  /* [3][0][][] */ 34,13,16,25,-10,75,-52,-15,127,47,8,22,-2,-16,8,24, 
  /* [4][0][][] */ -84,-31,-20,-127,-6,41,47,-120,31,-17,-44,-34,-113,26,-33,-19, 
  /* [5][0][][] */ 100,55,58,-24,39,-52,-127,-120,-13,-83,72,53,-51,53,61,-52, 
  /* [6][0][][] */ 95,38,-127,-64,20,-72,9,-79,-41,15,-119,97,91,-87,5,68, 
  /* [7][0][][] */ -127,1,99,-29,-64,4,0,-61,-55,64,93,-31,59,-26,30,30, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0095801586285233498, 0.014095967635512352, 0.0094306217506527901, 0.012171365320682526, 0.011843960732221603, 0.0084533598273992538, 0.0092221032828092575, 0.016355521976947784, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -8320, -3499, 12058, -10102, 21413, 6228, -8822, 12025, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00022541549697052687, 0.00033166984212584794, 0.00022189698938746005, 0.00028638506773859262, 0.0002786814293358475, 0.0001989025913644582, 0.00021699066564906389, 0.00038483581738546491, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -35,30,-1,-18,-71,-38,-127,19, 
  /* [1][0][][] */ 64,-59,-51,-57,127,-77,95,13, 
  /* [2][0][][] */ -110,115,-52,-127,39,-25,-18,46, 
  /* [3][0][][] */ 34,14,83,10,92,123,127,-6, 
  /* [4][0][][] */ -67,-127,62,10,-61,-119,6,-31, 
  /* [5][0][][] */ 127,-22,71,65,-68,-8,-7,-22, 
  /* [6][0][][] */ 27,40,127,-21,46,-33,-39,28, 
  /* [7][0][][] */ 32,5,-127,-39,-54,93,106,-84, 
  /* [8][0][][] */ -8,127,-42,4,71,112,55,55, 
  /* [9][0][][] */ -13,86,-70,80,14,-90,38,127, 
  /* [10][0][][] */ -2,-126,-3,-23,-73,-127,-57,-72, 
  /* [11][0][][] */ -127,-72,103,38,1,-68,83,57, 
  /* [12][0][][] */ -31,47,-127,82,44,-58,-68,106, 
  /* [13][0][][] */ 90,-127,93,78,2,33,37,-56, 
  /* [14][0][][] */ -21,77,-33,-126,-29,-127,-14,-66, 
  /* [15][0][][] */ 41,108,32,-12,31,-58,103,-127, 
  /* [16][0][][] */ -112,-127,-67,95,-63,27,-21,71, 
  /* [17][0][][] */ -20,-105,-127,92,-64,84,-53,66, 
  /* [18][0][][] */ -99,-86,-50,91,-23,68,-14,127, 
  /* [19][0][][] */ 58,-117,88,-127,28,-73,30,-27, 
  /* [20][0][][] */ 1,77,33,21,35,127,80,-12, 
  /* [21][0][][] */ 32,120,51,-30,44,-73,101,-127, 
  /* [22][0][][] */ 36,4,106,13,-17,127,27,-35, 
  /* [23][0][][] */ -102,-73,39,-71,106,126,-76,-127, 
  /* [24][0][][] */ -86,-74,46,-93,98,86,-51,-127, 
  /* [25][0][][] */ 127,11,-57,-10,13,37,-59,-7, 
  /* [26][0][][] */ -127,-33,-117,-34,-46,-34,11,-4, 
  /* [27][0][][] */ 90,36,-5,-67,-127,-29,78,90, 
  /* [28][0][][] */ -127,-80,4,40,-66,-116,6,-8, 
  /* [29][0][][] */ 116,127,39,-118,42,26,-76,-83, 
  /* [30][0][][] */ -84,-69,42,-79,91,104,-62,-127, 
  /* [31][0][][] */ 44,43,-8,127,8,-75,1,13, 
  /* [32][0][][] */ -32,127,-6,41,21,62,-8,44, 
  /* [33][0][][] */ -41,127,-64,25,19,-26,-14,-4, 
  /* [34][0][][] */ -127,-116,-52,119,-14,20,26,99, 
  /* [35][0][][] */ -57,127,-35,-5,72,111,54,78, 
  /* [36][0][][] */ 69,29,2,-44,-127,-34,96,97, 
  /* [37][0][][] */ -64,114,34,19,-127,106,-14,-110, 
  /* [38][0][][] */ 37,35,40,10,127,73,100,53, 
  /* [39][0][][] */ -22,-68,41,-14,11,46,-94,127, 
  /* [40][0][][] */ -71,-66,-73,127,-32,0,8,60, 
  /* [41][0][][] */ 127,8,48,126,-56,-6,-1,-25, 
  /* [42][0][][] */ -41,5,-78,-127,50,-106,3,88, 
  /* [43][0][][] */ 32,-9,81,-2,31,127,94,0, 
  /* [44][0][][] */ -26,-25,-65,127,44,4,-45,-45, 
  /* [45][0][][] */ 78,113,127,-126,49,-72,39,-114, 
  /* [46][0][][] */ -40,-127,-43,34,-10,40,-62,123, 
  /* [47][0][][] */ 46,27,102,2,85,123,127,-42, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0060984492301940918, 0.0049293823540210724, 0.0033521472942084074, 0.004911279771476984, 0.00084397976752370596, 0.003494038712233305, 0.0043966062366962433, 0.0016049819532781839, 0.0034612622112035751, 0.0078165698796510696, 0.0037406524643301964, 0.0030716953333467245, 0.002701491815969348, 0.0045132883824408054, 0.00327730318531394, 0.0029462501406669617, 0.002273705555126071, 0.00084577157394960523, 0.0021895281970500946, 0.003671965328976512, 0.0047860215418040752, 0.0016244073631241918, 0.0058317356742918491, 0.0031625793781131506, 0.0055343820713460445, 0.0071620196104049683, 0.0035283856559544802, 0.0077431825920939445, 0.0027454926166683435, 0.00073483795858919621, 0.0032713452819734812, 0.007291711401194334, 0.0041901129297912121, 0.005009808111935854, 0.0024162041954696178, 0.0035795231815427542, 0.0042104949243366718, 0.0066152694635093212, 0.005600424949079752, 0.0044514727778732777, 0.0030587217770516872, 0.0030349206645041704, 0.00401660380885005, 0.0062980763614177704, 0.0049510607495903969, 0.0019196369685232639, 0.0024307789281010628, 0.0044826697558164597, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 607, -237, -296, 549, 8595, 1229, -423, 4332, 896, 572, 163, 2134, 687, 240, -522, 356, 2310, 7871, 2351, -641, 681, -1189, -67, 1667, -155, -520, 1146, -3, 2162, 9250, 1687, -31, 349, -27, 2124, -40, 304, -110, 467, 923, 1375, 1541, 117, -195, 464, 2052, 932, -167, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00083509902469813824, 0.00067501136800274253, 0.00045903061982244253, 0.00067253242013975978, 0.00011557146353879943, 0.00047846071538515389, 0.00060205493355169892, 0.00021978028235025704, 0.00047397240996360779, 0.001070372061803937, 0.00051223108312115073, 0.0004206265730317682, 0.0003699322696775198, 0.00061803299468010664, 0.00044878173503093421, 0.00040344856097362936, 0.00031135280732996762, 0.00011581682338146493, 0.00029982588603161275, 0.00050282530719414353, 0.00065538001945242286, 0.00022244031424634159, 0.00079857627861201763, 0.00043307189480401576, 0.00075785774970427155, 0.00098074041306972504, 0.00048316403990611434, 0.0010603227419778705, 0.00037595757748931646, 0.00010062598448712379, 0.00044796589645557106, 0.00099849991966038942, 0.00057377852499485016, 0.00068602454848587513, 0.00033086605253629386, 0.00049016665434464812, 0.00057656958233565092, 0.0009058704599738121, 0.00076690141577273607, 0.00060956820379942656, 0.00041885001701302826, 0.00041559079545550048, 0.00055001885630190372, 0.00086243520490825176, 0.00067797990050166845, 0.00026286797947250307, 0.00033286184770986438, 0.00061384018044918776, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -48,-104,-16,-27,127,-66,90,-54,-89,-93,-14,-45,115,41,75,-116,66,-25,8,-47,-68,46,-18,8,-17,91,84,-44,75,-70,7,-41,-124,-82,53,55,28,94,127,-53,-119,-11,30,86,51,-127,94,115, -69,-112,-72,52,-85,106,66,-65,-66,43,84,-110,127,89,127,-89,-76,-75,34,-59,-83,68,-69,87,-91,114,96,-122,88,-45,-3,-127,-43,-83,72,127,110,119,122,-50,-127,-89,64,99,100,97,94,80, 3,-46,-68,90,-43,-35,33,-18,93,30,61,-81,16,51,-16,-13,-84,-25,38,-57,-36,49,-82,-1,-57,60,28,-103,28,55,116,-71,-2,11,-20,48,83,52,45,-1,-17,83,58,32,54,26,22,-120, 
  /* [0][1][][] */ -104,-103,-14,-80,-77,-81,96,-119,-127,-127,90,-70,98,57,-122,-80,127,-127,-52,-69,-62,127,-46,9,-14,99,121,-60,-112,-76,-6,-48,-81,-125,-127,57,40,96,13,-90,68,-9,69,113,78,107,127,-127, -127,-127,-127,-110,-28,127,127,-127,96,65,127,-127,118,127,73,-127,41,-82,-127,-127,-127,114,-127,127,-127,127,127,-127,-127,127,-10,-113,-127,-127,41,119,127,127,-4,-127,95,-115,127,127,127,5,124,126, -54,-48,-117,127,75,-52,50,-35,64,36,9,-63,10,58,88,-64,-22,-6,-9,-68,-61,-1,-68,-10,-93,60,20,-86,-58,35,127,-78,-57,13,51,68,79,58,-10,-23,35,127,77,18,61,-40,16,22, 
  /* [0][2][][] */ -122,-28,16,43,-41,-31,12,-52,33,-51,20,-45,1,16,-37,-3,-75,-23,113,-32,26,17,-87,-23,-5,45,80,-18,36,58,-15,-1,-5,-77,-37,45,3,19,-24,-47,27,-14,23,57,37,53,17,-62, -109,-23,-31,-71,91,32,47,-68,105,18,-45,-62,-6,40,-119,-81,30,8,65,-68,-25,35,-66,40,-79,52,69,-23,40,4,-36,-33,-76,-15,-62,62,27,9,-67,-70,35,-67,82,84,35,-98,37,9, -46,-47,-43,-26,-19,-26,-6,-39,-56,14,-26,-22,-25,8,15,-28,35,25,13,-41,-35,16,-38,-29,-55,-6,14,-20,14,-69,51,-28,-92,22,28,58,14,7,-29,-36,9,43,21,25,29,-1,14,38, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0039710812270641327, 0.0037446976639330387, 0.0078557906672358513, 0.007125417236238718, 0.034766755998134613, 0.0073794154450297356, 0.0073494762182235718, 0.0035977272782474756, 0.0062401080504059792, 0.0044518043287098408, 0.0033460268750786781, 0.0021107017528265715, 0.0034579380881041288, 0.0028898455202579498, 0.017920978367328644, 0.0055123618803918362, 0.0051707183010876179, 0.013616194017231464, 0.0049348659813404083, 0.0072776777669787407, 0.0041443211957812309, 0.017626035958528519, 0.0046701286919414997, 0.010100563988089561, 0.0046111168339848518, 0.0027871087659150362, 0.0022818809375166893, 0.0032868150155991316, 0.010823469609022141, 0.029157135635614395, 0.010048660449683666, 0.0038960452657192945, 0.0038007593248039484, 0.0068756178952753544, 0.0080307545140385628, 0.0027053395751863718, 0.0031396793201565742, 0.0026991066988557577, 0.0070181060582399368, 0.0031293940264731646, 0.0056048715487122536, 0.0063997604884207249, 0.0030289981514215469, 0.0030197880696505308, 0.003224285552278161, 0.021231213584542274, 0.0028540263883769512, 0.008053104393184185, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 12702, 4802, 2736, 695, 9, -312, 884, 36620, -560, 2262, 3880, 61484, 3122, 5231, -67, 10977, -1295, 13199, 111, 5277, 8723, 535, 2810, -6891, 11151, 2949, 2662, 14305, 482, -885, -6898, 12755, 3288, 2581, -306, 6732, -9620, 7125, -2858, 16610, -2133, 1682, 7037, 3928, 251, -788, 1753, -1199, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 9.3437207397073507e-05, 8.8110537035390735e-05, 0.00018484213796909899, 0.00016765687905717641, 0.00081804132787510753, 0.00017363330698572099, 0.00017292884876951575, 8.4652405348606408e-05, 0.00014682607434224337, 0.00010474833834450692, 7.8730045061092824e-05, 4.9663573008729145e-05, 8.1363250501453876e-05, 6.7996363213751465e-05, 0.00042167009087279439, 0.0001297026319662109, 0.00012166396481916308, 0.00032038104836829007, 0.0001161144973593764, 0.00017123947327490896, 9.7513438959140331e-05, 0.00041473025339655578, 0.00010988538269884884, 0.00023766033700667322, 0.00010849686805158854, 6.557902815984562e-05, 5.369131758925505e-05, 7.7336822869256139e-05, 0.00025466986699029803, 0.00068605027627199888, 0.00023643906752113253, 9.1671652626246214e-05, 8.9429631771054119e-05, 0.00016177924408111721, 0.00018895893299486488, 6.3655046687927097e-05, 7.3874805821105838e-05, 6.3508392486255616e-05, 0.00016513190348632634, 7.3632800194900483e-05, 0.00013187933654990047, 0.00015058260760270059, 7.1270544140134007e-05, 7.1053837018553168e-05, 7.5865544204134494e-05, 0.00049955799477174878, 6.7153559939470142e-05, 0.0001894848101073876, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -44,0,32,14,-36,-13,13,4,-44,-7,-59,-53,-25,-58,-7,-32,40,-37,43,38,-12,36,-35,16,-1,-41,52,-16,-1,-16,17,12,82,34,33,-127,19,-1,-14,-32,-2,-13,42,44,32,5,25,3, 
  /* [1][0][][] */ 2,41,59,-27,-16,50,-49,-25,-4,22,-10,-92,12,95,-15,58,-16,16,-29,-56,13,-75,-20,24,-73,-17,-2,-109,-32,-12,28,-52,49,81,-41,3,127,-27,2,56,-28,52,-77,-37,111,-26,-37,-29, 
  /* [2][0][][] */ 1,-22,-66,13,-2,47,27,2,-8,45,-3,24,63,-86,18,-61,29,-89,27,32,-24,49,-3,25,-16,53,-21,-66,14,6,19,-70,-43,-80,36,-26,102,34,-11,-50,-3,28,84,29,127,16,10,21, 
  /* [3][0][][] */ -10,26,-61,40,11,-40,-65,-100,9,-21,-31,-2,6,26,41,73,-15,11,-33,21,11,-94,32,-54,-71,-14,127,-13,-39,0,-61,21,3,-77,11,-17,-18,-41,-26,97,-50,-28,6,14,35,7,-40,37, 
  /* [4][0][][] */ -22,-50,-9,13,32,-28,-9,-9,27,-29,58,-82,7,33,12,4,-15,-17,14,-19,-8,-47,-1,-17,14,-8,44,45,34,24,-14,25,-12,-4,1,0,-68,87,38,-22,29,-18,-15,-25,-77,11,127,12, 
  /* [5][0][][] */ 33,-11,-3,19,23,-34,30,-127,25,-25,-10,110,-82,69,20,-67,-1,-81,17,9,-42,62,-37,-53,-50,69,-26,0,-24,46,-38,-36,28,57,32,-10,-34,-4,-46,-40,11,-36,-51,-5,-31,49,83,25, 
  /* [6][0][][] */ 49,-23,20,-5,-36,-17,-33,17,-37,6,-38,127,-39,-34,-5,55,13,47,18,32,30,-81,-27,16,24,40,-61,5,5,-41,16,38,3,16,-16,2,14,7,1,-9,-6,-17,41,60,3,-36,76,-11, 
  /* [7][0][][] */ -23,3,-6,59,22,30,3,26,19,3,68,1,114,102,62,52,50,42,-12,3,31,-29,-83,-25,14,-4,-31,60,30,-25,-31,-10,39,7,36,-97,-78,38,42,59,-28,24,77,127,-57,-27,-104,60, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.011365729384124279, 0.0071766385808587074, 0.0061975093558430672, 0.0056600170210003853, 0.0096562448889017105, 0.0064451885409653187, 0.0064442926086485386, 0.0063161123543977737, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 6717, 14056, -5058, 6754, -436, 4215, -13417, -15921, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00026742892805486917, 0.00016886208322830498, 0.00014582375297322869, 0.00013317687262315303, 0.00022720576089341193, 0.00015165150398388505, 0.00015163041825871915, 0.00014861441741231829, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 67,127,-71,-75,9,83,24,65, 
  /* [1][0][][] */ 59,-63,55,-127,-55,66,-104,-36, 
  /* [2][0][][] */ -31,127,96,43,99,-5,38,27, 
  /* [3][0][][] */ 106,29,-110,56,-23,-113,-127,-52, 
  /* [4][0][][] */ -37,40,1,-73,-34,99,127,52, 
  /* [5][0][][] */ 40,120,-127,-73,78,118,31,-32, 
  /* [6][0][][] */ -14,127,46,55,71,15,13,-102, 
  /* [7][0][][] */ 123,-31,-28,15,23,11,127,24, 
  /* [8][0][][] */ 51,127,63,94,110,92,117,-114, 
  /* [9][0][][] */ 54,124,-127,-79,24,111,6,70, 
  /* [10][0][][] */ -79,-51,36,-59,6,-29,-41,127, 
  /* [11][0][][] */ 15,-106,-127,-15,19,-16,36,-12, 
  /* [12][0][][] */ -30,-119,-127,-21,-114,38,-58,39, 
  /* [13][0][][] */ -1,7,-107,105,-127,-28,2,-18, 
  /* [14][0][][] */ -60,-38,-127,-3,32,1,-16,-64, 
  /* [15][0][][] */ 19,-100,-127,17,-92,-38,-28,-11, 
  /* [16][0][][] */ 127,-55,-14,69,-76,19,27,98, 
  /* [17][0][][] */ -18,127,123,-29,-48,-14,-23,-32, 
  /* [18][0][][] */ 12,-127,57,77,14,-54,42,-87, 
  /* [19][0][][] */ 127,-45,-57,38,-99,12,45,104, 
  /* [20][0][][] */ -26,-127,89,83,-12,-94,-7,-75, 
  /* [21][0][][] */ -6,-49,-1,-25,127,-3,36,28, 
  /* [22][0][][] */ -127,30,-82,59,61,44,-113,-120, 
  /* [23][0][][] */ -72,-32,76,2,-84,127,126,-44, 
  /* [24][0][][] */ -19,64,10,-32,-28,127,83,17, 
  /* [25][0][][] */ -47,-97,-127,-70,-34,-19,-24,-54, 
  /* [26][0][][] */ -8,71,-18,127,-97,30,-60,-8, 
  /* [27][0][][] */ 21,-121,37,84,21,-52,6,-127, 
  /* [28][0][][] */ 11,127,46,51,104,-29,9,-57, 
  /* [29][0][][] */ 101,41,-42,-15,66,-127,-106,32, 
  /* [30][0][][] */ 22,-12,22,-127,12,-25,22,-27, 
  /* [31][0][][] */ 50,-44,4,64,-17,27,14,127, 
  /* [32][0][][] */ -56,-46,3,-53,-67,127,46,86, 
  /* [33][0][][] */ -35,38,57,-39,44,127,-104,67, 
  /* [34][0][][] */ 21,127,-89,-69,22,73,-83,61, 
  /* [35][0][][] */ 2,-127,26,40,-25,-40,35,-80, 
  /* [36][0][][] */ -22,-39,-79,-13,-127,-53,-15,5, 
  /* [37][0][][] */ -48,-127,70,84,-42,-79,-21,-51, 
  /* [38][0][][] */ -74,28,61,-64,-127,-87,-55,88, 
  /* [39][0][][] */ 67,-127,100,48,-4,-84,-14,-100, 
  /* [40][0][][] */ 2,61,13,40,-127,-12,-51,15, 
  /* [41][0][][] */ 102,127,-86,-119,58,32,-2,15, 
  /* [42][0][][] */ -4,-45,-22,7,127,6,51,14, 
  /* [43][0][][] */ 127,26,63,23,-68,-18,55,87, 
  /* [44][0][][] */ 69,48,-36,6,100,-125,-127,9, 
  /* [45][0][][] */ 46,10,25,23,83,-127,-8,-45, 
  /* [46][0][][] */ 72,-34,-13,127,35,50,26,66, 
  /* [47][0][][] */ -90,-82,58,81,-53,24,127,-79, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0027990725357085466, 0.0033653134014457464, 0.0011372660519555211, 0.0026251322124153376, 0.0034742986317723989, 0.002567770890891552, 0.0025144035462290049, 0.0011424042750149965, 0.0019735719542950392, 0.002947990084066987, 0.0020757848396897316, 0.0035881528165191412, 0.0009853428928181529, 0.0028747096657752991, 0.003815497038885951, 0.00083608244312927127, 0.0046060346066951752, 0.0033843545243144035, 0.0038741170428693295, 0.0028586161788552999, 0.0023319181054830551, 0.0030657246243208647, 0.0047340979799628258, 0.0010160150704905391, 0.002625179011374712, 0.0024759774096310139, 0.0010340887820348144, 0.0034927746746689081, 0.0022309026680886745, 0.0029404941014945507, 0.006492463406175375, 0.0057598617859184742, 0.0043452046811580658, 0.0031433918047696352, 0.0032119243405759335, 0.003608163446187973, 0.0026971809566020966, 0.0036760047078132629, 0.0033819989766925573, 0.0025836287532001734, 0.0029069625306874514, 0.0032304381020367146, 0.0029773109126836061, 0.0028685734141618013, 0.0026914498303085566, 0.0036358230281621218, 0.0049161985516548157, 0.002428076695650816, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 2618, 2846, 10390, 1287, 1790, -1953, 3732, 10105, 3294, -600, 5066, -1739, 10966, -1853, 1506, 15400, -158, 1618, -68, 2807, 3775, 3020, 648, 12714, 3767, 2915, 11706, 1360, 4141, 2939, 490, 875, 679, 1398, -350, 434, -2719, -335, 1866, 2580, 3189, 1900, 3456, 3752, 3285, 2230, 1670, 3786, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00022883337805978954, 0.00027512540691532195, 9.2975235020276159e-05, 0.00021461317373905331, 0.00028403531177900732, 0.00020992370264139026, 0.00020556074741762131, 9.3395297881215811e-05, 0.00016134598990902305, 0.00024100787413772196, 0.00016970222350209951, 0.00029334326973184943, 8.0555015301797539e-05, 0.00023501695250160992, 0.00031192941241897643, 6.8352484959177673e-05, 0.00037655845517292619, 0.00027668208349496126, 0.00031672179466113448, 0.00023370125563815236, 0.00019064196385443211, 0.00025063304929062724, 0.00038702806341461837, 8.3062564954161644e-05, 0.00021461700089275837, 0.00020241927995812148, 8.4540151874534786e-05, 0.00028554580057971179, 0.00018238362099509686, 0.00024039504933170974, 0.0005307801766321063, 0.00047088760766200721, 0.00035523474798537791, 0.00025698260287754238, 0.00026258535217493773, 0.00029497919604182243, 0.00022050339612178504, 0.00030052545480430126, 0.00027648953255265951, 0.00021122013276908547, 0.00023765373043715954, 0.00026409892598167062, 0.00024340493837371469, 0.0002345152897760272, 0.00022003486810717732, 0.00029724047635681927, 0.00040191537118516862, 0.00019850324315484613, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 15,-37,8,3,-22,-85,-37,59,-41,-5,-17,13,50,-3,-13,8,116,13,38,1,11,-23,-80,24,-2,-7,3,-36,-54,79,-26,-127,50,-3,-40,-45,-3,-44,20,-32,-11,25,14,-6,-17,49,127,-18, -127,-88,-24,127,-78,50,-87,127,16,11,6,0,49,22,4,-42,-30,48,27,7,5,127,10,127,127,-24,-38,39,74,-115,-17,-45,47,-2,-22,-100,29,10,-58,-66,-125,-22,-98,-127,29,44,47,127, -23,-13,10,6,-33,21,43,49,-1,-45,5,5,-25,3,-3,10,-74,37,-61,-29,-17,-26,127,22,-30,4,13,-2,22,38,11,52,-15,-7,-29,83,11,7,18,63,26,-21,37,-46,-17,32,-27,-7, 
  /* [0][1][][] */ -9,-22,-32,-2,33,-97,127,-57,-7,15,24,42,127,19,-1,-35,-31,-33,52,42,84,-62,46,15,-62,127,-78,-33,127,-88,47,-114,-34,7,-68,17,13,-70,-27,-7,127,127,11,-118,-60,-63,-6,86, 86,-127,127,-2,127,80,-58,-48,39,127,127,-127,-90,127,127,127,127,127,119,127,127,108,-10,10,98,-92,-127,115,46,127,127,29,-127,127,127,127,-127,127,-127,-127,35,25,-127,-16,127,-127,-19,68, 13,22,-46,-8,-60,127,-99,84,105,-80,18,67,-34,12,9,-67,16,13,-127,14,8,-97,-49,-2,78,-16,-20,127,-80,-39,38,-42,-41,25,96,-5,41,-1,3,-90,105,15,39,55,-59,108,94,-88, 
  /* [0][2][][] */ 0,30,5,-31,-7,-60,2,6,8,-1,-5,6,-10,-11,-6,-6,-66,29,16,-40,15,-19,92,-1,-76,3,36,-32,2,2,-5,67,-6,-7,-43,32,-3,-17,25,22,-16,-25,10,21,-17,21,-19,31, 44,-18,-37,-37,16,29,121,-79,127,-43,-13,10,-65,-23,-24,-80,-22,125,-2,33,9,33,-25,-13,-46,56,69,-16,-99,13,-40,-3,-29,0,-45,13,56,-26,0,101,-117,-18,-13,82,35,65,0,-112, -18,21,2,-20,-27,10,4,-39,-24,-28,-28,6,21,-10,-14,10,55,53,-29,-13,-12,-10,-51,-5,37,-28,26,-22,-20,1,-16,20,16,-8,-24,-36,-11,5,35,-5,-13,0,7,26,-23,22,65,-46, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.011136333458125591, 0.0053608892485499382, 0.028742514550685883, 0.01358133926987648, 0.01134241558611393, 0.010168696753680706, 0.0084842061623930931, 0.010593816637992859, 0.0044152433983981609, 0.011093845590949059, 0.0090354066342115402, 0.11268005520105362, 0.014887972734868526, 0.040595304220914841, 0.019691603258252144, 0.021437397226691246, 0.0073676640167832375, 0.003015885129570961, 0.0089104054495692253, 0.013757535256445408, 0.0089899851009249687, 0.010060128755867481, 0.0041309860534965992, 0.015778252854943275, 0.0075644855387508869, 0.019595259800553322, 0.022600039839744568, 0.0093321092426776886, 0.0083759557455778122, 0.014290262013673782, 0.0042371731251478195, 0.0066259950399398804, 0.0066716596484184265, 0.0078579476103186607, 0.0081575987860560417, 0.01475111860781908, 0.16013254225254059, 0.015733962878584862, 0.0069786687381565571, 0.0074369274079799652, 0.0073549505323171616, 0.0072969924658536911, 0.012415171600878239, 0.0072020245715975761, 0.011111559346318245, 0.003191281808540225, 0.0033948321361094713, 0.0070667280815541744, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { 601, 10517, 7, -599, 1560, -1482, 71, -3448, -3176, 624, -4892, -102, -777, -616, -2125, 4988, 7190, 772, -656, -4381, -7154, -617, 16109, -5731, -4436, -931, 4975, -4901, -1330, -608, -9424, 5154, 5409, -166, 2179, -1533, -21, -374, 8062, 3243, 5917, -1533, 2620, 3572, -719, 12814, -674, -1030, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00026203138986602426, 0.00012613857688847929, 0.000676294497679919, 0.00031956093152984977, 0.00026688037905842066, 0.00023926346329972148, 0.00019962838268838823, 0.00024926627520471811, 0.00010388808004790917, 0.00026103167328983545, 0.00021259780623950064, 0.0026512953918427229, 0.00035030525759793818, 0.00095518364105373621, 0.00046333184582181275, 0.00050440937047824264, 0.00017335680604446679, 7.0962007157504559e-05, 0.00020965660223737359, 0.00032370671397075057, 0.0002115290699293837, 0.00023670891823712736, 9.7199670562986284e-05, 0.00037125300150364637, 0.00017798789485823363, 0.00046106494846753776, 0.00053176563233137131, 0.00021957904391456395, 0.00019708131731022149, 0.00033624147181399167, 9.9698190751951188e-05, 0.00015590577095281333, 0.00015698022616561502, 0.00018489289504941553, 0.00019194350170437247, 0.00034708515158854425, 0.0037678244989365339, 0.00037021090975031257, 0.00016420397150795907, 0.00017498653323855251, 0.00017305766232311726, 0.00017169394413940609, 0.00029212169465608895, 0.00016945941024459898, 0.00026144846924580634, 7.5088988523930311e-05, 7.987840217538178e-05, 0.00016627596050966531, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -44,-53,-15,-79,-1,-5,85,85,-95,-86,-25,9,-64,-11,-64,29,-93,16,22,127,57,-19,3,99,74,68,37,-4,-93,-58,-85,-51,-48,109,45,-52,39,-30,85,-2,23,6,9,-103,41,-37,-36,-81, 
  /* [1][0][][] */ -10,50,-18,-37,-72,62,-25,-51,-37,74,-11,18,58,38,-54,-8,-24,-117,79,-48,127,19,-73,23,62,-4,-86,62,40,-6,66,34,-31,-13,12,-6,9,107,-23,-16,64,44,0,15,111,11,-29,58, 
  /* [2][0][][] */ -20,-35,113,-2,88,-54,-17,23,-45,-2,-1,49,12,-44,-40,-127,-54,-104,-34,20,-102,33,-41,-40,-58,23,-12,-46,-41,19,-32,-14,-1,-5,27,3,29,-27,-58,9,39,-34,37,-45,-36,-41,-62,-55, 
  /* [3][0][][] */ 44,17,72,10,18,-25,21,72,-52,-24,50,-20,-63,44,-16,44,69,33,-30,29,-104,-69,127,-3,15,6,-45,-32,-54,69,114,-64,3,-102,-15,33,-11,-74,-17,70,-82,-53,70,5,-87,-65,56,-4, 
  /* [4][0][][] */ 15,-20,75,-26,6,-5,-8,-4,-61,-5,-19,5,39,-68,34,-98,44,48,-3,-31,10,37,12,6,-1,-1,60,-23,26,22,-127,-10,-28,-15,11,13,49,-6,29,3,-40,-10,-63,25,-10,-97,-2,18, 
  /* [5][0][][] */ 26,-42,58,32,29,12,22,-4,-78,-8,-41,24,33,8,19,-40,89,75,-15,-14,83,-61,127,-92,-21,44,3,48,4,24,-28,-43,-12,-49,-36,8,31,26,62,5,-74,29,33,38,55,-12,78,-7, 
  /* [6][0][][] */ -39,51,-127,93,63,19,41,32,-11,-15,68,-81,-85,-20,-27,48,-126,42,-1,90,22,46,-97,-87,-6,-18,35,70,-37,-34,-25,9,36,82,-42,-20,-19,-5,76,19,78,60,-126,-53,-41,121,-66,-32, 
  /* [7][0][][] */ 42,69,-84,23,17,56,127,72,41,72,-101,3,-42,8,-55,-46,27,24,102,96,68,5,125,27,88,98,-55,103,-61,19,-5,-74,18,-70,-31,19,2,90,-47,68,-55,54,-13,-82,71,-18,52,-41, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0041368547827005386, 0.0045370366424322128, 0.0057769487611949444, 0.0037355856038630009, 0.006371266208589077, 0.006567876785993576, 0.0047372123226523399, 0.0041857780888676643, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { 3655, 1486, 23204, -6656, 5925, -14646, 1024, -14113, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 9.7337760962545872e-05, 0.00010675380326574668, 0.00013592820323538035, 8.7896136392373592e-05, 0.00014991214266046882, 0.00015453828382305801, 0.00011146382166771218, 9.8488897492643446e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 76,41,127,-42,64,117,-87,-57, 
  /* [1][0][][] */ 13,-89,-127,5,58,26,26,5, 
  /* [2][0][][] */ -127,14,-48,-31,64,39,-99,-37, 
  /* [3][0][][] */ 34,63,127,-83,-11,-122,-11,-12, 
  /* [4][0][][] */ -127,35,-58,-14,57,13,-43,-50, 
  /* [5][0][][] */ -105,25,-55,-11,6,51,-93,-127, 
  /* [6][0][][] */ -39,-121,-127,38,116,23,4,59, 
  /* [7][0][][] */ -57,-127,-90,-74,-64,-57,21,79, 
  /* [8][0][][] */ 75,14,-1,-2,82,-75,-127,4, 
  /* [9][0][][] */ -38,43,-47,76,-54,-35,127,-26, 
  /* [10][0][][] */ -23,126,44,60,127,-24,-20,56, 
  /* [11][0][][] */ -71,-45,-28,-2,-77,91,127,-6, 
  /* [12][0][][] */ 82,51,-127,26,1,-45,-79,-18, 
  /* [13][0][][] */ 74,-22,-73,1,21,-127,-40,-29, 
  /* [14][0][][] */ 3,-80,76,14,127,-120,-60,15, 
  /* [15][0][][] */ -34,-33,-7,127,72,93,-94,37, 
  /* [16][0][][] */ 114,33,-35,11,83,-106,-127,-21, 
  /* [17][0][][] */ 58,127,57,66,51,55,16,-78, 
  /* [18][0][][] */ 39,1,12,-1,127,-8,23,1, 
  /* [19][0][][] */ 7,127,32,10,-114,20,18,-28, 
  /* [20][0][][] */ -41,35,57,-127,21,28,-29,104, 
  /* [21][0][][] */ -25,83,41,-127,31,57,-30,126, 
  /* [22][0][][] */ -73,-77,-127,23,-125,119,120,-37, 
  /* [23][0][][] */ 85,20,-127,16,-4,-37,-53,-16, 
  /* [24][0][][] */ -68,49,9,14,-19,96,-127,124, 
  /* [25][0][][] */ -97,-52,-127,17,-55,-71,68,94, 
  /* [26][0][][] */ 47,-9,-26,-38,109,-28,127,-43, 
  /* [27][0][][] */ 127,-74,25,87,3,42,-23,101, 
  /* [28][0][][] */ 57,56,61,-21,127,-60,54,-36, 
  /* [29][0][][] */ -17,-13,-19,-54,-77,16,127,-34, 
  /* [30][0][][] */ 24,-127,-54,-59,-89,8,-4,-47, 
  /* [31][0][][] */ 6,27,-6,-10,-127,6,-29,-8, 
  /* [32][0][][] */ 40,-61,-59,79,-3,-94,110,-127, 
  /* [33][0][][] */ 43,127,22,31,71,0,-46,-18, 
  /* [34][0][][] */ -127,-44,112,-6,-29,103,99,6, 
  /* [35][0][][] */ -17,89,127,0,-79,-101,-34,24, 
  /* [36][0][][] */ -96,1,92,-25,-28,127,69,22, 
  /* [37][0][][] */ -9,-67,4,-127,-36,-80,66,41, 
  /* [38][0][][] */ 42,-21,89,-54,63,60,-127,11, 
  /* [39][0][][] */ -6,76,-127,-31,-25,5,10,75, 
  /* [40][0][][] */ 63,-53,11,28,7,6,6,127, 
  /* [41][0][][] */ -14,83,127,-16,36,25,-54,-3, 
  /* [42][0][][] */ 62,-127,-114,-16,-102,3,15,-95, 
  /* [43][0][][] */ -1,-72,31,-66,127,-38,12,25, 
  /* [44][0][][] */ -12,87,127,18,2,55,-69,-3, 
  /* [45][0][][] */ -35,46,16,91,-112,63,-127,26, 
  /* [46][0][][] */ -61,-36,79,47,-121,-127,-43,3, 
  /* [47][0][][] */ -16,64,49,-95,-127,51,-30,75, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0023766141384840012, 0.0032381243072450161, 0.0034144604578614235, 0.0016425953945145011, 0.0027165976352989674, 0.0024882177822291851, 0.0023073805496096611, 0.0017771505517885089, 0.0031647253781557083, 0.00325413653627038, 0.0021340283565223217, 0.0016248514875769615, 0.0040390612557530403, 0.0047479993663728237, 0.0029411334544420242, 0.0018930929945781827, 0.0026758622843772173, 0.0025720810517668724, 0.001840027398429811, 0.004165498074144125, 0.0030708822887390852, 0.0023948857560753822, 0.0017247177893295884, 0.0025583729147911072, 0.0023359896149486303, 0.0024331165477633476, 0.0031008927617222071, 0.0029632416553795338, 0.0009511411190032959, 0.0031555499881505966, 0.0022599091753363609, 0.001961882458999753, 0.002206605626270175, 0.0016637950902804732, 0.0035683745518326759, 0.0023554128129035234, 0.0040390398353338242, 0.0035317279398441315, 0.0022605822887271643, 0.0024763983674347401, 0.0033507158514112234, 0.0014174674870446324, 0.0015825469745323062, 0.0033574085682630539, 0.0017917470540851355, 0.0028298790566623211, 0.0022160219959914684, 0.0031228542793542147, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 1575, -1015, 464, -3054, 2462, -729, 2466, -3040, 889, 492, 1588, 4777, 362, -185, 332, 3635, -1561, 2767, 4295, 438, -856, 1935, -731, 3028, 1539, 1598, 842, -834, 9083, -362, 2027, -1615, -720, 4528, -474, 2168, 1022, 567, -194, 3018, 1512, 5780, -3185, 965, 4228, 58, 2261, 1696, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00025855354033410549, 0.00035227785701863468, 0.00037146158865652978, 0.00017869911971502006, 0.00029554057982750237, 0.00027069498901255429, 0.00025102155632339418, 0.00019333747331984341, 0.00034429272636771202, 0.00035401983768679202, 0.00023216246336232871, 0.00017676874995231628, 0.00043941233889199793, 0.00051653821719810367, 0.0003199680068064481, 0.00020595092792063951, 0.00029110896866768599, 0.00027981851599179208, 0.00020017789211124182, 0.00045316750765778124, 0.00033408345188945532, 0.0002605413319543004, 0.00018763326806947589, 0.00027832720661535859, 0.0002541339781600982, 0.00026470047305338085, 0.00033734831959009171, 0.00032237317645922303, 0.00010347531497245654, 0.00034329452319070697, 0.00024585711071267724, 0.00021343458502087742, 0.00024005818704608828, 0.00018100545275956392, 0.00038820601184852421, 0.00025624703266657889, 0.00043941001058556139, 0.00038421919452957809, 0.00024593036505393684, 0.00026940912357531488, 0.00036452675703912973, 0.00015420730051118881, 0.0001721664157230407, 0.0003652548766694963, 0.00019492543651722372, 0.0003078645677305758, 0.00024108261277433485, 0.00033973754034377635, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -95,71,-127,119,-50,58,-64,70,-76,-77,75,-60,54,-93,-58,-73,89,81,89,-114,104,-122,73,-86,-71,-46,74,108,-108,-84,-72,54,60,-82,52,-109,-50,-106,103,-33,11,-96,108,-112,107,50,-83,-67, -106,106,-59,125,-44,108,-55,122,-112,-94,113,-87,78,-104,-78,-87,116,114,127,-126,127,-127,105,-127,-83,-79,79,127,47,-98,-105,47,93,-127,92,-127,-66,-127,111,-95,-105,108,127,-99,-26,110,-91,-112, -47,75,-7,19,-8,35,-31,61,-52,-33,45,-29,44,-74,-21,-26,39,47,65,-32,62,-12,36,-25,-44,-30,27,25,89,-44,-48,28,31,-88,44,-40,-13,-91,42,-67,-127,-24,47,53,-55,72,-36,-93, 
  /* [0][1][][] */ -127,86,-46,109,-53,127,-117,45,-113,-126,82,-95,73,-98,-110,-104,112,88,-45,-127,95,-125,104,-94,-100,-70,108,89,-127,-111,-92,65,88,48,94,-110,-101,-79,120,-60,-78,-105,76,-127,127,62,-96,-95, -115,127,-100,127,-127,92,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-47,-124,111,-111,127,-113,-116,-127,127,123,43,-127,-127,127,127,55,127,-90,-127,-96,127,-127,-127,127,127,-112,-43,127,-127,-127, -97,86,-60,24,-42,27,-57,36,-42,-44,56,-52,47,-97,-33,-32,58,57,-30,-48,46,-27,47,-36,-127,-52,56,45,102,-58,-40,37,39,18,51,4,-44,-26,68,-50,-61,-64,59,53,-60,75,-35,-79, 
  /* [0][2][][] */ -62,48,-5,24,-34,54,-49,17,-61,-45,15,-40,38,-89,-46,-74,49,37,-60,-21,2,-28,42,-30,-44,-29,44,1,-80,-54,-52,37,39,55,42,-35,-39,-42,40,-37,-110,-62,47,-81,72,22,-38,-25, -78,62,-86,31,-62,28,-60,56,-69,-47,35,-61,41,-86,-64,-71,68,49,-90,-13,14,-5,38,-39,-64,-62,37,28,3,-87,-63,-2,42,80,59,-35,-52,-27,34,-70,-55,66,35,-90,-27,58,-46,-81, -43,47,-68,-1,-30,-3,-37,18,-29,-6,14,-29,26,-67,-23,-1,43,23,-55,19,4,25,11,-1,-58,-11,32,-4,56,-38,-1,50,12,38,21,3,-10,-21,19,-24,-6,-26,8,30,-21,43,-17,-70, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0027037938125431538, 0.0028412602841854095, 0.0030644829384982586, 0.0067977453581988811, 0.0059474459849298, 0.0059650298207998276, 0.0016052009304985404, 0.014534778892993927, 0.0036592341493815184, 0.0018961918540298939, 0.0024033712688833475, 0.0054658842273056507, 0.0036388586740940809, 0.0044035105966031551, 0.0020774970762431622, 0.0028353801462799311, 0.0028400688897818327, 0.0030757547356188297, 0.0067633572034537792, 0.0025126074906438589, 0.0026564898435026407, 0.002458520932123065, 0.0048630163073539734, 0.0055804792791604996, 0.0030210954137146473, 0.0032826974056661129, 0.0027872095815837383, 0.002789792837575078, 0.0074394927360117435, 0.0034869706723839045, 0.0054609677754342556, 0.016500459983944893, 0.0044564041309058666, 0.006570461206138134, 0.0036594865377992392, 0.0047290371730923653, 0.0050275293178856373, 0.0027766688726842403, 0.003099463414400816, 0.0039930823259055614, 0.0026884744875133038, 0.0084366267547011375, 0.019420232623815536, 0.0036119082942605019, 0.0083132032305002213, 0.0027762542013078928, 0.0022910523694008589, 0.0020904641132801771, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 12794, 724, 14895, 623, 9910, -1072, 39993, 599, 8539, 43606, 9402, 24635, 1350, 13105, 35117, 26340, 3167, -600, -104, 39640, 2817, 14211, 987, 16586, 14960, 30128, -343, -1997, -2433, 15581, 17698, 288, 2447, -523, 2083, 13454, 8322, 26447, 5936, 17373, 24773, 1041, 911, 8302, -3564, 1417, 36397, 26013, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 6.3618681451771408e-05, 6.6853186581283808e-05, 7.2105482104234397e-05, 0.00015994695422705263, 0.00013993990432936698, 0.00014035364438313991, 3.7769434129586443e-05, 0.00034199480433017015, 8.6099629697855562e-05, 4.461628122953698e-05, 5.654991400660947e-05, 0.0001286090409848839, 8.5620202298741788e-05, 0.00010361201566411182, 4.8882284318096936e-05, 6.6714826971292496e-05, 6.6825152316596359e-05, 7.2370698035228997e-05, 0.00015913782408460975, 5.9120178775629029e-05, 6.2505641835741699e-05, 5.7847551943268627e-05, 0.00011442391405580565, 0.00013130539446137846, 7.1084599767345935e-05, 7.7239943493623286e-05, 6.5581400122027844e-05, 6.5642183471936733e-05, 0.00017504689458291978, 8.2046368333976716e-05, 0.00012849336781073362, 0.00038824611692689359, 0.0001048565682140179, 0.00015459909627679735, 8.6105566879268736e-05, 0.00011127146717626601, 0.00011829481081804261, 6.5333384554833174e-05, 7.2928552981466055e-05, 9.395487722940743e-05, 6.3258223235607147e-05, 0.00019850887474603951, 0.00045694666914641857, 8.498608076479286e-05, 0.00019560479267966002, 6.5323627495672554e-05, 5.3907115216134116e-05, 4.9187390686711296e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 17,30,13,-29,62,72,-28,53,-17,109,8,53,-33,30,-22,38,36,77,35,-63,-60,60,-9,67,49,52,33,55,-39,-46,2,87,-25,15,-49,43,45,-127,-25,19,13,-21,54,-12,-8,-42,-60,-18, 
  /* [1][0][][] */ -61,-7,-79,-58,11,93,-48,16,-11,-39,-51,43,63,-21,-25,-21,-33,-36,-11,6,-74,36,-120,-38,-61,-27,64,75,-22,-36,50,-33,14,-61,-20,41,13,-80,127,-35,-24,18,-54,-18,35,53,31,11, 
  /* [2][0][][] */ -1,4,56,-42,-17,-71,18,26,87,71,-69,6,98,-34,127,72,-72,-23,-19,34,66,-75,-27,-90,7,-34,29,-60,33,44,-41,11,21,-22,53,41,-53,19,-7,-25,32,28,56,-9,15,-74,87,-48, 
  /* [3][0][][] */ 42,2,-27,-25,28,116,19,-15,48,-49,25,-27,-59,16,8,42,-42,-67,33,-127,-8,-2,-20,-11,-43,86,123,63,-12,-51,25,42,61,-33,99,36,-49,-66,4,47,26,18,-9,-1,30,23,-11,-25, 
  /* [4][0][][] */ 107,1,15,-62,86,79,43,18,68,-23,-115,17,35,-15,28,-14,-111,-127,-19,-85,-36,39,-30,-37,-75,112,-99,111,-63,-56,14,69,47,-50,9,-23,-6,26,-39,37,-43,-12,4,53,-55,92,-27,-48, 
  /* [5][0][][] */ -3,-13,-58,5,-9,55,27,-30,63,60,37,96,55,-18,36,-2,-48,127,-20,41,8,0,-75,-22,40,0,-80,-42,-13,34,20,-15,-41,-3,32,9,-43,13,-92,9,95,-29,30,50,-15,10,-49,33, 
  /* [6][0][][] */ 77,15,12,80,5,-22,97,-60,18,48,127,97,28,47,-62,56,40,-44,-86,103,51,-46,-40,82,-73,83,89,-9,108,30,-29,-9,119,-73,-116,-4,101,19,5,9,20,66,68,-33,77,107,30,9, 
  /* [7][0][][] */ -73,-5,-16,24,-45,-63,23,40,86,92,-58,-75,-97,33,-21,-5,-81,81,2,127,-52,50,27,43,-9,-104,-38,-85,20,31,-9,-1,-12,12,-7,-11,11,-48,112,10,11,38,24,-9,56,52,-33,9, 
  /* [8][0][][] */ -5,-95,48,-65,57,-44,75,-37,-21,-123,31,10,-45,10,28,36,0,8,-46,105,3,32,-21,42,69,-15,-59,-25,-127,-30,-59,-111,7,-68,0,92,-11,23,118,25,14,14,69,122,-17,-56,-43,78, 
  /* [9][0][][] */ 15,-35,22,-65,27,81,-35,48,24,-34,-39,-21,17,-49,110,-16,5,-111,32,42,-69,38,54,-31,-22,-72,-17,71,53,65,-47,-32,-42,33,-1,127,-29,-47,-53,-21,-23,2,36,98,57,77,-58,14, 
  /* [10][0][][] */ -15,8,-24,-5,19,30,-52,-45,44,43,64,1,-24,-21,49,-45,-53,127,-9,39,4,-13,9,22,-50,49,5,92,40,14,-30,-5,67,3,-15,26,-9,-54,-35,14,-81,1,15,-12,17,50,22,27, 
  /* [11][0][][] */ -34,40,-14,30,27,55,6,8,11,13,-127,-66,84,5,2,-41,-5,24,-47,-46,-13,-7,95,-8,50,12,-14,29,-3,26,-10,43,36,-3,-51,6,49,76,93,13,35,-33,54,2,-54,-17,87,5, 
  /* [12][0][][] */ -71,2,29,26,-68,-49,-4,6,-45,-27,-121,17,71,-104,14,26,55,109,81,-127,-26,41,-43,-82,-4,-16,33,-28,12,23,-14,75,62,82,43,-41,-59,-25,37,-4,-38,18,49,-9,39,-9,-42,-40, 
  /* [13][0][][] */ -59,-104,-52,-94,11,18,43,4,-127,27,116,-65,55,40,116,-7,111,23,-7,-88,76,-72,116,-12,-85,3,-36,4,-42,-91,-105,9,42,-27,-77,57,22,-43,78,-85,-11,40,70,41,68,-29,102,-65, 
  /* [14][0][][] */ 61,21,-53,-1,-40,12,-88,-19,-33,69,52,40,-2,-67,21,-43,50,-127,31,12,86,-65,31,-19,-9,125,-101,-5,-64,-24,-107,5,124,58,97,-29,-77,17,-32,54,-10,-59,103,-24,-56,-49,-58,55, 
  /* [15][0][][] */ -60,13,36,33,99,7,-3,26,26,80,-13,59,63,-27,-44,-21,21,43,-3,-47,37,-34,-53,-63,47,-70,-43,59,-38,11,18,2,-59,-2,127,-10,-91,16,67,-24,-42,-27,21,3,-28,-29,-15,11, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0082147130742669106, 0.0091305440291762352, 0.0063566248863935471, 0.0057327067479491234, 0.0033521375153213739, 0.0070318644866347313, 0.0043300855904817581, 0.0085027599707245827, 0.0037888167425990105, 0.0041783526539802551, 0.0076118125580251217, 0.0048997285775840282, 0.0053666778840124607, 0.0030876414384692907, 0.0059740748256444931, 0.0057241655886173248, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -4648, 13258, -17952, 3092, 14059, -15550, -40714, -6171, -6365, 6719, -15813, -13154, 7659, -10502, -3006, -2081, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00019328737107571214, 0.00021483632735908031, 0.00014956764061935246, 0.0001348872174276039, 7.8873825259506702e-05, 0.00016545563994441181, 0.00010188436863245443, 0.00020006494014523923, 8.9148634287994355e-05, 9.8314179922454059e-05, 0.0001791014801710844, 0.00011528773029567674, 0.00012627478281501681, 7.2650385845918208e-05, 0.00014056646614335477, 0.00013468625547830015, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 42,19,-4,76,-127,-18,112,41,59,86,-22,40,11,8,38,96, 
  /* [1][0][][] */ -20,24,-100,0,126,127,9,-16,-33,5,-71,36,-48,93,-47,-37, 
  /* [2][0][][] */ -45,70,76,5,69,94,9,31,28,-7,39,-29,47,-127,-19,13, 
  /* [3][0][][] */ 127,-48,8,14,30,22,-17,31,31,45,-64,-32,-39,49,-12,57, 
  /* [4][0][][] */ -62,-13,0,45,-104,-32,-69,-30,1,13,-8,-65,-16,35,-30,127, 
  /* [5][0][][] */ -90,-1,38,6,127,28,6,0,-51,34,-32,10,-73,37,-88,-35, 
  /* [6][0][][] */ -127,30,-39,48,-10,-64,77,11,8,-37,-52,35,9,5,-44,14, 
  /* [7][0][][] */ 5,107,41,-64,56,30,127,20,43,-21,10,58,87,43,-37,6, 
  /* [8][0][][] */ -45,-21,-81,54,-62,95,-36,-72,7,-45,88,33,127,53,-98,19, 
  /* [9][0][][] */ -32,-127,-19,68,-38,-60,-9,68,57,49,9,78,-74,25,-12,-39, 
  /* [10][0][][] */ -55,-31,-97,31,-106,115,73,-99,30,-81,67,-15,42,127,-102,90, 
  /* [11][0][][] */ -48,-83,-31,31,-7,110,58,1,19,17,35,-92,0,109,-127,122, 
  /* [12][0][][] */ -34,-73,-73,88,-113,-127,13,73,86,79,-32,112,-10,-77,-15,-16, 
  /* [13][0][][] */ -56,-21,-28,-3,-12,-2,27,12,-15,127,-9,-15,39,29,11,-15, 
  /* [14][0][][] */ -127,-3,-36,-37,-8,72,-28,-83,112,-43,76,17,79,-22,-84,-84, 
  /* [15][0][][] */ -9,-127,75,-43,-62,-50,7,67,11,-55,-78,-40,66,-35,-16,-39, 
  /* [16][0][][] */ -23,-41,30,-36,45,20,-30,-24,80,-127,33,-15,-25,-9,-76,-107, 
  /* [17][0][][] */ -18,-8,35,-47,17,-1,-30,-5,102,-56,12,45,100,-98,-23,-127, 
  /* [18][0][][] */ 58,5,-24,-127,8,-3,104,-56,32,42,-20,48,-2,58,-13,-104, 
  /* [19][0][][] */ -80,-45,-49,-123,-127,47,0,13,21,-61,51,-110,-26,-9,-4,14, 
  /* [20][0][][] */ 25,97,71,-64,67,2,-38,59,-124,-127,41,-92,-26,115,-19,-6, 
  /* [21][0][][] */ 4,-127,-83,-23,77,4,43,74,-87,-39,-48,16,106,-119,3,-9, 
  /* [22][0][][] */ 66,-5,73,0,3,10,67,30,20,120,33,16,6,-5,127,6, 
  /* [23][0][][] */ -127,-106,-11,46,74,50,4,-2,-5,21,-24,-77,24,49,96,116, 
  /* [24][0][][] */ 10,-15,59,15,8,-89,27,-95,61,127,-124,107,3,-67,72,-99, 
  /* [25][0][][] */ 127,-46,86,106,36,29,-11,9,-123,66,55,-49,7,24,45,-2, 
  /* [26][0][][] */ -21,23,13,56,-49,114,-24,39,-59,-37,-87,31,-4,16,49,-127, 
  /* [27][0][][] */ 38,9,-24,-46,-54,6,-68,10,-103,-38,-61,-51,-67,52,-13,127, 
  /* [28][0][][] */ -66,-4,30,-7,25,-20,-127,5,-7,-25,-9,-10,10,-51,-61,-37, 
  /* [29][0][][] */ -23,-93,-38,91,-31,5,127,25,85,40,-96,62,13,-17,-46,71, 
  /* [30][0][][] */ 29,-50,-69,-2,-127,22,51,-22,7,2,-7,-31,-13,46,-5,75, 
  /* [31][0][][] */ -127,-25,17,63,-30,18,-44,-30,-38,-44,2,-38,-18,-57,-23,92, 
  /* [32][0][][] */ -127,-71,-102,-5,-100,-42,10,-10,104,37,-51,-68,40,50,36,-4, 
  /* [33][0][][] */ -21,16,-74,38,-113,-85,51,-16,-127,26,-56,-64,-15,90,66,66, 
  /* [34][0][][] */ 25,42,-1,17,-56,-51,28,39,34,-127,-29,60,-42,3,58,100, 
  /* [35][0][][] */ 49,5,-86,-16,-127,17,95,-41,35,53,-34,-13,3,63,29,68, 
  /* [36][0][][] */ -16,-15,-57,48,127,-14,47,67,-85,13,-100,-87,23,-18,19,31, 
  /* [37][0][][] */ -127,52,-10,-90,40,-102,-33,-14,-14,-21,-18,54,53,-80,12,-127, 
  /* [38][0][][] */ 45,116,40,-65,-104,-63,-127,-59,-40,-69,42,56,-83,-105,70,-8, 
  /* [39][0][][] */ -5,-37,-11,57,3,77,104,-51,-35,55,26,-23,-36,127,50,126, 
  /* [40][0][][] */ 87,47,73,91,-58,-52,1,24,-91,62,-8,-17,-48,-17,127,13, 
  /* [41][0][][] */ -33,-7,-1,46,-110,127,7,61,-70,29,-105,19,27,58,59,-119, 
  /* [42][0][][] */ 32,-105,24,-13,127,30,64,25,-15,-95,-90,-19,-9,-32,9,19, 
  /* [43][0][][] */ -20,-96,-27,24,112,16,-10,87,-48,-63,-127,-70,99,-22,-57,36, 
  /* [44][0][][] */ -46,-62,-76,-113,39,58,61,53,-8,-127,-69,57,-59,32,48,91, 
  /* [45][0][][] */ 17,-82,-92,14,-127,68,-50,-52,92,-49,26,-56,-19,13,-6,56, 
  /* [46][0][][] */ 28,-82,-13,8,90,-104,-9,103,-20,-8,56,81,-47,-52,79,-127, 
  /* [47][0][][] */ -79,-22,17,68,15,-7,19,58,13,127,55,80,-42,60,-4,57, 
  /* [48][0][][] */ 48,-14,-85,-83,33,-70,9,53,42,-81,-5,18,-62,4,-43,-127, 
  /* [49][0][][] */ 67,32,13,41,-12,-35,36,52,-21,127,-43,48,-50,-26,75,83, 
  /* [50][0][][] */ 25,11,1,29,-127,-16,-3,-49,45,13,28,44,-8,-55,21,7, 
  /* [51][0][][] */ 0,-8,-34,-127,-50,113,89,-75,-17,-12,46,-73,83,98,-44,26, 
  /* [52][0][][] */ 12,-37,-8,-80,78,-94,2,-27,41,-11,127,-66,35,7,-30,106, 
  /* [53][0][][] */ -58,-63,56,-26,-47,-127,24,-101,-2,91,-98,82,-38,-26,33,-87, 
  /* [54][0][][] */ 58,61,57,-18,-120,-32,-104,-127,-9,14,45,85,-75,-36,44,7, 
  /* [55][0][][] */ 14,3,-29,84,-34,33,42,-28,-18,127,14,38,14,5,-8,40, 
  /* [56][0][][] */ 43,-97,-43,73,-47,35,-27,33,127,16,22,54,-36,-26,54,58, 
  /* [57][0][][] */ 55,25,103,-102,106,15,-8,-1,73,-23,-3,127,63,-64,99,-60, 
  /* [58][0][][] */ 53,-40,25,-72,60,14,-21,89,70,127,-6,77,36,17,78,-15, 
  /* [59][0][][] */ -35,39,38,-23,5,-106,-5,12,5,19,-127,-109,-115,-68,81,-17, 
  /* [60][0][][] */ 41,-12,35,20,4,-31,24,-62,20,127,5,67,-7,-16,-18,-22, 
  /* [61][0][][] */ 60,69,12,-24,-112,-120,-12,-76,-83,-28,-25,16,-52,-44,127,110, 
  /* [62][0][][] */ -46,98,-47,30,-71,127,-46,35,-80,3,-34,39,-35,59,76,-82, 
  /* [63][0][][] */ 19,-6,-53,-127,-30,-49,76,-3,-3,-88,-23,23,-37,72,25,-25, 
  /* [64][0][][] */ -11,13,-21,-3,20,-52,42,51,-127,-40,-48,-36,-11,62,61,67, 
  /* [65][0][][] */ -64,-16,-36,-22,55,46,-39,-78,-127,-58,11,-25,-100,95,-42,57, 
  /* [66][0][][] */ -10,66,-13,23,-45,127,-16,17,-57,17,-28,36,-19,48,50,-76, 
  /* [67][0][][] */ 20,-16,-51,-22,-9,-90,97,-119,-2,9,29,123,-52,-42,-24,-127, 
  /* [68][0][][] */ 21,-127,-26,85,-4,-2,21,84,51,45,52,20,-80,20,-5,-19, 
  /* [69][0][][] */ -24,57,60,-109,47,3,-53,127,20,71,35,49,45,-106,2,-118, 
  /* [70][0][][] */ 29,17,49,-53,94,13,-92,-44,-127,-97,-8,34,-32,58,-105,-1, 
  /* [71][0][][] */ -18,-110,13,-60,57,-18,46,37,-121,89,-127,-47,32,101,-9,68, 
  /* [72][0][][] */ -3,12,75,5,-58,-14,-111,-67,-4,66,-25,65,19,98,-127,-16, 
  /* [73][0][][] */ -15,-43,-15,-46,50,-123,27,-49,75,104,104,-33,4,-35,-59,127, 
  /* [74][0][][] */ 23,33,-28,102,-74,-9,92,17,86,72,25,115,127,18,-59,3, 
  /* [75][0][][] */ -30,38,-27,36,-58,127,-23,12,-42,29,-36,35,-25,48,34,-68, 
  /* [76][0][][] */ -74,107,-74,66,-112,4,-9,-1,61,32,-48,-53,46,-64,-127,57, 
  /* [77][0][][] */ 103,119,-127,104,69,65,79,63,40,8,113,-28,66,47,61,26, 
  /* [78][0][][] */ 15,-28,-8,-64,56,-108,33,-40,46,36,127,-27,10,-10,-34,121, 
  /* [79][0][][] */ -40,48,-9,11,-7,-44,-25,3,-127,-14,54,9,111,46,-69,-34, 
  /* [80][0][][] */ -86,23,64,1,50,52,-1,-127,-88,62,-48,-30,-11,-71,27,64, 
  /* [81][0][][] */ 95,66,-8,5,41,-29,60,106,-84,127,-76,-39,-55,5,112,96, 
  /* [82][0][][] */ 35,127,-31,-61,-14,-37,107,-102,5,28,-52,72,101,5,51,-36, 
  /* [83][0][][] */ 17,-35,24,20,10,24,-28,-93,70,-30,80,4,38,-71,-51,-127, 
  /* [84][0][][] */ -127,-81,-45,-24,-7,89,87,12,106,70,97,108,50,91,-84,-3, 
  /* [85][0][][] */ 87,-4,92,-99,81,2,-33,80,8,127,-77,-6,-39,59,127,25, 
  /* [86][0][][] */ -74,83,-39,2,39,83,25,25,118,28,127,-27,-36,66,-20,-38, 
  /* [87][0][][] */ 18,-47,13,-35,39,-127,37,-40,37,-17,82,-36,44,-35,-45,84, 
  /* [88][0][][] */ -87,42,37,-6,109,-36,19,49,-49,-55,91,-56,49,107,104,-127, 
  /* [89][0][][] */ -26,43,-29,35,-51,127,-1,43,-56,-8,-32,29,3,77,22,-80, 
  /* [90][0][][] */ 46,-64,41,22,127,3,38,28,9,-90,-127,-23,-10,-22,-57,20, 
  /* [91][0][][] */ -16,50,-16,-19,13,-80,-116,34,-81,29,-110,-127,-115,-80,0,17, 
  /* [92][0][][] */ 68,33,57,34,-127,-87,21,-5,-30,33,-23,-21,-23,-68,28,2, 
  /* [93][0][][] */ -19,-127,-99,39,-52,-45,-9,72,69,54,13,57,-32,54,-5,-11, 
  /* [94][0][][] */ 95,22,127,-5,43,-25,-10,23,30,96,-9,53,7,1,106,-18, 
  /* [95][0][][] */ -52,-42,-22,-39,127,-4,33,73,-32,-2,-93,-41,15,13,-54,24, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0032721695024520159, 0.0020930119790136814, 0.0045676133595407009, 0.0037559436168521643, 0.0030774490442126989, 0.0010084452806040645, 0.0058731860481202602, 0.0029722568579018116, 0.0010038975160568953, 0.0027947803027927876, 0.00077642267569899559, 0.0023578533437103033, 0.0024191229604184628, 0.0068174805492162704, 0.0023339900653809309, 0.0028209399897605181, 0.0030992832034826279, 0.0026917583309113979, 0.0040145236998796463, 0.0016123161185532808, 0.0037738897372037172, 0.0021454181987792253, 0.0041740322485566139, 0.0043855225667357445, 0.0013415634166449308, 0.0038642610888928175, 0.0035109987948089838, 0.0032824110239744186, 0.0018848542822524905, 0.0049749845638871193, 0.0022437227889895439, 0.0047914497554302216, 0.0054490198381245136, 0.0012107886141166091, 0.0030686480458825827, 0.0020059833768755198, 0.0024022518191486597, 0.0027544400654733181, 0.003484365763142705, 0.0024485699832439423, 0.0013095702743157744, 0.0036808999720960855, 0.0026850420981645584, 0.0027763776015490294, 0.0030231610871851444, 0.0017440844094380736, 0.0015645973617210984, 0.0022179507650434971, 0.0042656608857214451, 0.0040031536482274532, 0.0044689113274216652, 0.0014309288235381246, 0.0031046259682625532, 0.0021558583248406649, 0.001958274282515049, 0.0054920515976846218, 0.0037610109429806471, 0.0010956516489386559, 0.0023610717616975307, 0.0020134213846176863, 0.0037317019887268543, 0.0015583570348098874, 0.0034530912525951862, 0.0040493370033800602, 0.0014437936479225755, 0.0013580921804532409, 0.0053257276304066181, 0.0035705342888832092, 0.002090799855068326, 0.001652826089411974, 0.0029981620609760284, 0.0036508275661617517, 0.0020501972176134586, 0.0028685953002423048, 0.0029597550164908171, 0.0043965042568743229, 0.0035998208913952112, 0.0010158163495361805, 0.0027699901256710291, 0.0014902099501341581, 0.0034723333083093166, 0.0027102068997919559, 0.0024103696923702955, 0.0014778847107663751, 0.0023082711268216372, 0.0014478135854005814, 0.0025185230188071728, 0.0039727641269564629, 0.0040712552145123482, 0.0044397721067070961, 0.0025139821227639914, 0.0011889284942299128, 0.0037175081670284271, 0.0034232435282319784, 0.0019839080050587654, 0.0027158402372151613, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 1449, 5303, 164, 1469, 3215, 13243, -78, 1284, 12530, -635, 15536, 3019, 2212, 318, 3492, 243, 2716, 3096, -217, 7866, 944, 5049, -922, 665, -7859, 978, 2000, 1675, 6409, 532, 3707, 1657, 902, 10545, 2352, 4546, 3418, 2125, 2201, 2676, 10217, 1266, 1781, 985, 1644, 6956, 6578, 4836, 1030, -872, 1265, 6189, 2168, -2491, 6116, 110, 1119, 12439, 1458, 2221, 1877, 7591, 2705, -87, 9210, 9678, 1068, 2144, 5462, 5178, 2700, 978, -3989, 3265, 1526, 2226, 255, 12320, 2942, 8412, 1659, 616, 3266, 9417, -179, 7242, 3989, 1350, -684, 1875, 1455, 10437, 1938, 1801, 4863, 3388, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00022344375611282885, 0.00014292367268353701, 0.00031190458685159683, 0.00025647881557233632, 0.00021014705998823047, 6.8862813350278884e-05, 0.00040105709922499955, 0.00020296388538554311, 6.8552268203347921e-05, 0.00019084470113739371, 5.3018891776446253e-05, 0.00016100866196211427, 0.00016519252676516771, 0.00046553931315429509, 0.00015937912394292653, 0.00019263105059508234, 0.00021163803467061371, 0.00018380973779130727, 0.00027413625502958894, 0.0001100988156395033, 0.000257704290561378, 0.00014650227967649698, 0.00028502847999334335, 0.00029947032453492284, 9.161016350844875e-05, 0.0002638754085637629, 0.00023975249496288598, 0.00022414312115870416, 0.00012870939099229872, 0.00033972240635193884, 0.0001532151218270883, 0.00032718951115384698, 0.00037209241418167949, 8.2680060586426407e-05, 0.00020954606588929892, 0.0001369808305753395, 0.00016404045163653791, 0.00018809002358466387, 0.00023793382570147514, 0.0001672033395152539, 8.942547719925642e-05, 0.00025135438772849739, 0.00018335110507905483, 0.00018958805594593287, 0.00020643994503188878, 0.00011909675959032029, 0.00010684028529794887, 0.00015145525685511529, 0.00029128542519174516, 0.0002733598230406642, 0.00030516460537910461, 9.7712581919040531e-05, 0.00021200286573730409, 0.00014721520710736513, 0.00013372294779401273, 0.00037503091152757406, 0.00025682486011646688, 7.4817799031734467e-05, 0.00016122842498589307, 0.00013748873607255518, 0.00025482344790361822, 0.00010641415428835899, 0.00023579820117447525, 0.00027651351410895586, 9.8591066489461809e-05, 9.2738846433348954e-05, 0.00036367328721098602, 0.00024381793627981097, 0.00014277260925155133, 0.00011286508379271254, 0.00020473285985644907, 0.00024930085055530071, 0.00014000001829117537, 0.00019588525174185634, 0.00020211018272675574, 0.00030022021383047104, 0.00024581779143773019, 6.9366156822070479e-05, 0.0001891518768388778, 0.00010176065552514046, 0.00023711216636002064, 0.00018506951164454222, 0.00016459479229524732, 0.00010091901640407741, 0.00015762288239784539, 9.8865573818329722e-05, 0.00017198016576003283, 0.00027128466172143817, 0.0002780102367978543, 0.00030317480559460819, 0.00017167009355034679, 8.1187317846342921e-05, 0.00025385420303791761, 0.00023376001627184451, 0.00013547338312491775, 0.00018545419152360409, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -49,-7,-22,-19,93,-17,31,6,-5,-5,-10,6,-38,-5,11,-18,-22,18,27,-12,-15,19,50,31,7,-23,-42,9,31,7,19,6,1,-2,-19,-23,2,-68,-63,-9,5,-10,52,-24,-17,40,-95,-5,-29,-4,-12,40,-81,-3,52,-4,7,-16,5,-21,0,-10,-1,-35,-27,-25,-28,-27,-12,30,-7,2,19,10,18,-8,-30,2,127,-24,-125,14,-95,-19,-20,-17,33,1,-40,-10,7,-29,-2,20,-17,9, -22,39,52,-41,-44,-4,127,-31,1,-9,-31,34,-44,-6,-85,97,-15,92,110,-24,10,127,127,127,29,-3,46,68,127,42,127,-23,-78,-22,-82,-33,-19,-127,127,-74,-22,-125,3,-36,54,-44,-77,-6,39,8,33,127,-98,31,-81,16,-74,-10,-1,15,-9,-120,-120,-60,-50,-3,-4,-120,-5,32,-67,117,-127,-7,31,-17,-127,-102,-7,-70,-127,-1,33,-63,100,77,-54,29,-127,5,48,-11,12,127,-32,-87, -55,9,-26,-5,54,0,70,-9,-18,20,-3,4,-1,-7,6,-16,-15,20,-8,-16,0,-1,113,29,-2,-20,9,-14,21,16,9,11,-27,-10,-32,54,2,-81,-37,-15,2,25,47,-45,-5,-23,-57,-16,-13,-8,12,34,0,-11,1,6,75,-15,6,-13,-4,-4,-47,-35,-24,-22,127,-47,-6,30,11,9,17,12,17,17,-45,8,-34,-22,-66,3,-127,-12,4,-29,9,1,-48,-39,0,58,4,31,-19,12, 
  /* [0][1][][] */ -79,-2,22,-30,45,84,-41,-16,-5,-12,-19,-16,-127,17,28,69,-18,56,116,11,30,-24,123,-12,37,34,58,16,-4,-2,-3,-18,-117,-20,43,-2,-1,-108,-81,-127,-20,14,101,-43,-63,127,-127,-87,50,71,16,-42,-127,64,70,-19,19,-35,42,-5,12,-11,89,-52,-38,12,-20,-76,-12,-4,-127,18,62,121,30,-72,-93,-62,-58,-61,-78,-4,-49,-55,34,30,-60,58,-67,127,98,-75,127,3,-83,-8, 102,127,127,127,-127,-127,104,-56,127,127,-69,-79,-73,127,-29,127,127,-127,127,127,127,-70,18,-103,-127,-127,127,127,-122,127,-18,127,-117,127,127,-94,127,45,-8,-46,127,9,-127,-127,127,-37,111,127,127,-127,127,-106,125,127,-127,127,-127,127,-127,127,-109,127,105,-127,127,127,-18,127,-115,-127,-27,-127,-1,127,127,78,29,-127,90,-127,25,127,103,127,127,65,-127,127,-102,66,2,-27,-93,-34,-127,-32, -127,-21,26,-43,0,50,-32,15,-31,-4,8,127,-97,13,34,60,-28,67,65,6,24,-27,107,-3,40,23,49,5,-5,2,11,-11,-127,-37,62,127,3,-79,-90,-106,-21,-3,41,-39,-44,-59,-106,-107,38,74,0,-19,120,6,81,-30,107,-23,53,-33,6,-32,-127,-40,-62,-7,-51,-88,-11,12,-89,7,26,-91,21,127,-76,-34,-60,-8,-102,-9,-84,-71,7,23,-73,40,-35,-73,127,127,-41,-13,-85,1, 
  /* [0][2][][] */ -30,-36,-29,-30,49,-9,17,16,-9,11,24,-45,39,-7,11,-42,-4,9,-23,-21,-19,-12,1,-13,8,-13,-19,8,10,-4,-17,7,32,-7,10,-7,5,-11,-36,-1,-24,-3,27,10,24,10,-56,-5,-38,9,-34,-12,0,-41,29,-19,1,-22,14,-24,6,18,0,-45,-48,-27,115,18,24,31,5,-1,-5,-16,10,-21,-10,1,-18,-29,-17,9,-106,-4,-5,4,62,8,-3,-6,4,-15,-10,-18,-35,-12, -41,-56,45,-86,-48,0,74,127,-52,71,127,-38,-50,19,127,73,-11,-15,99,-40,-26,-25,103,-2,19,-23,20,26,-3,9,-82,-48,-58,-34,-79,-4,-72,-75,42,-66,-24,-127,-34,102,23,-32,-52,-9,10,-10,-7,4,49,14,-60,-41,-45,-51,52,-57,127,28,109,-22,-85,-53,-16,-53,127,39,-50,5,14,-18,38,-28,-17,-53,0,26,-96,-25,-78,-49,49,-127,6,9,-22,1,65,-3,14,-110,-72,127, -10,15,-7,-10,19,-20,17,20,-15,5,14,20,43,-3,5,-57,-10,30,-22,-14,-3,2,24,0,4,-17,-20,-1,1,9,-27,0,16,-1,0,10,1,-7,-37,11,-28,-11,15,-4,21,-3,-68,9,-31,-2,-8,2,-13,-46,13,-8,75,-11,15,-20,2,25,-4,-21,-25,-22,-22,28,22,19,-16,3,-46,-30,-3,-25,-17,9,91,-9,-28,1,-75,8,-16,1,65,-9,42,5,-5,19,5,-13,-36,0, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0056684883311390877, 0.013095024973154068, 0.0096680326387286186, 0.0079100346192717552, 0.0080986227840185165, 0.018748566508293152, 0.0047875060699880123, 0.0091870967298746109, 0.01386567484587431, 0.01091143861413002, 0.010297941975295544, 0.0069085541181266308, 0.0054789544083178043, 0.0082514276728034019, 0.0078636212274432182, 0.0069104745052754879, 0.014115883037447929, 0.011271724477410316, 0.0054925982840359211, 0.013668745756149292, 0.0096601396799087524, 0.0151500403881073, 0.0068627959117293358, 0.0085303299129009247, 0.10380453616380692, 0.0091676460579037666, 0.010944122448563576, 0.0064928913488984108, 0.012288314290344715, 0.0091459350660443306, 0.0065595177002251148, 0.01151682622730732, 0.0033628072123974562, 0.018858255818486214, 0.0090937521308660507, 0.0071505294181406498, 0.012258278205990791, 0.0045198947191238403, 0.0060529881156980991, 0.0043211467564105988, 0.017192281782627106, 0.0092065995559096336, 0.014007244259119034, 0.0055938060395419598, 0.0072605586610734463, 0.0093202525749802589, 0.0073973131366074085, 0.010723710991442204, 0.009099029004573822, 0.017183175310492516, 0.0093593653291463852, 0.0069157294929027557, 0.0042763827368617058, 0.012157371267676353, 0.010399911552667618, 0.010284469462931156, 0.0084174862131476402, 0.016994040459394455, 0.020510893315076828, 0.010846156626939774, 0.013282201252877712, 0.011492129415273666, 0.0055584665387868881, 0.0058460086584091187, 0.010197121649980545, 0.018322741612792015, 0.0048655583523213863, 0.0035871455911546946, 0.0085401972755789757, 0.01891796663403511, 0.00830118078738451, 0.012037593871355057, 0.023804420605301857, 0.006738404743373394, 0.0048531582579016685, 0.0087193204089999199, 0.0032796543091535568, 0.006339693907648325, 0.0066854823380708694, 0.0076066283509135246, 0.0049821734428405762, 0.012992785312235355, 0.004231858067214489, 0.014389526098966599, 0.0056636384688317776, 0.012839991599321365, 0.0082944268360733986, 0.0090150618925690651, 0.0071374457329511642, 0.0085457665845751762, 0.0058999373577535152, 0.0089933499693870544, 0.012675248086452484, 0.0086174430325627327, 0.0067362799309194088, 0.013949110172688961, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 7889, -2487, -3895, 3756, 1405, 2623, -412, -1811, 968, -4321, -84, -2633, 8536, -2321, -2558, -5869, 214, -2675, -10596, -1870, -2588, 1342, -4464, -505, -6, 6640, -7576, -4959, -1419, -2730, -158, -1076, 15592, 1057, -1292, -1277, -1916, 9989, 4163, 9799, -1732, 3783, -718, 7011, -793, 490, 12154, 938, -4249, -148, -3845, -1731, 318, -3036, 1013, 1273, -587, 1819, -244, 1321, -178, -1365, -1662, 7736, 7272, -1269, 14611, 13556, -569, -959, 7848, -729, 283, 119, -5460, 134, 15511, 11387, 7992, 11565, 10435, -1543, 7382, 4855, -2085, -1690, 6322, -5802, 7346, -979, -7127, -2114, -216, 1315, 17284, -1336, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.0001333762047579512, 0.00030811823671683669, 0.00022748312039766461, 0.00018611847190186381, 0.0001905558310681954, 0.00044114273623563349, 0.00011264720524195582, 0.00021616698359139264, 0.00032625117455609143, 0.00025673973141238093, 0.00024230452254414558, 0.00016255422087851912, 0.00012891658116132021, 0.00019415124552324414, 0.00018502637976780534, 0.0001625994045753032, 0.00033213844290003181, 0.00026521706604398787, 0.00012923761096317321, 0.00032161755370907485, 0.00022729740885552019, 0.00035647154436446726, 0.00016147755377460271, 0.0002007136499742046, 0.0024424598086625338, 0.0002157093258574605, 0.00025750877102836967, 0.00015277392230927944, 0.00028913680580444634, 0.00021519848087336868, 0.0001543416001368314, 0.00027098416467197239, 7.9124874901026487e-05, 0.00044372366392053664, 0.00021397064847406, 0.00016824775957502425, 0.00028843007748946548, 0.00010635046783136204, 0.0001424232468707487, 0.00010167404252570122, 0.00040452429675497115, 0.00021662587823811918, 0.00032958222436718643, 0.00013161897368263453, 0.00017083667626138777, 0.00021930006914772093, 0.0001740544248605147, 0.000252322613960132, 0.00021409480541478842, 0.00040431000525131822, 0.00022022036137059331, 0.00016272305219899863, 0.00010062077490147203, 0.00028605578700080514, 0.00024470381322316825, 0.00024198752362281084, 0.00019805850752163678, 0.00039985979674383998, 0.00048260926268994808, 0.00025520368944853544, 0.00031252240296453238, 0.00027040304848924279, 0.00013078744814265519, 0.00013755314284935594, 0.00023993228387553245, 0.00043112333514727652, 0.00011448372970335186, 8.4403429355006665e-05, 0.00020094582578167319, 0.000445128622232005, 0.00019532190344762057, 0.00028323751757852733, 0.00056010403204709291, 0.00015855069796089083, 0.0001141919638030231, 0.00020516048243734986, 7.7168340794742107e-05, 0.00014916926738806069, 0.00015730547602288425, 0.000178979491465725, 0.00011722760973498225, 0.00030571260140277445, 9.9573131592478603e-05, 0.000338577083311975, 0.00013326208863873035, 0.00030211746343411505, 0.00019516298198141158, 0.00021211910643614829, 0.00016793989925645292, 0.00020107686577830464, 0.0001388220553053543, 0.00021160823234822601, 0.00029824112425558269, 0.00020276337454561144, 0.00015850071213208139, 0.0003282143734395504, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 16,26,4,13,-26,-67,-1,3,-20,-67,12,7,56,-61,58,21,-91,-20,34,11,83,19,-60,9,3,71,122,73,16,78,60,-30,4,7,19,-18,36,28,-6,-14,111,9,35,-23,-5,-7,3,-38,19,-29,84,-7,-66,-9,36,36,-8,-47,12,14,-6,29,-55,-18,9,1,56,24,4,-17,27,34,9,42,13,38,44,-36,36,14,-21,51,30,25,-50,8,-18,62,12,9,-92,-16,17,26,127,64, 
  /* [1][0][][] */ -4,43,-47,-24,1,-58,73,-54,-68,-31,-47,-32,3,-38,1,-42,-26,-10,-17,-33,-23,-73,124,-34,15,1,4,44,-64,-5,-24,5,-6,10,6,10,-14,61,-55,73,35,10,7,-44,31,-43,-2,40,-87,17,50,-96,-28,41,64,63,38,21,-62,27,-49,1,2,-3,38,13,94,6,-43,-127,20,-22,21,58,-4,25,-69,-13,78,-34,30,-2,42,-56,-42,-34,-10,25,-16,-35,33,8,82,-38,-42,49, 
  /* [2][0][][] */ 9,-8,24,-10,77,44,-54,34,-61,42,27,-24,41,3,32,29,31,-27,-127,-6,-23,-45,-16,22,-3,-25,-41,10,-26,-28,-25,58,-13,-42,-6,22,-42,16,-21,-21,73,18,2,46,1,67,4,-1,-78,4,-20,23,-19,44,14,-62,37,23,44,27,-24,0,-11,57,32,-9,-28,-4,-2,-3,-20,-41,26,48,20,56,-53,-14,-20,-27,26,35,45,-21,-19,-42,-1,-51,-8,-21,-7,62,0,-21,73,-39, 
  /* [3][0][][] */ 51,-34,-20,-111,0,-20,119,-30,38,127,-73,-16,12,-14,-7,51,58,45,-43,38,-42,9,18,8,-37,92,42,-2,-33,-8,-77,69,-10,-18,46,-23,-5,-67,-16,52,3,18,-23,28,65,-41,-7,44,52,-23,9,-32,104,36,30,-13,4,-21,0,-51,-18,36,77,-11,-46,-21,115,-41,-31,-7,-62,30,29,-65,5,-70,9,-48,116,-10,-21,-57,-27,-49,-27,-54,67,69,-49,53,-58,3,15,-87,-20,29, 
  /* [4][0][][] */ -21,92,41,24,-1,10,-38,-24,12,-28,4,-16,24,43,-10,38,-7,-44,-26,-66,22,-34,-69,26,-35,-43,-11,14,-40,127,-53,-22,-5,-45,2,-17,69,43,-35,8,27,10,13,-34,-53,-8,58,-12,30,-25,-46,0,-71,36,39,21,12,64,-25,26,-36,-71,-42,11,59,16,-62,-7,1,-4,13,-72,-14,57,50,76,-27,26,-57,51,21,61,29,-60,36,-62,-19,-78,-27,-58,-38,-11,-5,5,29,-19, 
  /* [5][0][][] */ -9,-10,43,-17,1,-12,-13,-1,45,8,-19,-1,-22,-21,24,-21,-11,5,-55,-33,-24,20,-9,18,40,-56,74,-17,-5,38,25,79,-4,-85,22,19,-34,-42,-26,3,-50,-4,-30,11,2,28,-83,34,-18,23,60,2,24,-71,3,26,-30,-58,17,-38,54,16,28,53,-46,9,102,-28,11,-19,20,5,4,41,50,15,-17,-11,127,39,-36,-7,-41,27,43,68,-1,101,-7,-39,-5,3,19,-23,-48,13, 
  /* [6][0][][] */ 24,-59,58,11,-46,95,-50,-101,-16,-47,-77,30,-14,7,-39,78,3,51,36,-34,-72,-13,-60,-65,1,-36,-9,60,-100,28,-20,-24,23,80,-17,-41,-4,-23,17,-8,-59,35,36,-34,17,31,-82,-31,55,13,-71,-127,59,27,-31,-18,-7,-34,17,-6,-16,-37,19,-2,47,-67,-51,-60,-93,10,10,-62,-26,-81,23,-85,86,16,-49,40,-11,71,20,-82,60,-31,-25,1,-57,59,-78,78,39,-27,57,-102, 
  /* [7][0][][] */ 14,-14,-65,65,-37,11,50,-27,-100,5,83,44,-3,-64,-10,-15,-7,-11,1,30,-64,-38,-69,-43,44,64,8,75,12,62,8,28,-87,-127,47,102,-3,26,-41,8,-5,-10,17,-88,48,46,84,70,-1,44,-51,-9,16,-48,34,-74,-29,44,-88,-10,53,19,-12,-45,76,-58,104,0,-79,-32,78,20,-11,-38,-92,-26,45,-35,115,-18,9,-16,-66,-22,50,21,-74,40,8,17,26,26,50,-3,108,-1, 
  /* [8][0][][] */ -22,-48,16,5,-3,-8,25,3,-17,-7,57,56,25,29,-35,4,83,-14,3,2,-14,-85,-34,-20,-23,-60,85,0,-30,60,13,-41,-5,-6,9,21,-47,-18,18,-26,5,42,23,-29,8,-6,30,1,35,0,56,21,-7,12,-47,6,-2,123,-61,-1,-17,-65,-68,1,-91,-42,-23,23,-8,8,44,-39,-22,-127,51,-109,-12,23,-68,33,-26,-10,3,64,65,-58,-38,57,-35,86,22,-18,-42,2,-4,-53, 
  /* [9][0][][] */ -22,-32,-28,16,8,29,4,52,-37,-4,70,60,-24,52,36,-44,-18,43,-24,-25,8,47,0,18,-19,24,4,20,40,-1,16,-5,-16,-20,16,60,-16,-10,34,-5,-10,-23,17,0,13,51,1,47,-44,15,-8,38,127,12,-7,-5,23,-17,41,18,-26,3,83,9,8,20,59,3,34,2,-20,25,1,-127,-36,-116,-31,-14,24,-5,-11,30,-1,-43,36,14,-49,-5,-11,107,42,39,59,38,-21,33, 
  /* [10][0][][] */ 18,46,13,-10,-16,15,-39,-37,70,-4,-49,26,32,12,-10,-65,-34,-1,32,-10,31,-20,-18,-42,18,-14,-104,44,-27,53,3,5,27,24,-24,-6,17,10,7,-9,30,-9,60,-44,-35,1,18,18,13,6,-4,-26,-26,-9,-2,32,-23,3,-3,-14,-14,-42,4,5,-10,-15,-89,-26,-48,-13,49,-25,-23,33,38,15,27,-21,-97,3,-15,29,0,-6,8,0,-90,-127,-36,36,4,28,53,-38,24,28, 
  /* [11][0][][] */ 3,-51,-4,15,-62,21,-1,-2,70,-34,-28,-33,26,22,3,-12,-35,57,36,-78,2,39,24,-26,39,18,61,0,22,-80,-25,22,20,108,-127,10,16,-9,60,11,-67,51,-33,19,-57,9,-10,-3,46,-30,-25,-17,-15,12,-86,103,-31,2,-13,-25,21,-7,-5,-78,1,-39,-118,-81,0,-37,-91,22,39,8,-11,-5,32,54,-123,-42,-7,-9,-14,0,-20,-9,61,84,16,-51,1,3,-38,24,89,25, 
  /* [12][0][][] */ 26,15,-42,-28,0,-20,8,26,54,-33,11,-10,-9,-16,-19,6,1,-32,-18,14,14,57,3,47,-38,-24,-127,-3,77,-17,29,5,-24,-63,65,-17,32,-10,-3,13,-11,-57,17,22,47,-15,19,-22,-60,-3,-51,77,67,-27,28,-69,0,13,-35,-35,13,45,69,-3,-14,-9,28,22,99,29,25,39,3,-17,-9,-3,-23,-60,41,-71,25,-40,29,-41,10,0,3,-100,-11,27,-45,19,5,67,17,27, 
  /* [13][0][][] */ -8,15,-67,21,23,18,-13,-1,32,69,-39,25,-57,-13,43,-51,1,53,59,16,-28,-38,-8,12,33,60,-17,26,17,29,44,-14,-33,65,-7,30,19,-39,-46,-44,0,-10,25,6,50,44,-38,37,-31,35,-8,-8,-23,-45,59,26,5,-46,-10,-6,26,20,5,-36,9,88,122,34,23,4,-39,-6,38,44,-81,51,38,-74,127,-40,-10,-30,23,4,29,52,-32,-30,-14,-22,2,40,45,15,56,41, 
  /* [14][0][][] */ -12,50,16,33,-65,-56,11,64,-90,-35,88,15,-79,3,65,-30,-49,43,-44,16,-35,28,-109,8,-67,0,-52,-119,17,-12,24,82,-58,30,3,-4,-27,-66,-17,-35,29,-38,42,-25,-14,50,-71,34,-9,-50,81,24,-9,39,-43,28,-47,43,-9,57,28,71,-4,46,30,-48,11,-67,34,60,62,40,-68,24,2,8,43,-10,43,28,-70,123,4,-127,93,-3,16,-3,-100,-18,-25,-9,-38,-2,40,24, 
  /* [15][0][][] */ 77,-40,21,27,27,-1,-19,-31,17,24,-74,-19,58,64,-24,-21,-18,15,-54,34,2,-23,7,22,59,-25,84,23,45,-35,-44,63,54,53,-15,-85,59,59,51,58,73,23,-18,3,-37,-127,24,-43,-24,-39,-19,-26,-13,-43,-26,52,-25,-2,-21,11,2,-58,-42,21,32,47,-55,28,-6,-25,-11,3,-3,-122,-47,-90,3,13,-105,26,72,-35,42,22,-37,-13,-13,-15,35,74,8,-59,-38,-32,35,-45, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0024878606200218201, 0.0026600202545523643, 0.0031455282587558031, 0.002439320320263505, 0.0027895960956811905, 0.005482046864926815, 0.0030278970953077078, 0.0021112202666699886, 0.0048460438847541809, 0.003960141446441412, 0.0044246832840144634, 0.0028879484161734581, 0.0033525633625686169, 0.0048103309236466885, 0.0028781031724065542, 0.0029628328047692776, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -25406, -3104, 2041, -15001, 10275, -13568, 18646, -13665, 10947, -10319, 16264, 15219, -1780, -27969, 375, 7092, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 5.8537898439681157e-05, 6.2588711443822831e-05, 7.4012430559378117e-05, 5.739577318308875e-05, 6.5637555962894112e-05, 0.00012898934073746204, 7.1244641731027514e-05, 4.9675771151669323e-05, 0.00011402456584619358, 9.3179798568598926e-05, 0.00010411020048195496, 6.795172521378845e-05, 7.8883844253141433e-05, 0.00011318425822537392, 6.7720073275268078e-05, 6.9713714765384793e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -37,12,-11,-60,-31,-65,-83,-33,48,-78,28,-59,110,-127,-3,-111, 
  /* [1][0][][] */ -109,107,-111,-114,-66,53,-12,33,-22,-32,111,-65,47,127,-11,26, 
  /* [2][0][][] */ -15,17,-76,15,-16,-11,21,-84,-98,100,94,6,55,48,-33,127, 
  /* [3][0][][] */ -37,-46,1,-30,-80,24,-51,-121,5,15,52,-81,-67,-44,-127,-45, 
  /* [4][0][][] */ 79,15,-21,50,-67,-14,-127,46,27,88,19,59,24,-3,-48,-107, 
  /* [5][0][][] */ -70,89,-80,-10,40,-40,-11,-82,91,-35,14,-46,28,-106,-127,-84, 
  /* [6][0][][] */ -23,-50,-28,22,-78,44,47,1,-9,-34,127,-31,4,10,-111,-4, 
  /* [7][0][][] */ -13,97,127,-67,78,116,-2,-62,52,66,-90,-30,48,9,23,59, 
  /* [8][0][][] */ -44,-8,31,-12,58,16,87,127,-69,-19,-81,-91,26,67,-55,-77, 
  /* [9][0][][] */ 8,28,127,29,-98,-46,-99,-113,80,19,114,7,-63,-122,56,-41, 
  /* [10][0][][] */ -10,-105,-4,-80,-127,58,39,12,-16,-58,0,38,-19,41,-105,38, 
  /* [11][0][][] */ 124,-54,-18,100,-115,-39,62,-10,119,120,-45,58,21,-95,-13,127, 
  /* [12][0][][] */ -71,-49,127,-4,56,-12,7,46,63,-15,81,74,-31,16,-79,13, 
  /* [13][0][][] */ -1,-35,9,22,-7,9,127,33,-76,18,9,15,-21,80,86,-54, 
  /* [14][0][][] */ 74,-85,127,-9,82,77,70,47,66,86,33,28,60,-44,25,-61, 
  /* [15][0][][] */ 12,127,-10,-34,39,125,-54,67,-31,-31,-28,-27,-33,115,-5,-47, 
  /* [16][0][][] */ -44,58,117,-74,30,80,24,-22,-2,8,-21,56,89,-16,89,127, 
  /* [17][0][][] */ 3,113,119,-127,32,-36,-7,-91,-43,108,-40,60,-79,-42,118,-78, 
  /* [18][0][][] */ -69,1,-83,-75,87,86,-27,-88,17,74,127,68,22,113,-25,9, 
  /* [19][0][][] */ 29,98,94,62,51,-36,-27,8,-17,127,24,83,49,46,-40,17, 
  /* [20][0][][] */ 84,-21,-4,68,-74,-27,-16,71,-40,-55,-127,-32,84,-41,43,7, 
  /* [21][0][][] */ -63,-57,-18,87,-14,-12,-127,69,10,10,10,7,-51,4,-78,-5, 
  /* [22][0][][] */ 1,-3,-56,-51,127,-20,-32,46,62,76,27,57,-25,10,-16,23, 
  /* [23][0][][] */ -55,24,-40,28,-3,75,127,75,-27,107,2,-35,17,42,-67,-17, 
  /* [24][0][][] */ 38,-88,60,17,127,24,77,-64,66,25,48,46,-82,29,7,-31, 
  /* [25][0][][] */ 127,-40,75,-6,10,-2,-45,88,121,-9,-76,0,120,-72,82,34, 
  /* [26][0][][] */ 87,46,111,127,91,-33,-89,19,2,96,29,121,32,-79,45,-65, 
  /* [27][0][][] */ -34,57,-77,34,-8,120,-5,-127,60,-75,112,7,24,-83,123,89, 
  /* [28][0][][] */ -15,28,-91,-127,13,-78,13,-60,-91,71,-58,33,-5,45,-28,73, 
  /* [29][0][][] */ 45,71,-43,19,41,67,-38,-36,75,26,-11,62,-127,-8,-44,67, 
  /* [30][0][][] */ -20,95,-118,-64,87,-43,11,21,-54,68,-80,-1,10,74,-9,127, 
  /* [31][0][][] */ 30,-101,74,49,65,-63,-75,55,-31,-6,32,-37,-71,65,38,127, 
  /* [32][0][][] */ -47,84,5,68,-89,75,0,67,2,-127,19,-101,23,49,53,40, 
  /* [33][0][][] */ -71,-24,51,80,-17,16,-47,11,-45,-36,6,-4,-4,-5,17,127, 
  /* [34][0][][] */ -14,7,-93,-89,64,-13,-3,68,18,-9,1,-17,-50,-18,-27,127, 
  /* [35][0][][] */ 74,-17,29,-12,1,8,-78,-20,-14,-127,-58,4,-17,-36,62,-16, 
  /* [36][0][][] */ -1,28,-127,-11,44,100,-27,64,-32,30,48,34,-6,28,-48,45, 
  /* [37][0][][] */ 75,50,74,-29,54,-114,33,-33,-127,92,-95,-25,42,16,114,29, 
  /* [38][0][][] */ -31,127,32,-44,56,32,61,-76,8,12,-117,34,-70,-105,-85,8, 
  /* [39][0][][] */ 84,24,-127,-117,-9,-28,20,-45,1,-8,4,-42,63,4,-97,-54, 
  /* [40][0][][] */ -41,6,-77,-98,-58,-21,27,-127,-16,8,-9,-11,37,66,61,59, 
  /* [41][0][][] */ -22,-74,-16,127,-17,7,-64,-27,-24,-61,73,-51,-64,2,11,34, 
  /* [42][0][][] */ -35,77,-6,-127,27,13,-5,-21,60,11,-54,18,71,-21,-28,-2, 
  /* [43][0][][] */ -7,34,14,4,127,17,17,33,17,36,-5,-88,-110,-49,-14,-20, 
  /* [44][0][][] */ 89,-13,15,48,-17,-10,12,36,29,-39,34,4,127,7,-40,-27, 
  /* [45][0][][] */ 17,-94,-64,27,-66,-104,11,40,55,-24,10,50,-111,127,47,-50, 
  /* [46][0][][] */ -31,-92,30,49,-6,-3,-92,32,22,-54,58,-4,44,84,74,127, 
  /* [47][0][][] */ -30,-42,22,72,14,14,39,5,14,-55,-127,-48,34,-42,-60,17, 
  /* [48][0][][] */ -93,74,1,-30,29,30,-16,-82,32,-4,23,-54,21,-127,-52,-7, 
  /* [49][0][][] */ -74,-2,46,-34,5,18,99,127,-25,-31,-20,34,-56,20,-41,2, 
  /* [50][0][][] */ 50,29,-78,3,33,-127,-28,-7,-86,35,-40,6,25,-68,-125,-33, 
  /* [51][0][][] */ -47,64,-41,117,-31,43,-53,-69,-34,-106,12,-59,-23,26,-18,127, 
  /* [52][0][][] */ -127,9,25,-4,19,54,57,9,3,-78,-37,-45,-95,-51,-119,-3, 
  /* [53][0][][] */ -43,-41,-43,-127,-4,-9,10,64,28,-45,-48,46,-34,33,52,58, 
  /* [54][0][][] */ 2,-56,-5,-17,-56,67,57,-26,-46,-87,58,43,-6,0,-127,53, 
  /* [55][0][][] */ -17,-43,-58,33,51,-36,83,114,-80,-67,-127,-20,72,-16,-15,56, 
  /* [56][0][][] */ 63,-53,-51,-24,-127,12,-119,7,3,-4,-54,2,113,-63,59,7, 
  /* [57][0][][] */ -50,11,33,-47,127,50,47,27,-36,38,7,-10,-42,70,-107,-19, 
  /* [58][0][][] */ 26,-2,-5,-8,35,-6,-44,-56,55,-127,-62,-10,-73,-52,-33,63, 
  /* [59][0][][] */ -67,-22,16,11,12,50,-111,-26,84,127,-80,-1,-17,6,-19,0, 
  /* [60][0][][] */ 36,-34,-11,12,-127,-32,31,-5,-3,26,-13,51,12,-28,35,32, 
  /* [61][0][][] */ 32,60,-69,-25,-43,-20,-114,-100,-30,3,49,127,64,-62,76,81, 
  /* [62][0][][] */ 34,-20,36,-33,-20,31,60,119,-24,127,16,92,35,35,62,91, 
  /* [63][0][][] */ 29,-113,-26,-9,-62,14,45,-12,12,-29,6,-23,-28,127,94,25, 
  /* [64][0][][] */ -17,-5,-127,-39,18,53,38,-39,6,-97,31,10,60,-48,-60,107, 
  /* [65][0][][] */ -9,-4,75,37,92,-45,57,74,-13,22,-127,-51,9,70,-60,-23, 
  /* [66][0][][] */ -48,-127,1,-123,-41,-122,55,-24,-4,-28,4,88,-65,-44,-55,72, 
  /* [67][0][][] */ -41,-68,-75,5,-75,127,-8,-123,-71,-22,-36,-118,19,-13,-65,46, 
  /* [68][0][][] */ 114,50,37,-11,-75,19,-62,-71,-96,-127,-17,-20,24,-21,68,-42, 
  /* [69][0][][] */ 40,8,65,-26,2,-46,-65,25,-13,127,-28,-6,21,35,55,-40, 
  /* [70][0][][] */ 34,-21,-31,62,-127,26,-17,-84,98,126,33,77,44,-52,7,23, 
  /* [71][0][][] */ 127,-53,57,72,-89,-28,46,-37,114,10,-58,53,73,-95,10,27, 
  /* [72][0][][] */ -21,-43,53,113,46,3,-127,86,65,4,57,10,-24,-46,-47,79, 
  /* [73][0][][] */ 88,7,54,-127,44,-92,-60,25,-4,96,-29,25,-4,-113,38,-19, 
  /* [74][0][][] */ 56,0,38,36,-127,-38,38,-3,-60,-10,17,-32,26,-71,7,13, 
  /* [75][0][][] */ 71,112,-97,-13,61,82,-28,-75,-27,-18,52,127,-105,50,62,79, 
  /* [76][0][][] */ -65,-26,11,-44,-49,4,87,-38,-81,42,89,61,-46,-127,-12,79, 
  /* [77][0][][] */ -59,127,-48,18,-48,-53,54,67,28,-73,3,79,-5,70,-17,77, 
  /* [78][0][][] */ 116,46,-97,85,-101,85,-127,-38,7,-28,-62,-2,26,-125,37,100, 
  /* [79][0][][] */ -78,-36,127,32,5,-94,-56,-42,-18,9,6,-17,-80,120,-61,64, 
  /* [80][0][][] */ 93,114,4,-126,-44,54,127,-67,6,3,-33,34,114,-47,29,25, 
  /* [81][0][][] */ 48,-79,15,-106,127,55,-20,126,92,25,-22,-69,-20,27,-71,-62, 
  /* [82][0][][] */ 62,23,64,-18,127,-111,46,63,3,112,-48,30,-27,-51,46,-97, 
  /* [83][0][][] */ -17,91,8,-7,101,71,127,97,-23,34,-27,-67,-92,105,-56,-90, 
  /* [84][0][][] */ -6,-84,6,91,20,-87,-124,38,-77,83,-74,-24,-127,59,-20,-76, 
  /* [85][0][][] */ -116,61,-15,17,2,-52,-68,-49,-1,63,-6,-84,-127,-111,-86,42, 
  /* [86][0][][] */ -33,67,120,117,40,-33,50,17,2,26,-41,-87,33,93,-127,-88, 
  /* [87][0][][] */ -14,54,127,-24,-92,-28,17,3,38,-21,8,38,-46,16,-12,-8, 
  /* [88][0][][] */ -23,-82,-127,27,26,15,4,53,-2,-57,-99,-75,108,-9,49,30, 
  /* [89][0][][] */ 42,26,3,-127,-3,-58,-55,42,114,-19,38,-89,23,-20,52,-76, 
  /* [90][0][][] */ -13,56,3,22,-52,43,51,91,11,-65,6,127,47,23,-37,76, 
  /* [91][0][][] */ -74,1,-16,47,91,49,-20,-122,-46,36,12,44,-87,-127,-56,-26, 
  /* [92][0][][] */ -28,53,0,-37,-127,-4,-87,61,-33,66,88,92,-21,-26,84,3, 
  /* [93][0][][] */ 107,34,127,29,-97,-87,-9,39,-5,-58,-49,-87,6,-74,-9,-20, 
  /* [94][0][][] */ -37,-127,39,-109,27,40,-36,5,98,-19,-6,47,1,50,-60,40, 
  /* [95][0][][] */ -49,-49,-27,-40,99,118,-33,45,64,62,-56,48,-41,127,-48,46, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0016862581251189113, 0.0012176556047052145, 0.0014050431782379746, 0.0026616319082677364, 0.0017353313742205501, 0.0011744342045858502, 0.0010467445245012641, 0.0024559316225349903, 0.002435195492580533, 0.0012688464485108852, 0.002113652415573597, 0.0014243958285078406, 0.0018237321637570858, 0.0028511777054518461, 0.0021321345120668411, 0.002109363442286849, 0.002422454534098506, 0.0010685124434530735, 0.0014240267919376493, 0.0022594621405005455, 0.0017260905588045716, 0.0014589362544938922, 0.0013521896908059716, 0.0024521895684301853, 0.0023338741157203913, 0.0016277842223644257, 0.00079895445378497243, 0.0016975727630779147, 0.0026214933022856712, 0.003307330422103405, 0.0015143532073125243, 0.0026100066024810076, 0.0013376323040574789, 0.003760521300137043, 0.0018747539725154638, 0.0020321393385529518, 0.0024242904037237167, 0.0018668522825464606, 0.0020181403961032629, 0.0020927058067172766, 0.0017037963261827826, 0.0039914236404001713, 0.0032465392723679543, 0.0016330458456650376, 0.0036589864175766706, 0.0026100880932062864, 0.0028353722300380468, 0.0023366410750895739, 0.0021272739395499229, 0.0031894044950604439, 0.0025664127897471189, 0.001667477423325181, 0.0019405335187911987, 0.0039734300225973129, 0.001590812811627984, 0.0020670534577220678, 0.0022058256436139345, 0.0020975577645003796, 0.0012138925958424807, 0.001731797237880528, 0.0026551629416644573, 0.0012222903314977884, 0.0021591100376099348, 0.0018223065417259932, 0.0013922926736995578, 0.0013489744160324335, 0.0018468479393050075, 0.0015644587110728025, 0.001697949948720634, 0.0021213099826127291, 0.0013816815335303545, 0.0020683156326413155, 0.0022074836306273937, 0.0014819921925663948, 0.0024724472314119339, 0.0013922557700425386, 0.0023526859004050493, 0.0026787405367940664, 0.0016792909009382129, 0.0021966882050037384, 0.0016634807689115405, 0.0013756504049524665, 0.0008022426045499742, 0.002068814355880022, 0.0015115875285118818, 0.0015388469910249114, 0.0020918759983032942, 0.0035856161266565323, 0.00091088714543730021, 0.0021018637344241142, 0.0026859727222472429, 0.00223353854380548, 0.0010494863381609321, 0.0020181771833449602, 0.0026199747808277607, 0.0027790642343461514, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 5320, 3656, 977, -970, 4700, 8457, 9425, 1167, -125, 7211, 464, -3902, 3274, 1671, 653, -790, 3114, 7771, -972, -33, 4156, 6600, 7447, -1344, -2638, -543, 12617, -582, 1026, 304, 6425, -1038, 7065, 1526, 4304, -3505, 439, -3481, 328, 1787, 3177, 554, 1267, -909, 683, 1413, 2217, 2744, 3306, 1764, 3090, 2762, -1976, 975, 1584, 2370, 1879, 2124, 7313, 1695, -963, 6921, 3010, 3760, 4206, 6424, -3562, 2873, 4129, -535, 5795, 860, 2157, 2836, 2672, 2991, -803, 1357, 2369, 2489, 3225, 3252, 11352, 671, 2697, 5239, 870, -705, 11265, -442, 389, -1009, 9300, 2156, -44, -556, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00014735874719917774, 0.00010640850086929277, 0.00012278392387088388, 0.00023259471345227212, 0.00015164715296123177, 0.00010263146396027878, 9.1472917119972408e-05, 0.00021461897995322943, 0.00021280688815750182, 0.00011088196333730593, 0.00018470788199920207, 0.00012447511835489422, 0.00015937232819851488, 0.00024915873655118048, 0.00018632298451848328, 0.00018433306831866503, 0.00021169347746763378, 9.3375172582454979e-05, 0.00012444287131074816, 0.0001974499027710408, 0.00015083962352946401, 0.00012749353481922299, 0.00011816516780527309, 0.00021429196931421757, 0.00020395261526573449, 0.00014224882761482149, 6.9819041527807713e-05, 0.00014834750618319958, 0.00022908707614988089, 0.00028902103076688945, 0.00013233631034381688, 0.00022808328503742814, 0.00011689302482409403, 0.00032862447551451623, 0.00016383102047257125, 0.0001775846176315099, 0.00021185391233302653, 0.00016314050299115479, 0.00017636126722209156, 0.00018287739658262581, 0.00014889136946294457, 0.00034880256862379611, 0.00028370859217830002, 0.0001427086244802922, 0.00031975153251551092, 0.00022809040092397481, 0.00024777752696536481, 0.00020419440988916904, 0.00018589822866488248, 0.00027871571364812553, 0.00022427371004596353, 0.00014571753854397684, 0.00016957936168182641, 0.0003472301468718797, 0.0001390179677400738, 0.00018063568859361112, 0.00019276271632406861, 0.00018330139573663473, 0.00010607965668896213, 0.00015133831766434014, 0.00023202940064948052, 0.00010681351704988629, 0.00018868032202590257, 0.0001592477347003296, 0.00012166968372184783, 0.00011788418487412855, 0.00016139236686285585, 0.00013671493798028678, 0.00014838046627119184, 0.00018537705182097852, 0.00012074239930370823, 0.00018074597755912691, 0.00019290759519208223, 0.00012950834934599698, 0.00021606223890557885, 0.00012166646047262475, 0.00020559653057716787, 0.00023408980632666498, 0.00014674989506602287, 0.00019196420907974243, 0.00014536827802658081, 0.00012021535076200962, 7.0106383645907044e-05, 0.00018078956054523587, 0.00013209461758378893, 0.00013447678065858781, 0.00018280488438904285, 0.00031333984225057065, 7.9600613389629871e-05, 0.00018367769371252507, 0.00023472181055694818, 0.0001951844897121191, 9.1712521680165082e-05, 0.00017636448319535702, 0.00022895437723491341, 0.00024285688414238393, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 23,127,7,20,-36,8,43,54,46,-59,-30,48,-14,74,2,12,-52,17,4,37,26,52,91,127,11,-16,-38,21,-13,17,20,-23,-82,-5,-23,61,-24,60,1,13,18,-34,-2,29,-111,-7,-12,-26,-27,8,-21,2,5,68,-28,-1,-93,-67,-54,-127,-101,42,-75,12,-19,26,86,-39,-14,55,32,-31,-84,12,44,42,30,-30,-47,12,-5,-73,56,-75,-58,-54,-20,3,-103,1,-54,39,66,-8,50,-5, -45,-39,41,121,-4,77,-16,3,55,28,-127,78,-40,-43,-104,127,-127,50,47,69,105,15,109,78,24,7,5,66,-1,127,-5,-127,37,69,7,34,72,90,-23,-106,127,-5,84,127,-29,-82,127,-88,-24,-94,-127,-7,9,127,-11,-127,14,38,-127,-102,14,-122,-48,78,-13,77,94,-63,8,127,127,-19,-114,37,-35,-127,32,-25,-62,127,-11,-72,126,-103,-89,-45,97,47,69,103,-27,0,127,-23,127,23, 13,-73,29,14,-18,-7,-1,44,7,71,-41,42,-10,80,-2,-64,-23,19,12,36,44,58,73,113,11,-32,46,41,4,-1,-9,-48,-61,-107,-29,30,-1,45,20,-3,-9,20,-20,61,-58,13,-6,17,48,-6,0,13,1,-5,-5,12,20,-84,-3,-76,-100,44,-86,2,35,21,-58,-41,-13,8,16,-15,-42,-35,-17,28,14,-6,-74,-22,5,-68,39,-34,-20,-41,24,-38,-44,-7,-10,37,19,54,-11,-12, 
  /* [0][1][][] */ 109,-20,77,127,-9,-61,120,49,-37,-127,-94,127,16,-127,-50,64,-39,-41,75,39,-127,4,-96,-64,-12,39,-127,127,-80,41,127,54,-1,77,15,127,-127,65,-12,-64,60,-127,24,70,-127,-95,-13,-127,-123,-60,-125,22,83,-34,81,-16,-127,-12,-78,-8,-56,-53,-36,58,-90,-25,127,-90,-26,48,-63,-108,-111,89,127,-125,127,62,-100,-58,127,-127,-41,116,-57,-10,7,78,-10,32,-65,21,-8,-117,69,-23, -127,19,-23,74,-74,-127,-127,-127,53,-4,-68,9,-103,-75,-28,96,-111,-127,127,127,20,-127,-127,113,-127,127,-10,54,-49,-15,-119,42,-127,91,127,-33,63,127,127,-91,-35,18,20,-1,6,-127,-105,-101,-30,-67,-111,127,39,59,65,-72,47,33,52,-49,27,-33,-127,127,-13,-127,122,127,11,83,-111,-43,11,55,-110,-103,111,127,100,-56,-98,-25,-127,82,-127,-100,127,127,127,127,-127,-127,-89,-77,82,127, 66,37,127,87,3,-21,5,30,-48,83,-64,71,21,-22,-127,62,16,-28,41,21,-115,24,-56,-32,-6,10,114,0,127,72,18,-115,-47,-127,-4,73,-104,1,-17,-29,-15,104,20,91,-41,-43,-12,-61,127,-127,-101,5,54,-64,-127,20,77,-21,-98,66,-61,-46,0,56,127,-38,-15,-40,-35,11,-29,-30,-127,-127,-14,-60,16,-19,-127,-52,-77,-110,-23,127,-88,20,11,-6,-2,-12,-20,37,-13,127,-1,-15, 
  /* [0][2][][] */ 31,-113,25,-34,4,17,35,38,-47,-32,20,-46,24,-29,1,45,-4,17,-11,63,3,49,36,-4,19,33,1,3,-26,24,-17,-1,-35,-11,-19,-12,32,1,3,-44,10,21,-24,-46,-28,-14,-31,28,18,74,-38,50,-11,-1,-40,-13,-11,-25,21,2,-35,4,33,-8,-4,38,-101,-32,24,18,13,72,-1,20,30,-14,-22,-33,19,-23,1,-19,-15,-77,-63,28,-19,-11,-36,53,13,22,-16,5,-1,-16, -54,15,120,10,127,65,-30,-4,-127,11,-112,-66,127,-37,-41,30,-13,50,-2,-55,26,26,59,19,58,-52,-4,60,11,114,-23,0,-65,33,12,-57,83,42,15,-127,-5,10,-127,-47,-20,-11,-70,-29,-9,-47,-100,103,127,-56,-42,-57,0,127,-14,-11,127,-127,42,82,-25,29,-82,-21,127,-1,22,127,-76,8,-8,-102,1,-42,-55,-27,-10,-26,-23,-85,-40,127,25,3,109,66,65,17,-26,-10,10,9, 3,105,-12,-3,-1,1,-12,38,18,65,32,-2,19,-22,-26,35,-32,10,-3,27,-3,37,22,-14,9,23,8,24,23,14,-39,-81,-42,-23,-14,-30,39,-35,9,-18,-15,-7,-2,-18,-38,-8,-20,23,33,86,-62,-6,4,-2,12,4,12,-3,21,51,-62,21,24,0,26,15,-92,15,18,16,18,94,-10,-14,-4,-9,-22,-1,12,0,-3,-34,-11,-26,-23,20,-26,-24,-31,53,1,11,-15,9,-24,-8, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.0093982210382819176, 0.0067790178582072258, 0.0059234090149402618, 0.0069744759239256382, 0.012460950762033463, 0.01427749264985323, 0.012540405616164207, 0.0097869262099266052, 0.013428682461380959, 0.0072960867546498775, 0.0056245899759232998, 0.011612052097916603, 0.012353167869150639, 0.0059800026938319206, 0.0090946778655052185, 0.0082660429179668427, 0.0075722108595073223, 0.012588177807629108, 0.0092381108552217484, 0.0055307452566921711, 0.0072746556252241135, 0.012878499925136566, 0.0094104697927832603, 0.008650192990899086, 0.032399244606494904, 0.0085658030584454536, 0.010532067157328129, 0.00587116414681077, 0.0084800515323877335, 0.0064090127125382423, 0.014315872453153133, 0.014925824478268623, 0.0071159107610583305, 0.0069006020203232765, 0.012015644460916519, 0.019797647371888161, 0.0075744334608316422, 0.011164761148393154, 0.016364829614758492, 0.0055522657930850983, 0.0074197989888489246, 0.0076559060253202915, 0.011433903127908707, 0.010219926945865154, 0.0043922173790633678, 0.0049905972555279732, 0.0067635658197104931, 0.0061988430097699165, 0.0081313075497746468, 0.0098890569061040878, 0.0041911695152521133, 0.0050834640860557556, 0.013733601197600365, 0.010860626585781574, 0.0073283151723444462, 0.009149583987891674, 0.0056480546481907368, 0.008798724040389061, 0.0070693274028599262, 0.0055381939746439457, 0.0053298408165574074, 0.0076559176668524742, 0.006521846167743206, 0.0046919994056224823, 0.0077136214822530746, 0.012843290343880653, 0.013228162191808224, 0.00592760369181633, 0.009814913384616375, 0.007089562714099884, 0.01102476567029953, 0.0046486654318869114, 0.0064335265196859837, 0.012185829691588879, 0.0074037779122591019, 0.0048245727084577084, 0.0079526286572217941, 0.0074696410447359085, 0.0067282360978424549, 0.008909040130674839, 0.0077257705852389336, 0.0054526734165847301, 0.012556429021060467, 0.0082848956808447838, 0.0052579096518456936, 0.0096054030582308769, 0.0072180638089776039, 0.0093903178349137306, 0.013986799865961075, 0.0092058088630437851, 0.0047595957294106483, 0.015551921911537647, 0.0084232734516263008, 0.011480063199996948, 0.0072367098182439804, 0.013850421644747257, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 407, -2503, -3315, -4790, 556, 3249, 49, 841, 621, -526, 6962, -1733, -61, 7051, 6707, -4594, 11992, 2263, -3707, -657, 1415, -798, -1726, -2931, 544, -3332, 484, -3222, -1255, -5204, 1555, 309, 12780, -253, -3136, 374, -757, -1714, -1125, 6257, 516, -846, 571, -1353, 11505, 11304, 2915, 9335, -104, 5337, 13253, -3473, -359, -795, -612, 7194, -1065, 375, 10395, 8967, 6663, 8680, 8477, -7352, -787, 2665, -2113, 5893, -3930, -2652, 1482, 685, 11096, -1394, -1119, 11393, -1076, -1564, 6833, 307, -22, 11079, 1963, 3471, 12820, 2075, -4348, -3006, -5614, -4783, 9206, 1080, -484, 967, -3667, -3030, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00022113461454864591, 0.00015950630768202245, 0.00013937432959210128, 0.00016410532407462597, 0.00029319885652512312, 0.00033594100386835635, 0.00029506837017834187, 0.00023028062423691154, 0.00031596899498254061, 0.00017167264013551176, 0.00013234329526312649, 0.00027322475216351449, 0.0002906627778429538, 0.00014070594625081867, 0.00021399241813924164, 0.00019449513638392091, 0.00017816967738326639, 0.00029619241831824183, 0.0002173673128709197, 0.00013013518764637411, 0.00017116837261710316, 0.00030302352388389409, 0.00022142282978165895, 0.00020353395666461438, 0.00076233519939705729, 0.00020154830417595804, 0.00024781335378065705, 0.00013814504200126976, 0.00019953062292188406, 0.00015080030425451696, 0.00033684406662359834, 0.00035119586391374469, 0.00016743320156820118, 0.00016236711235251278, 0.00028272104100324214, 0.0004658270045183599, 0.00017822196241468191, 0.00026270025409758091, 0.00038505482370965183, 0.00013064155064057559, 0.00017458350339438766, 0.00018013897351920605, 0.00026903301477432251, 0.00024046887119766325, 0.00010334629041608423, 0.00011742582137230784, 0.00015914272808004171, 0.00014585512690246105, 0.00019132488523609936, 0.00023268369841389358, 9.8615753813646734e-05, 0.00011961092241108418, 0.00032314355485141277, 0.00025554414605721831, 0.00017243095498997718, 0.00021528433717321604, 0.00013289540947880596, 0.00020702880283351988, 0.00016633712220937014, 0.00013031045091338456, 0.00012540802708826959, 0.00018013925000559539, 0.00015345521387644112, 0.00011039998935302719, 0.00018149697280023247, 0.00030219508334994316, 0.00031125088571570814, 0.00013947303523309529, 0.00023093914205674082, 0.00016681324632372707, 0.00025940625346265733, 0.00010938036575680599, 0.00015137709851842374, 0.00028672540793195367, 0.00017420653603039682, 0.00011351935972925276, 0.00018712067685555667, 0.00017575625679455698, 0.00015831143537070602, 0.00020962447160854936, 0.00018178284517489374, 0.00012829819752369076, 0.00029544538119807839, 0.00019493872241582721, 0.0001237155229318887, 0.00022600949159823358, 0.00016983679961413145, 0.00022094865562394261, 0.00032910116715356708, 0.0002166072663385421, 0.00011199049185961485, 0.00036592758260667324, 0.00019819466979242861, 0.00027011914062313735, 0.00017027552530635148, 0.00032589226611889899, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -103,41,95,-36,-76,-10,-77,11,-59,2,-25,-12,28,27,52,-27,2,3,113,21,17,-51,127,62,56,29,9,49,-83,-125,-95,4,-54,-49,32,15,5,30,-12,37,4,1,-85,-8,-84,-32,-1,106,-28,11,-34,-9,-15,0,26,-56,-102,-8,-9,86,40,10,-13,12,-17,-54,-43,28,-52,-67,26,-15,33,-10,-83,-72,-38,17,-71,19,-57,77,96,-68,7,60,6,47,28,-42,-16,-13,-28,-29,-58,5, 
  /* [1][0][][] */ 32,31,68,-33,-93,-39,-3,40,-8,17,67,0,-9,-16,-69,-14,-23,-2,-54,40,11,-86,5,55,-1,-70,3,4,59,-98,125,-61,64,29,-24,56,42,106,-21,-33,57,17,3,2,-9,69,-127,-43,-47,-66,3,0,37,-92,-39,55,39,-26,-42,10,4,45,-30,-90,3,-14,-73,-28,27,-6,-60,-38,-33,-12,35,-74,28,12,-17,-62,-1,-30,-85,-14,27,-44,-27,-5,-67,-36,-51,52,47,69,-49,41, 
  /* [2][0][][] */ 96,-30,3,20,16,-73,72,5,1,-23,-11,-7,-62,-30,-3,-39,-95,-65,-50,55,-2,-45,-47,42,11,-68,-12,-36,-23,58,-74,127,-46,118,-29,29,19,-17,-13,-11,-106,73,73,12,-62,6,-18,-20,44,24,-56,-66,52,-19,-31,65,44,5,39,-1,29,42,-29,0,74,15,-5,-12,34,58,-62,-4,36,51,79,33,25,-81,85,48,87,-27,-49,18,-63,37,15,67,17,20,-11,38,-71,43,-25,44, 
  /* [3][0][][] */ 2,-12,-31,5,24,0,19,-60,-20,50,23,51,24,-13,-53,36,5,-23,33,11,15,127,40,-41,13,10,-21,6,58,-30,54,-22,-21,29,-19,-25,27,46,38,8,-72,-26,-33,15,-24,26,14,0,-12,-49,-15,-22,46,-62,-19,-47,-6,92,-24,-7,-5,-9,-39,7,23,47,-31,9,-17,8,9,-62,-31,-37,44,-14,15,5,-22,-32,-20,-13,-38,14,-15,-38,36,-20,2,21,18,-15,47,24,-26,68, 
  /* [4][0][][] */ 34,26,-43,29,28,20,-36,0,-26,68,80,-4,1,9,-6,-45,24,-15,-32,59,16,-38,53,86,-61,5,-127,8,-27,-43,8,13,-57,-57,14,52,33,29,24,38,-33,-29,39,-32,-7,4,-28,45,-31,70,-1,11,52,-14,-72,22,43,-8,9,1,51,2,38,6,-49,15,-37,5,-45,31,-47,45,24,-59,-27,-39,15,-51,4,1,-41,84,-74,-2,-37,32,25,-44,51,21,32,12,-58,-25,25,34, 
  /* [5][0][][] */ -78,38,60,-3,52,-24,56,-26,-7,38,-5,-2,35,-20,-23,-38,-24,-36,74,40,-101,-9,-89,46,-38,-11,37,48,21,-79,0,53,75,127,-13,40,-2,33,47,-17,-23,96,76,-43,9,63,51,-1,-3,20,-13,35,25,-47,27,-80,51,-40,-60,-69,57,99,-48,-14,99,-50,-68,-66,-31,-7,-45,-25,-18,13,-20,-49,45,-48,-53,-17,125,-18,22,-79,-91,31,34,-12,-56,30,34,-11,-12,32,5,86, 
  /* [6][0][][] */ 46,-12,-83,27,-36,-102,90,77,-61,63,-16,50,-113,-85,63,49,12,-46,-13,-17,-10,-23,-57,-77,-60,39,82,15,31,18,86,-55,16,9,25,-85,-10,0,22,66,7,10,-43,-23,0,-60,-83,21,35,-127,-12,70,29,16,-18,-71,48,32,12,-8,-113,43,-99,5,7,10,2,51,32,2,-2,-39,-23,17,80,41,55,-18,49,-77,-10,-50,-64,60,10,-63,33,24,-34,41,28,42,-20,-3,-14,100, 
  /* [7][0][][] */ 39,92,-55,-36,1,-10,30,-5,-82,22,-52,-72,-34,26,24,-23,-15,-50,-48,54,-20,127,21,30,-20,9,19,3,67,63,72,-21,67,14,-10,8,19,-15,14,41,-74,0,25,-80,25,-50,67,-34,43,-51,-98,-35,-42,25,5,-12,11,18,-84,15,9,115,41,-25,-51,-2,-38,29,-39,-22,-118,34,19,64,-47,53,-77,74,43,-92,-31,-40,65,-75,46,-23,-29,15,-1,82,-85,38,49,-40,-42,27, 
  /* [8][0][][] */ -16,101,-31,68,-43,-50,-80,24,-97,-40,14,41,-47,55,24,116,14,-61,16,31,32,-4,-3,2,-36,92,-10,44,-7,-4,-36,-21,-15,-67,-34,-67,-25,28,67,12,-3,-47,40,6,-48,-26,8,-23,-26,7,50,74,18,-34,-79,117,-32,41,-7,-30,-34,22,35,51,-22,-75,-46,-16,-40,13,0,-9,-31,-47,-109,-15,-53,26,-86,-33,-15,2,-53,-39,-1,-1,33,30,12,87,-48,-25,-88,-127,16,-39, 
  /* [9][0][][] */ -8,29,-70,44,-26,-28,74,79,-5,48,-22,108,-37,-26,15,127,7,21,73,10,35,28,46,-99,-37,-4,18,-1,17,-19,49,56,-39,10,4,-126,46,-5,-33,-11,-12,31,37,-19,-12,-2,18,21,46,79,21,-4,-67,-78,4,-10,16,-19,70,-28,-78,57,-73,-22,95,-4,-24,18,-65,39,47,34,-19,99,-25,-27,-28,23,-49,-21,55,-44,78,2,17,-23,-25,-44,-51,27,-1,13,76,35,-46,-10, 
  /* [10][0][][] */ 66,2,-33,0,-26,-27,67,4,10,-25,-32,-10,-82,-23,10,2,-63,-21,24,14,41,32,19,-3,-41,64,46,5,-44,-62,-18,-22,64,-26,50,4,49,-74,76,99,23,-67,10,5,-24,-76,-18,53,30,67,-53,-30,-20,23,23,31,-2,-60,65,38,-13,34,-64,-12,-13,-47,23,54,25,-27,-7,36,127,23,24,-76,36,-32,40,-11,-32,22,40,26,-26,-14,6,35,-32,-8,15,38,51,54,-27,15, 
  /* [11][0][][] */ -66,-39,53,-68,7,-17,-28,-52,45,-38,-2,-7,-14,-6,22,7,-85,1,71,9,-39,11,-83,-92,5,15,-33,55,11,-82,49,-34,21,18,-4,-26,-107,17,-127,1,-64,59,-57,61,23,10,8,-29,4,-50,-44,-46,5,24,77,-44,-27,-57,21,-47,-31,-57,-35,-117,21,-72,54,76,119,24,69,-23,-27,-14,64,-41,123,25,19,52,33,7,-22,97,89,1,5,-25,-74,-76,-17,7,68,36,42,61, 
  /* [12][0][][] */ 44,-40,-15,-51,38,114,-23,34,39,62,-7,35,16,39,25,-11,-64,56,14,37,126,-1,70,-84,29,18,-58,-75,-36,59,-3,4,25,-2,11,-41,26,-2,-44,-40,23,-15,42,57,-12,29,3,-1,-72,16,12,27,-44,-17,13,12,-43,53,16,44,22,-101,2,-90,-17,96,-8,-29,-4,-46,65,21,2,5,-27,45,-8,55,-62,-16,-30,29,127,18,-5,70,-41,-66,74,-4,-89,54,72,4,-13,-113, 
  /* [13][0][][] */ -4,10,-35,-58,-27,14,-3,-33,1,-31,-34,-108,60,-126,-35,-89,-21,-19,-98,-36,-92,-28,39,79,-49,-7,127,-24,16,-60,43,35,1,7,-119,110,-57,-49,16,-79,111,14,-11,36,7,-107,56,-16,86,-41,-51,28,6,15,2,61,52,-65,-35,-31,52,29,-18,-83,-26,53,-29,50,-82,-43,-94,19,-65,25,-65,-91,-104,26,76,70,-35,51,52,-91,65,30,18,-16,-17,-24,-17,38,-76,3,-12,-20, 
  /* [14][0][][] */ -20,11,-86,-38,84,100,-88,-13,39,-42,103,-24,11,-22,-33,-80,-77,8,35,127,5,-32,-11,12,-8,39,-25,63,9,-24,-47,13,77,11,-43,6,-26,72,76,-5,51,-6,25,22,4,-41,64,-44,21,-18,-18,-34,46,18,-46,27,23,70,-96,-15,-17,-67,-45,-114,10,-59,-50,-7,-86,61,-24,36,-3,-19,-23,-34,40,-24,-50,-24,26,3,-16,-21,-10,37,-6,-28,-35,69,84,16,-10,-54,-47,-73, 
  /* [15][0][][] */ -63,-55,20,-68,22,-12,-39,-87,-14,22,-12,25,1,-39,37,76,-108,-8,7,-88,19,-39,2,-104,43,-11,57,-89,-59,-127,-70,11,-49,54,64,-94,-50,-46,11,-54,-29,-7,24,-6,3,-12,61,104,-42,-32,17,-57,-56,78,13,-64,-111,-21,94,5,-27,7,-106,24,-75,-5,8,25,22,-89,73,-2,63,-48,-50,-43,8,22,62,-7,-23,80,56,25,9,-15,-118,16,-14,-52,-94,38,35,-34,-15,56, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.0020408881828188896, 0.0035600073169916868, 0.0021641752682626247, 0.0030326268170028925, 0.0030182404443621635, 0.0029150792397558689, 0.0027365940622985363, 0.002990019740536809, 0.0034926524385809898, 0.0019388896180316806, 0.0029185381717979908, 0.0023955176584422588, 0.0029648717027157545, 0.0029697234276682138, 0.004466191865503788, 0.0028557826299220324, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { 9469, 10117, -1886, 637, -3631, 3346, 4742, 1135, 11970, -5305, -8545, 10373, -11693, 16944, 5573, 18000, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 4.8020898248068988e-05, 8.3764876762870699e-05, 5.0921771617140621e-05, 7.1355927502736449e-05, 7.101742085069418e-05, 6.8590103182941675e-05, 6.4390449551865458e-05, 7.0353409682866186e-05, 8.2180056779179722e-05, 4.5620934542967007e-05, 6.8671484768856317e-05, 5.6365122873103246e-05, 6.9761685153935105e-05, 6.9875844928901643e-05, 0.00010508686682442203, 6.7194887378718704e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -15,94,-92,32,46,-41,107,71,-66,-5,38,-92,91,127,-56,28, 
  /* [1][0][][] */ -13,9,-53,-13,-9,45,20,-127,28,-34,-20,-49,-6,-42,-51,0, 
  /* [2][0][][] */ -24,-36,22,60,18,18,-85,127,-20,-11,70,-52,-14,-46,-48,68, 
  /* [3][0][][] */ 91,-117,82,-13,-16,-34,-27,127,-42,51,83,71,5,77,8,23, 
  /* [4][0][][] */ -52,-34,10,22,-70,10,-33,-127,-6,-2,5,3,28,37,124,112, 
  /* [5][0][][] */ 127,31,-19,-21,-76,28,22,65,20,-3,59,88,117,19,-88,-2, 
  /* [6][0][][] */ 11,-45,-69,-70,-76,-6,3,-41,-68,-62,-27,32,87,62,127,-1, 
  /* [7][0][][] */ -63,31,-35,-82,-2,-64,-75,16,-108,53,-70,-65,-127,-28,19,96, 
  /* [8][0][][] */ 45,51,66,4,59,29,71,5,55,-28,43,8,-127,-25,-72,12, 
  /* [9][0][][] */ -38,56,24,-46,-33,-19,34,-9,-39,45,-36,17,48,127,25,34, 
  /* [10][0][][] */ 78,65,-34,51,-18,-11,39,-55,-66,-20,-64,-107,-127,-82,18,83, 
  /* [11][0][][] */ 58,6,72,18,-9,-27,5,121,-89,29,-39,-2,-17,-7,75,127, 
  /* [12][0][][] */ -78,-26,30,-28,32,17,105,38,-95,52,-2,2,-24,114,-39,127, 
  /* [13][0][][] */ 31,29,-5,38,88,-7,110,127,-46,88,-68,-59,44,86,-88,-15, 
  /* [14][0][][] */ -111,127,11,5,3,15,56,-4,-30,39,107,-15,-98,7,-42,37, 
  /* [15][0][][] */ -5,-12,-127,-37,79,-37,-88,-43,-20,-22,-17,-67,-7,-86,-65,45, 
  /* [16][0][][] */ 105,-22,6,-17,24,-32,47,-29,-45,7,127,57,50,4,-33,25, 
  /* [17][0][][] */ 16,23,-26,-86,-12,-55,118,-127,0,-17,-39,35,42,74,1,47, 
  /* [18][0][][] */ 34,107,-13,-30,41,-60,-21,-46,-39,127,-17,-1,-13,51,-2,-37, 
  /* [19][0][][] */ -54,-108,127,-85,52,-109,21,-43,58,46,78,93,20,-22,60,-39, 
  /* [20][0][][] */ -17,106,63,13,12,9,18,-30,69,-2,98,-28,-127,-35,-76,-17, 
  /* [21][0][][] */ -79,31,33,20,81,30,63,66,-127,66,-55,19,-34,13,-61,-39, 
  /* [22][0][][] */ 14,-82,36,-4,16,-127,104,30,12,-47,-37,-69,42,-62,-46,-46, 
  /* [23][0][][] */ -66,-102,38,41,27,-39,20,-22,12,-47,59,-8,13,84,59,127, 
  /* [24][0][][] */ -18,7,24,100,49,43,-59,-127,54,34,-12,56,-1,36,1,-55, 
  /* [25][0][][] */ -11,41,29,-53,-22,-1,4,-36,-24,68,-55,-17,37,127,31,2, 
  /* [26][0][][] */ -70,86,5,21,34,-98,-3,-26,19,24,11,74,7,3,-83,127, 
  /* [27][0][][] */ -21,-127,-55,2,-65,84,8,-52,11,-43,65,-24,32,-38,-99,-12, 
  /* [28][0][][] */ -39,-3,36,77,23,9,-36,-127,-123,46,106,-6,75,13,-34,-23, 
  /* [29][0][][] */ -127,100,-29,-20,-42,33,-119,-90,-60,-36,5,3,28,-50,-116,73, 
  /* [30][0][][] */ 48,78,-44,73,-98,-85,-67,-22,-45,1,4,-107,127,35,-4,89, 
  /* [31][0][][] */ 127,40,-75,-49,-51,9,111,54,-53,-23,64,43,20,31,-34,13, 
  /* [32][0][][] */ -30,-11,127,5,-14,75,62,20,-11,-4,-15,14,0,54,71,31, 
  /* [33][0][][] */ 5,22,-68,-51,-5,18,127,21,11,-25,29,-75,97,116,-63,66, 
  /* [34][0][][] */ -84,-16,82,9,20,-70,108,-12,-127,31,43,-36,54,61,-50,-25, 
  /* [35][0][][] */ -10,16,-60,6,-86,124,-31,-24,-31,127,8,106,-65,88,32,45, 
  /* [36][0][][] */ -8,-71,127,-42,-51,25,-45,-9,15,25,-51,77,1,-83,-36,41, 
  /* [37][0][][] */ 68,-1,57,-29,88,-76,-39,38,-74,127,-60,-4,-67,-33,113,-15, 
  /* [38][0][][] */ 83,73,25,-101,14,-41,-127,41,-75,41,-109,-47,-89,-125,-122,59, 
  /* [39][0][][] */ -77,13,-51,-34,-80,-71,61,7,-127,-40,12,80,37,10,-11,64, 
  /* [40][0][][] */ 127,41,2,-108,-83,20,23,-52,-54,-24,-42,-78,25,70,55,45, 
  /* [41][0][][] */ 87,-79,-63,-41,-4,-14,-51,-4,52,-21,3,-57,127,-65,59,-28, 
  /* [42][0][][] */ -12,-88,-54,127,6,-106,-102,62,8,-1,12,40,-81,86,-85,4, 
  /* [43][0][][] */ -89,-34,-34,-127,-38,8,-11,77,52,-120,-48,25,-37,-64,-34,78, 
  /* [44][0][][] */ -30,41,32,-19,-24,-23,33,102,108,-67,72,93,127,33,-31,0, 
  /* [45][0][][] */ 45,118,-99,126,127,-88,-32,-118,116,-63,91,-48,-8,16,-104,76, 
  /* [46][0][][] */ -18,-56,-2,-6,89,-33,30,48,-5,91,-26,-127,38,72,-46,68, 
  /* [47][0][][] */ 91,-3,-48,6,65,-3,-27,-76,-7,127,-9,34,2,-102,-88,10, 
  /* [48][0][][] */ 20,32,-12,-108,-6,-33,112,-127,10,10,-37,46,50,64,6,33, 
  /* [49][0][][] */ -8,127,-64,42,40,-43,65,17,-28,20,44,-69,-12,65,88,-80, 
  /* [50][0][][] */ 13,31,-25,8,-127,9,-55,-68,38,65,34,33,-20,-37,-2,39, 
  /* [51][0][][] */ 127,-5,-60,4,-51,107,-72,-71,32,0,-23,85,-14,-61,10,30, 
  /* [52][0][][] */ -17,-52,44,69,-44,-92,-127,-6,-52,-52,-34,-62,18,-50,26,76, 
  /* [53][0][][] */ 27,89,45,-127,5,85,88,1,-13,-31,-3,-35,77,-98,9,55, 
  /* [54][0][][] */ 24,110,6,-27,-6,-91,-94,46,-4,-23,-34,127,79,91,17,66, 
  /* [55][0][][] */ -42,-27,48,18,48,-55,121,93,-92,-22,26,12,127,75,-33,9, 
  /* [56][0][][] */ 113,-13,13,26,-71,127,-44,-124,-40,45,-83,39,-47,106,2,55, 
  /* [57][0][][] */ -65,-71,-21,-46,-54,-92,42,-5,-127,-36,32,35,16,46,-1,66, 
  /* [58][0][][] */ 55,-45,56,29,12,-59,-20,25,26,-18,-127,-32,18,-32,-28,35, 
  /* [59][0][][] */ 75,25,-127,91,9,35,85,-25,-62,-50,33,-98,-106,-52,19,99, 
  /* [60][0][][] */ 7,32,-18,26,-23,-14,-14,-8,-39,-73,68,127,-37,-124,-37,-1, 
  /* [61][0][][] */ -19,23,68,-89,-75,43,15,108,-18,-106,62,70,95,5,-4,127, 
  /* [62][0][][] */ 95,71,-15,-127,-20,5,12,-56,-2,38,-43,45,31,-36,-92,-86, 
  /* [63][0][][] */ 1,-24,5,-6,-62,-62,-56,3,-73,-7,-33,-20,127,0,59,-13, 
  /* [64][0][][] */ 22,0,-23,55,-118,-27,-16,-107,53,127,44,6,53,-50,-32,125, 
  /* [65][0][][] */ -26,16,-6,-30,-68,88,10,-41,62,-122,87,-67,62,58,-127,50, 
  /* [66][0][][] */ -123,109,-92,-80,45,-30,-123,-61,-103,126,87,-10,-127,-63,59,50, 
  /* [67][0][][] */ 5,-41,-127,-122,68,84,16,-40,-32,-9,57,-10,37,42,9,64, 
  /* [68][0][][] */ 53,17,-20,-46,-71,30,23,30,-71,62,127,-10,-2,-42,-109,5, 
  /* [69][0][][] */ 77,-99,49,-27,16,-96,-29,127,3,60,72,60,-16,71,-29,-5, 
  /* [70][0][][] */ 43,41,117,38,95,-10,127,40,17,39,-55,45,-66,67,-69,34, 
  /* [71][0][][] */ 11,26,90,-72,-127,-87,17,29,-19,-23,22,-105,-74,8,-6,34, 
  /* [72][0][][] */ -59,-104,6,-111,56,-15,18,48,-80,10,-103,-6,65,126,-57,127, 
  /* [73][0][][] */ 17,28,52,12,115,-86,-51,19,-45,107,-88,29,-67,-41,127,-25, 
  /* [74][0][][] */ -97,14,-110,-60,72,-31,-46,32,-70,12,-127,-44,-47,-69,-44,70, 
  /* [75][0][][] */ 85,-15,53,-34,25,11,-127,-22,1,-83,57,-1,-7,-21,14,-17, 
  /* [76][0][][] */ -13,-71,-37,87,25,82,94,-60,70,-127,67,122,35,-78,-54,47, 
  /* [77][0][][] */ -31,-33,127,-37,32,-39,-19,-127,13,14,44,96,57,50,20,12, 
  /* [78][0][][] */ -53,13,22,-35,4,-53,30,-4,24,-9,14,-97,-120,-54,-127,-58, 
  /* [79][0][][] */ -99,-67,-14,35,127,56,-15,14,11,27,-13,57,-38,-73,-67,-13, 
  /* [80][0][][] */ 3,-127,53,97,-35,-23,-101,64,-17,13,70,16,-61,18,-35,78, 
  /* [81][0][][] */ 127,83,-28,85,-1,38,29,108,30,4,113,57,111,17,50,-20, 
  /* [82][0][][] */ -52,12,19,-22,24,-127,-115,-72,-11,97,-44,-34,-18,101,-52,-22, 
  /* [83][0][][] */ 118,-2,57,-25,-40,-12,-127,-24,4,-87,34,-17,-11,7,48,-35, 
  /* [84][0][][] */ 11,-120,-97,28,127,51,38,0,-127,13,-113,-16,62,-28,-88,31, 
  /* [85][0][][] */ 13,91,44,-34,97,16,36,-101,127,-25,31,-20,79,-95,13,-7, 
  /* [86][0][][] */ 117,-52,127,44,-6,-65,85,64,-79,-58,-97,-50,40,34,-72,21, 
  /* [87][0][][] */ 0,5,14,-79,67,-28,-41,11,33,-41,74,-33,-77,-127,-6,25, 
  /* [88][0][][] */ -61,-24,41,8,8,28,-60,-28,-31,30,-58,-127,-20,-23,-2,-25, 
  /* [89][0][][] */ -110,-5,20,-59,-13,-21,-127,64,82,63,-76,4,5,-88,-18,-51, 
  /* [90][0][][] */ -15,-24,-48,-99,127,9,-58,52,34,55,48,-5,48,32,-72,-10, 
  /* [91][0][][] */ -38,-40,5,39,-43,-27,4,66,-23,-65,37,-38,3,60,5,127, 
  /* [92][0][][] */ -29,95,10,-11,-15,70,-120,56,-35,-2,65,-4,-45,127,85,15, 
  /* [93][0][][] */ -12,75,-40,-59,71,82,-84,10,64,65,62,44,-127,18,-26,58, 
  /* [94][0][][] */ 27,67,84,9,-127,-46,19,-19,15,-19,30,-12,-46,-28,21,-20, 
  /* [95][0][][] */ 9,44,46,43,121,8,-120,95,-11,47,-89,119,17,41,127,-65, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.0015231167199090123, 0.002875609090551734, 0.003217761404812336, 0.0019523064838722348, 0.0015762546099722385, 0.0012417527614161372, 0.0012890561483800411, 0.002115695271641016, 0.0018922898452728987, 0.0025195470079779625, 0.0013985659461468458, 0.001940570306032896, 0.0015127074439078569, 0.0017972450004890561, 0.002007689792662859, 0.0019435747526586056, 0.0017456120112910867, 0.0019202460534870625, 0.0023136190138757229, 0.0011859715450555086, 0.0017886313144117594, 0.001908304519020021, 0.0016371856909245253, 0.0024547120556235313, 0.0022844111081212759, 0.0020980974659323692, 0.0023869515862315893, 0.0015142447082325816, 0.00099116249475628138, 0.0014580953866243362, 0.0012163317296653986, 0.0012909688521176577, 0.0027761755045503378, 0.0011639146832749248, 0.0015495142433792353, 0.001267377519980073, 0.0025853551924228668, 0.0012144580250605941, 0.0016369237564504147, 0.0011505456641316414, 0.0017553609795868397, 0.0019393733236938715, 0.0030868726316839457, 0.0016486679669469595, 0.0026577084790915251, 0.0016534358728677034, 0.0025947135873138905, 0.0033405651338398457, 0.0010678938124328852, 0.0021698169875890017, 0.0025097227189689875, 0.0017363685183227062, 0.0017491222824901342, 0.0025123688392341137, 0.002469443716108799, 0.0020194218959659338, 0.0016931294230744243, 0.0014703897759318352, 0.0024238051846623421, 0.0012359512038528919, 0.0026831859722733498, 0.0017249846132472157, 0.0030950694344937801, 0.0016723186708986759, 0.0011211020173504949, 0.0010783884208649397, 0.0015608831308782101, 0.001185063156299293, 0.0013184483395889401, 0.0026095488574355841, 0.0019632822368294001, 0.0021632108837366104, 0.0015144392382353544, 0.0011512874625623226, 0.0014295809669420123, 0.0018555637216195464, 0.0013341889716684818, 0.0014687228249385953, 0.0017619830323383212, 0.0022902199998497963, 0.0019943378865718842, 0.0017032992327585816, 0.0021700488869100809, 0.0029773057904094458, 0.0018885369645431638, 0.0018485044129192829, 0.0020576484967023134, 0.0015665926039218903, 0.001882943557575345, 0.0015852791257202625, 0.0021636970341205597, 0.0021451800130307674, 0.0018941474845632911, 0.0017972481437027454, 0.0040039285086095333, 0.0012433649972081184, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { 1282, -13, 1711, 3699, 3949, -3136, 4313, -975, -1344, -404, 4079, -2199, 3460, 3362, 1286, 1853, -613, -202, -1006, 4713, 2448, -563, 2091, -245, 104, 2561, 976, 2247, 6920, 2903, 4030, 1857, 895, 4611, 3965, 3724, -238, 3444, 2642, -3716, -155, 1128, -5, 1355, -875, 531, -861, 604, -5998, 1005, 1157, -2091, 3879, -585, 1443, 1189, 1490, 2469, -78, -2302, 294, 1512, 293, 3459, 5630, 3770, 2298, 5571, 4746, -600, 2564, 2919, 3063, -1682, 4453, 3845, 802, -3438, 848, 1238, 4023, 1567, 143, -811, 1049, 552, 1290, -1857, 3659, 1259, 2920, 1026, -91, -2173, 23, 2375, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00016727502224966884, 0.00031581136863678694, 0.00035338796442374587, 0.0002144104364560917, 0.00017311084957327694, 0.00013637446681968868, 0.00014156951510813087, 0.00023235446133185178, 0.00020781914645340294, 0.00027670714189298451, 0.00015359633835032582, 0.00021312151511665434, 0.00016613183834124357, 0.00019738092669285834, 0.00022049286053515971, 0.00021345147979445755, 0.00019171038002241403, 0.0002108894259436056, 0.00025409128284081817, 0.00013024832878727466, 0.00019643493578769267, 0.00020957794913556427, 0.00017980254779104143, 0.00026958671514876187, 0.00025088354595936835, 0.00023042180691845715, 0.00026214495301246643, 0.00016630065510980785, 0.00010885359370149672, 0.00016013410640880466, 0.00013358262367546558, 0.00014177957200445235, 0.00030489114578813314, 0.0001278259587706998, 0.00017017411300912499, 0.00013918867625761777, 0.00028393446700647473, 0.00013337684504222125, 0.00017977377865463495, 0.00012635771417990327, 0.00019278105173725635, 0.00021299005311448127, 0.00033901320421136916, 0.00018106358766090125, 0.00029188062762841582, 0.00018158720922656357, 0.00028496226877905428, 0.00036687476676888764, 0.00011728054960258305, 0.0002382983366260305, 0.00027562820469029248, 0.00019069522386416793, 0.00019209588936064392, 0.00027591880643740296, 0.0002712045970838517, 0.00022178133076522499, 0.00018594652647152543, 0.00016148433496709913, 0.00026619239361025393, 0.00013573731121141464, 0.0002946786698885262, 0.00018944499606732279, 0.00033991341479122639, 0.00018366100266575813, 0.00012312408944126219, 0.000118433112220373, 0.0001714226818876341, 0.0001301485754083842, 0.00014479749370366335, 0.00028659153031185269, 0.00021561582980211824, 0.00023757283634040505, 0.00016632203187327832, 0.00012643919035326689, 0.00015700253425166011, 0.00020378573390189558, 0.00014652618847321719, 0.00016130125732161105, 0.00019350831280462444, 0.00025152150192297995, 0.00021902649314142764, 0.00018706341506913304, 0.00023832380247768015, 0.00032698013819754124, 0.0002074069925583899, 0.00020301045151427388, 0.00022597952920477837, 0.00017204972391482443, 0.00020679269800893962, 0.00017410195141565055, 0.00023762622731737792, 0.00023559261171612889, 0.00020802316430490464, 0.00019738127593882382, 0.00043972811545245349, 0.00013655151997227222, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 24,42,33,-42,-36,17,5,36,-29,-12,-54,-39,-52,77,-22,45,32,61,-20,6,-30,-62,-9,20,37,-52,11,69,39,-44,51,11,-39,62,23,-31,-21,-42,-127,-4,-48,-21,76,-31,51,13,-21,77,-51,61,-46,17,-18,58,16,40,-43,-42,-48,31,0,59,47,-63,49,-57,-54,39,39,-36,-32,77,-25,-28,-21,68,-19,-26,-17,-33,-63,41,-12,3,-19,-31,-19,-27,-54,-35,13,42,-47,-48,-11,-22, 
  /* [1][0][][] */ 61,63,57,37,55,2,29,59,45,38,-43,50,-67,-82,4,-51,-6,7,-3,-22,101,58,-41,10,94,-12,-21,7,86,66,8,-17,-34,-39,-53,-29,71,-31,5,57,35,113,-4,25,42,19,-26,39,68,-83,40,42,12,-44,-54,-45,67,53,112,60,93,-29,-21,-3,116,25,-13,81,72,63,61,66,2,14,33,41,107,-2,127,44,-36,108,-29,93,57,32,-52,50,-3,2,39,11,-32,20,56,37, 
  /* [2][0][][] */ 9,-52,-87,-115,-34,15,69,38,26,-36,-44,-21,51,82,-49,-92,-80,39,-3,40,-96,-21,29,20,-127,79,-31,-42,-16,-26,-72,35,56,-56,49,7,-75,55,-74,63,53,-39,68,78,-51,7,62,72,-4,-22,9,73,-85,-60,17,-69,-50,26,-12,108,96,76,-25,93,102,88,-49,-65,7,13,33,-11,25,58,-2,-56,90,111,-89,-86,-89,106,93,27,-77,47,11,35,101,80,60,100,-30,-24,87,106, 
  /* [3][0][][] */ -43,46,66,-6,56,53,43,32,127,10,23,-32,58,40,55,64,-65,37,-30,60,11,36,-36,6,124,42,-54,11,29,21,-22,58,-57,17,17,-44,-34,-14,6,-30,-46,-6,16,14,-38,-58,-18,3,-35,49,-15,-49,32,20,62,-33,-35,-51,110,-53,-46,20,-53,-10,8,47,-32,-16,-17,18,115,18,64,38,-20,-22,-66,-31,55,20,71,56,-26,11,56,-55,68,-39,4,-14,124,58,-45,-8,24,-8, 
  /* [4][0][][] */ -106,13,69,-21,47,-3,-41,-25,29,51,-120,-62,-82,100,19,-110,67,28,-14,-84,-91,100,-127,-48,-28,-126,78,26,-1,-119,101,17,-111,32,-68,-62,88,-17,-91,-114,88,78,-110,-115,-28,80,-34,-30,105,-30,97,94,69,-123,-15,23,-114,-40,105,-75,69,-46,-23,66,-66,16,-116,-91,12,88,35,-27,-75,-6,17,-81,-42,68,-39,42,17,-117,67,-8,39,109,-11,-34,-27,-12,92,42,94,-14,-110,-115, 
  /* [5][0][][] */ -71,104,-50,-57,14,-14,-37,36,-24,-68,34,18,-64,13,66,63,-73,79,77,-15,62,3,-39,63,-77,25,-28,-39,-12,28,41,-5,-54,40,38,36,62,-37,-68,-33,51,4,-34,-48,64,127,-5,39,36,72,88,98,-72,-9,21,-35,87,-38,-81,50,44,37,40,36,52,-42,25,27,63,-63,2,-9,-84,72,3,-73,-30,61,12,-18,34,76,-56,-28,23,-6,-78,-18,59,60,-62,64,-21,53,26,80, 
  /* [6][0][][] */ 78,-30,-8,-93,-104,-38,33,-94,127,52,12,83,30,-72,-33,84,-74,66,21,63,-101,80,62,13,-49,22,-104,-102,-53,-90,-11,28,-89,0,46,52,-103,-52,-2,36,-89,23,54,-13,-102,60,-96,-34,39,73,-16,16,-79,-102,-67,-86,-71,-20,-7,58,33,-54,66,-5,90,61,-31,28,-15,-85,-51,-29,39,-48,65,81,-49,31,-51,-77,8,-32,-37,-41,50,-12,-18,92,-16,-60,-93,-42,-78,-3,75,-91, 
  /* [7][0][][] */ 53,52,4,-49,83,-9,0,19,56,-32,45,34,-33,114,91,100,53,4,19,63,68,9,27,-59,97,-4,37,69,-30,2,8,16,-18,-19,54,20,106,60,42,-68,-53,57,-12,43,-7,14,-8,54,54,36,15,86,10,50,54,17,66,-67,32,-49,29,-63,21,-1,19,-37,-19,-46,45,-53,-44,32,-84,101,39,84,-35,8,-10,43,-35,46,71,99,-3,-6,-14,-3,109,127,82,-72,68,-28,89,-3, 
  /* [8][0][][] */ -54,-64,-127,-17,40,-15,-28,-92,62,-104,92,-97,-28,-106,-107,-17,-6,64,57,-69,72,49,70,-53,-82,-98,8,-101,-93,-80,-119,-10,-43,-9,-84,91,-118,-100,-58,-67,-42,-12,26,-25,-27,-78,-25,54,56,67,-63,-52,84,3,-20,-87,-28,-7,-47,9,-90,-18,-113,72,-42,-49,1,-65,-82,23,-103,39,32,66,96,59,64,-15,-22,-39,17,55,-30,9,50,-71,-36,40,33,27,-71,58,-100,89,85,-55, 
  /* [9][0][][] */ -14,-29,39,76,34,61,82,45,1,54,70,68,101,77,-14,-8,2,-42,-39,-57,-86,84,30,-12,-127,-37,-27,50,62,-96,-15,54,-68,-44,107,-16,-26,7,-79,-46,98,78,23,19,47,64,54,-5,-16,-17,-90,-105,-82,29,42,74,-24,-53,-25,14,7,-46,52,79,-98,76,74,66,95,-36,-107,29,55,50,70,-81,100,-55,16,-54,-87,-23,84,-85,57,-51,-67,23,-71,44,45,19,-54,26,29,48, 
  /* [10][0][][] */ -87,34,-68,-87,-44,58,-104,-84,106,-94,62,45,-18,16,48,-8,75,1,-26,24,6,-59,-39,55,80,74,-33,-32,-96,-62,-22,-96,39,17,73,-100,94,-39,63,79,54,26,18,37,-23,45,-17,78,-75,86,73,127,74,-84,63,32,18,-20,96,-18,52,39,115,34,-40,72,-6,33,-6,-20,72,14,-88,-64,14,52,46,78,67,29,-9,18,38,107,2,93,-82,26,48,90,-34,58,29,52,26,30, 
  /* [11][0][][] */ 52,57,-47,-74,55,-2,-31,-57,-24,20,33,-3,1,-40,32,-37,-70,47,9,-39,-28,-29,55,-71,-22,60,45,56,5,31,0,27,28,50,-87,-50,2,99,-40,-55,32,-55,62,-75,57,55,-70,55,42,71,-24,93,28,-35,-25,-76,-16,45,-61,54,-12,-8,127,-39,46,-23,65,-4,62,51,-44,8,-75,2,10,-56,-1,59,-49,-9,-81,-1,-57,90,-9,-30,-49,-16,-14,54,-34,-54,55,18,100,34, 
  /* [12][0][][] */ -85,-48,-93,91,-7,-51,-69,-85,-26,-11,-59,20,-83,-106,-57,52,22,-50,7,90,-107,-47,45,34,-26,71,-93,-13,80,-94,60,60,14,-45,-20,-92,-8,-105,58,52,68,65,28,-87,16,-23,-74,65,-91,77,-68,44,-75,-112,68,27,-14,-94,-95,-104,38,-39,92,-35,-93,-14,-13,-75,-121,-121,22,-39,-121,-85,-28,-34,-115,-37,66,-70,4,59,74,-27,51,-83,-32,-79,-88,-98,-18,-9,-115,-93,-127,64, 
  /* [13][0][][] */ 17,40,61,-26,47,-4,13,-45,39,-67,23,0,-12,57,20,56,21,13,13,53,93,-7,11,-46,120,-38,-6,-38,23,-31,-35,-18,-3,-62,9,1,83,-45,74,7,-4,21,61,48,19,22,27,83,-61,41,-7,42,-7,-44,0,36,35,-40,95,-47,-53,-16,74,-30,-51,14,-23,-59,-50,-24,-16,49,-23,-20,57,39,-27,89,31,23,54,25,19,127,56,21,-31,54,6,30,59,-30,41,68,10,-12, 
  /* [14][0][][] */ -42,-37,71,47,39,-76,8,9,7,57,-28,-27,-2,101,-28,13,-81,-37,11,-72,-20,51,-48,-42,-25,-16,49,4,58,-75,57,-46,-24,65,98,17,32,86,-63,-89,75,76,89,0,55,-60,17,-61,-80,21,-29,-78,-6,-85,70,-87,13,-81,-48,-91,-75,-92,21,15,-13,36,21,-22,-94,2,20,-49,-88,-22,49,-22,-85,6,30,16,93,-31,127,34,-65,-67,-54,28,63,0,-59,-37,-11,-94,-42,-16, 
  /* [15][0][][] */ 6,16,2,-24,-39,32,2,18,29,-20,39,-21,-7,-30,-19,-13,-15,33,5,10,8,-41,-22,-12,64,-7,37,38,-10,-31,-48,7,21,37,-19,-13,79,69,36,-37,-26,42,35,-24,29,17,-37,18,9,-19,-15,-38,-29,-4,12,2,17,-7,43,-21,-42,-38,-38,-26,-21,9,-9,-31,-10,-23,-27,6,24,56,2,34,-15,38,-31,91,-5,-29,41,-12,-20,-15,37,127,50,56,-16,35,-6,-1,44,8, 
  /* [16][0][][] */ 8,22,-70,99,75,-34,83,84,-49,48,68,-40,-23,63,-72,-14,37,69,-59,-8,-91,-9,-68,23,24,-31,-41,29,-19,78,93,37,-47,-19,28,24,-2,50,-93,56,50,31,56,-28,-56,-29,-74,-70,-9,34,76,23,-15,-73,59,19,50,78,-54,-36,35,-2,-22,60,7,35,57,-18,15,-32,51,24,67,-12,43,-50,67,-32,-69,-56,-8,31,-50,-127,73,-56,16,-75,36,-101,71,-60,44,21,34,-107, 
  /* [17][0][][] */ -6,60,-67,-19,-11,24,-21,58,1,-13,62,-19,-18,63,25,-32,21,51,-17,42,7,-2,-31,-5,-92,11,-11,-39,-12,33,42,-51,40,-16,-11,31,23,-45,-34,26,-16,69,-27,-46,62,26,-43,-51,27,-57,9,-43,-37,17,28,19,-9,49,-49,-31,59,58,46,47,-21,24,-52,45,-32,-41,17,-8,-22,-127,-6,31,-57,-24,55,-75,-31,4,22,-28,42,25,-20,53,-20,15,-16,37,-48,-28,42,-46, 
  /* [18][0][][] */ 41,-67,-22,-12,28,12,-68,-61,-3,18,-56,-44,-9,54,4,18,7,49,-54,-30,-49,21,26,29,53,-22,13,-53,-22,-87,15,-71,-26,46,59,-45,8,-21,-35,-45,-61,45,110,-37,-7,27,66,-37,51,-2,-48,-53,-22,-7,-31,17,32,15,-50,36,-62,-16,34,63,-16,13,-63,-67,51,-15,-49,52,-56,64,-6,63,20,54,-8,-12,-29,-32,-57,67,14,-34,76,8,67,127,-24,72,-63,-12,-5,-48, 
  /* [19][0][][] */ 48,55,-120,77,104,53,-45,15,66,-26,6,-46,64,38,105,-39,31,-77,-44,113,-83,-68,3,110,15,2,34,-21,85,50,94,-100,70,-20,-66,87,-78,-21,-49,17,58,27,-1,40,-46,-27,-127,66,106,8,89,-42,71,-67,68,92,82,15,-87,-48,-38,59,50,-29,93,-10,-56,81,97,-23,-66,11,17,54,19,95,4,83,-79,95,-78,-58,57,-119,27,-6,50,-70,-87,-19,-13,15,-14,-34,32,-117, 
  /* [20][0][][] */ -16,-71,-26,39,69,13,58,29,19,-67,10,-9,-32,-78,-8,-76,-21,-51,101,28,53,-105,73,-28,58,77,-72,8,-4,-62,-47,-2,25,72,56,-56,83,18,-57,10,70,-83,-70,-27,29,28,-50,28,60,-16,95,-16,-4,71,12,-81,-48,-102,127,6,-30,65,77,54,21,72,19,-69,21,58,-40,12,-85,-84,-36,90,-12,-75,37,-37,5,73,93,31,33,21,-75,-88,122,90,-86,-75,41,-53,38,76, 
  /* [21][0][][] */ 65,75,89,-45,-14,-22,-48,-26,-42,82,31,-48,-24,-30,-47,-51,-9,-3,-68,-58,-29,40,86,-29,40,35,68,-4,-32,-67,80,15,-55,32,76,78,-108,-98,-127,23,14,36,-11,23,-37,84,-57,60,53,-66,-8,-78,43,-23,-54,-28,-23,-34,15,70,17,-17,20,50,-22,44,-36,11,8,-18,-7,21,-12,-126,-24,16,-51,75,74,33,-24,80,-54,-29,-74,-33,24,24,-96,-16,-24,67,-8,-37,75,-64, 
  /* [22][0][][] */ 3,-38,43,4,-26,-26,41,6,35,-2,-16,15,-7,23,-23,-25,-28,1,-38,21,27,31,17,47,24,10,-25,28,-18,-34,-15,-19,-38,47,17,10,8,-42,-23,-7,-4,5,3,19,41,-19,55,-39,-38,-13,-54,14,-15,22,5,30,29,45,-7,32,-33,5,-15,15,25,-26,-39,-1,25,53,-26,-5,26,22,-23,-6,-32,-31,52,0,51,-23,-25,-12,35,39,15,127,8,62,51,27,-39,35,25,23, 
  /* [23][0][][] */ -6,-11,42,-23,-80,25,57,17,-18,-71,57,-60,-82,103,58,-28,37,44,30,7,-5,79,84,-1,5,-38,-50,-50,-91,34,11,112,56,-37,95,-27,-65,73,14,-57,107,37,118,-64,-47,44,-24,79,24,91,-78,-41,-80,90,80,24,0,9,-16,-2,-40,59,96,-90,88,-67,14,-1,87,114,-112,112,104,48,25,-52,-94,-11,-111,-44,-92,26,-75,-109,-30,-100,127,-126,-78,-118,-30,-48,8,-76,-51,82, 
  /* [24][0][][] */ -12,47,95,88,39,-29,-88,72,29,-79,-62,59,13,44,-7,-45,-29,20,-29,70,123,-8,-6,16,41,52,-54,-55,61,80,65,-28,87,-42,-9,-25,37,-3,11,-76,-9,81,-50,30,-41,42,39,-30,-86,-40,6,-86,-32,53,86,-37,37,-41,106,-32,71,23,42,-18,-95,-14,-51,78,45,-50,59,28,-3,-85,-8,-10,7,-47,-11,101,55,-45,64,-4,-60,-46,16,-42,-10,127,23,-27,-53,-44,57,121, 
  /* [25][0][][] */ -22,-2,9,65,-8,12,-84,22,4,47,53,33,-74,78,75,-75,-47,-17,-56,21,86,84,-5,70,74,-68,-44,-52,50,57,-90,47,-71,-60,73,89,-26,60,-37,84,-94,89,62,3,0,-54,-64,-60,-39,16,-69,-26,-13,-5,-89,-80,32,-35,118,13,-57,78,-24,9,-67,-77,-79,67,11,15,66,51,4,56,-21,4,13,13,54,-53,-63,-6,-39,58,73,28,10,40,-74,91,-13,-18,-17,81,127,63, 
  /* [26][0][][] */ 83,-65,9,13,87,-72,103,-23,3,-7,-65,17,-18,-37,44,-10,104,23,-93,-54,24,-37,70,93,-78,-12,55,54,36,3,-24,-19,-12,58,55,113,4,54,-127,106,102,17,-8,-71,10,37,112,-28,26,54,80,-67,100,95,78,45,84,18,-89,-2,24,117,-89,-82,60,-9,-84,-12,15,-29,14,51,-77,-66,-61,-59,-4,22,-22,21,106,30,-79,-85,2,-51,16,-75,-39,-44,87,110,-28,52,27,-88, 
  /* [27][0][][] */ 26,53,-51,64,-8,-13,9,31,-21,47,8,12,-70,51,54,20,28,-61,45,-37,14,48,71,-64,-6,48,-19,31,64,-15,35,-61,69,-49,20,71,91,90,7,-26,14,65,-23,25,28,14,58,37,20,-3,72,108,74,57,-63,-55,60,-20,29,18,57,-51,-6,-40,37,53,38,-48,30,-5,41,-59,-9,16,26,-16,-28,26,82,56,-28,-29,102,55,-44,9,13,49,127,78,39,39,56,26,66,10, 
  /* [28][0][][] */ -99,92,-40,56,3,72,-94,-14,71,-63,-86,55,45,-40,13,-89,-63,55,42,69,105,60,2,-78,101,-60,57,87,-47,14,-23,26,-24,8,-36,-46,26,79,-25,90,-80,-23,-8,45,81,98,-19,51,86,1,-90,69,41,-39,13,44,127,28,54,64,31,-30,37,-103,-68,-10,67,-44,-75,42,77,85,-98,37,89,24,44,-42,-10,76,-64,58,75,59,36,14,-70,-56,-59,38,72,-78,37,57,33,99, 
  /* [29][0][][] */ 20,-4,4,14,-14,11,25,-79,-60,-18,-29,-75,59,-39,-51,-13,80,83,-52,90,32,-45,-69,-65,6,-39,-66,-30,-23,81,-43,28,-69,98,93,13,-10,-87,6,-19,94,-37,-62,32,-62,60,-118,30,-16,57,42,60,-60,3,72,75,67,-9,-57,13,100,86,-43,35,74,-59,-84,37,64,-27,-12,-34,-24,-127,-15,-64,-37,37,4,48,-2,-29,-28,-32,12,-81,-74,73,-57,-9,-61,-43,-72,7,-46,-91, 
  /* [30][0][][] */ -76,-88,-107,-33,70,71,56,14,-86,43,28,48,92,23,-87,-101,86,106,54,24,-22,-66,87,-58,-34,65,-15,15,90,-25,9,39,11,-26,33,43,-60,-38,79,-18,-8,-93,-106,-75,59,27,-72,-56,-60,83,-74,-70,-83,-18,88,-88,120,56,-4,-14,-51,-87,-3,83,114,87,33,66,86,62,115,-64,33,-127,-71,37,49,-18,-16,-45,61,34,51,-5,65,-78,35,27,70,17,56,-98,19,75,-115,-89, 
  /* [31][0][][] */ 31,101,65,-34,-67,-19,94,-69,-93,-49,63,-55,-76,-82,96,22,-20,41,-3,37,-17,-37,90,3,71,94,-39,-72,-22,82,49,57,82,27,62,102,58,120,3,-88,-16,84,-116,38,18,87,49,-18,-122,-23,-69,15,39,-88,-16,-7,-13,30,38,104,-11,-127,96,-102,17,-100,88,-71,-117,26,122,-23,83,-60,-26,56,-18,75,50,-80,1,-29,-102,-95,-36,68,108,-104,-72,97,51,-24,-46,-38,-111,68, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0031787222251296043, 0.002648830646649003, 0.0019957122858613729, 0.0034606328699737787, 0.0018202969804406166, 0.0027532326057553291, 0.0021644763182848692, 0.0029503447003662586, 0.0020792477298527956, 0.0020881120581179857, 0.0022678987588733435, 0.0027270016726106405, 0.0019653590861707926, 0.0036275750026106834, 0.0022235345095396042, 0.0049047842621803284, 0.0025925049558281898, 0.0032822883222252131, 0.0031065903604030609, 0.0020454914774745703, 0.0022987283300608397, 0.0027047519106417894, 0.0058514499105513096, 0.0021435674279928207, 0.0024348725564777851, 0.0022823857143521309, 0.0021162224002182484, 0.0034193561878055334, 0.0022496399469673634, 0.0023164020385593176, 0.0020137596875429153, 0.0017801618669182062, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { 288, 494, 298, 449, -446, -335, -354, 1788, -481, 463, -356, -40, -694, 566, -88, -27, 480, 345, -354, 477, -360, 411, 177, 165, 268, 193, 545, 804, -170, 440, 637, 24, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 7.4793468229472637e-05, 6.2325430917553604e-05, 4.6957935410318896e-05, 8.1426660472061485e-05, 4.2830517486436293e-05, 6.4781947003211826e-05, 5.0928854761878029e-05, 6.9419875217135996e-05, 4.8923477152129635e-05, 4.9132049753097817e-05, 5.3362324251793325e-05, 6.4164749346673489e-05, 4.6243745600804687e-05, 8.5354709881357849e-05, 5.2318460802780464e-05, 0.00011540669220266864, 6.10001188761089e-05, 7.7230317401699722e-05, 7.309624197660014e-05, 4.812921179109253e-05, 5.4087726311990991e-05, 6.3641222368460149e-05, 0.00013768117059953511, 5.0436879973858595e-05, 5.7291119446745142e-05, 5.3703195590060204e-05, 4.9793470680015162e-05, 8.0455443821847439e-05, 5.2932704420527443e-05, 5.4503580031450838e-05, 4.7382582124555483e-05, 4.1886163671733811e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[4*1*1*32] = { 
  /* [0][0][][] */ -68,-55,43,82,32,-113,45,127,-59,34,43,1,-25,72,-10,71,-31,-21,-32,19,-2,-7,-37,-50,125,46,-55,78,-48,-10,31,-12, 
  /* [1][0][][] */ 93,-127,22,23,60,-86,-53,-57,-81,102,-58,-15,83,-103,17,90,33,-52,-50,-39,-25,68,102,123,-98,48,114,-126,-12,-58,-30,-37, 
  /* [2][0][][] */ -5,-51,10,7,-86,-44,-20,-53,7,19,-32,-57,66,-127,-97,1,92,43,-119,78,-25,22,-51,-31,38,-86,95,-51,-92,104,90,87, 
  /* [3][0][][] */ 96,-73,79,-45,-72,51,4,74,55,58,4,52,-5,-127,54,-89,6,46,41,-14,-7,54,-99,40,-49,-75,25,34,-53,80,-13,-85, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant42_scale = { 4, { 0.0049364035949110985, 0.0037126431707292795, 0.003988306038081646, 0.004334957804530859, } };
const TfArray<4, int> quant42_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int32_t tensor_data43[4] = { 10166, -19652, -15437, -16972, };
const TfArray<1, int> tensor_dimension43 = { 1, { 4 } };
const TfArray<4, float> quant43_scale = { 4, { 0.00030850910115987062, 0.00023202807642519474, 0.00024925611796788871, 0.00027092071832157671, } };
const TfArray<4, int> quant43_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,20,20,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.13693629205226898, } };
const TfArray<1, int> quant46_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,20,20,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,21,21,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,10,10,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.081753283739089966, } };
const TfArray<1, int> quant50_zero = { 1, { -34 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,10,10,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.080802984535694122, } };
const TfArray<1, int> quant53_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,10,10,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.10879071056842804, } };
const TfArray<1, int> quant54_zero = { 1, { -35 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,10,10,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,11,11,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,5,5,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,5,5,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.068286120891571045, } };
const TfArray<1, int> quant58_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,5,5,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,5,5,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,5,5,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.059907674789428711, } };
const TfArray<1, int> quant61_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,5,5,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.087388008832931519, } };
const TfArray<1, int> quant62_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,5,5,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,5,5,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,5,5,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.046725589781999588, } };
const TfArray<1, int> quant65_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,5,5,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.10982416570186615, } };
const TfArray<1, int> quant66_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,5,5,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,5,5,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.062496736645698547, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,5,5,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.15518742799758911, } };
const TfArray<1, int> quant69_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,5,5,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6400, (TfLiteIntArray*)&tensor_dimension44, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6400, (TfLiteIntArray*)&tensor_dimension46, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21168, (TfLiteIntArray*)&tensor_dimension47, 19200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 21168, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 21168, (TfLiteIntArray*)&tensor_dimension49, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 10464, (TfLiteIntArray*)&tensor_dimension50, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4800, (TfLiteIntArray*)&tensor_dimension51, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4800, (TfLiteIntArray*)&tensor_dimension53, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5808, (TfLiteIntArray*)&tensor_dimension55, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 5808, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5808, (TfLiteIntArray*)&tensor_dimension57, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 7008, (TfLiteIntArray*)&tensor_dimension58, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension59, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension61, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6528, (TfLiteIntArray*)&tensor_dimension62, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension63, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2800, (TfLiteIntArray*)&tensor_dimension65, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension66, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2400, (TfLiteIntArray*)&tensor_dimension68, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 112, (TfLiteIntArray*)&tensor_dimension69, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 100, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
